   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"adaptive_sync.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  22              	rreg_uriquery:
  23 0000 683D7563 		.ascii	"h=ucb\000"
  23      6200
  24 0006 0000     		.align	2
  27              	infoBoardname:
  28 0008 43433235 		.ascii	"CC2538\000"
  28      333800
  29 000f 00       		.align	2
  32              	infouCName:
  33 0010 43433235 		.ascii	"CC2538\000"
  33      333800
  34 0017 00       		.align	2
  37              	infoRadioName:
  38 0018 43433235 		.ascii	"CC2538 SoC\000"
  38      33382053 
  38      6F4300
  39 0023 00       		.align	2
  42              	infoStackName:
  43 0024 4F70656E 		.ascii	"OpenWSN \000"
  43      57534E20 
  43      00
  44 002d 000000   		.align	2
  47              	all_routers_multicast:
  48 0030 FF       		.byte	-1
  49 0031 02       		.byte	2
  50 0032 00       		.byte	0
  51 0033 00       		.byte	0
  52 0034 00       		.byte	0
  53 0035 00       		.byte	0
  54 0036 00       		.byte	0
  55 0037 00       		.byte	0
  56 0038 00       		.byte	0
  57 0039 00       		.byte	0
  58 003a 00       		.byte	0
  59 003b 00       		.byte	0
  60 003c 00       		.byte	0
  61 003d 00       		.byte	0
  62 003e 00       		.byte	0
  63 003f 02       		.byte	2
  64              		.comm	adaptive_sync_vars,44,4
  65              		.text
  66              		.align	2
  67              		.global	adaptive_sync_init
  68              		.thumb
  69              		.thumb_func
  71              	adaptive_sync_init:
  72              	.LFB0:
  73              		.file 1 "openstack/02a-MAClow/adaptive_sync.c"
   1:openstack/02a-MAClow/adaptive_sync.c **** /**
   2:openstack/02a-MAClow/adaptive_sync.c **** \brief this file is used for the time synchronizatino between different hardware platform
   3:openstack/02a-MAClow/adaptive_sync.c **** 
   4:openstack/02a-MAClow/adaptive_sync.c **** \author Tengfei Chang <tengfei.chang@gmail.com>, January ,2014.
   5:openstack/02a-MAClow/adaptive_sync.c **** */
   6:openstack/02a-MAClow/adaptive_sync.c **** #include "opendefs.h"
   7:openstack/02a-MAClow/adaptive_sync.c **** #include "adaptive_sync.h"
   8:openstack/02a-MAClow/adaptive_sync.c **** #include "radio.h"
   9:openstack/02a-MAClow/adaptive_sync.c **** #include "openserial.h"
  10:openstack/02a-MAClow/adaptive_sync.c **** #include "leds.h"
  11:openstack/02a-MAClow/adaptive_sync.c **** #include "neighbors.h"
  12:openstack/02a-MAClow/adaptive_sync.c **** #include "debugpins.h"
  13:openstack/02a-MAClow/adaptive_sync.c **** #include "IEEE802154Ecsl.h"
  14:openstack/02a-MAClow/adaptive_sync.c **** #include "packetfunctions.h"
  15:openstack/02a-MAClow/adaptive_sync.c **** #include "sixtop.h"
  16:openstack/02a-MAClow/adaptive_sync.c **** #include "scheduler.h"
  17:openstack/02a-MAClow/adaptive_sync.c **** #include "openqueue.h"
  18:openstack/02a-MAClow/adaptive_sync.c **** #include "openrandom.h"
  19:openstack/02a-MAClow/adaptive_sync.c **** 
  20:openstack/02a-MAClow/adaptive_sync.c **** //=========================== define ==========================================
  21:openstack/02a-MAClow/adaptive_sync.c **** 
  22:openstack/02a-MAClow/adaptive_sync.c **** #define BASIC_COMPENSATION_THRESHOLD  58
  23:openstack/02a-MAClow/adaptive_sync.c **** 
  24:openstack/02a-MAClow/adaptive_sync.c **** //=========================== type ============================================
  25:openstack/02a-MAClow/adaptive_sync.c **** 
  26:openstack/02a-MAClow/adaptive_sync.c **** //=========================== variables =======================================
  27:openstack/02a-MAClow/adaptive_sync.c **** 
  28:openstack/02a-MAClow/adaptive_sync.c **** adaptive_sync_vars_t adaptive_sync_vars;
  29:openstack/02a-MAClow/adaptive_sync.c **** 
  30:openstack/02a-MAClow/adaptive_sync.c **** //=========================== public ==========================================
  31:openstack/02a-MAClow/adaptive_sync.c **** 
  32:openstack/02a-MAClow/adaptive_sync.c **** /**
  33:openstack/02a-MAClow/adaptive_sync.c **** \brief initial this module
  34:openstack/02a-MAClow/adaptive_sync.c **** */
  35:openstack/02a-MAClow/adaptive_sync.c **** void adaptive_sync_init() {
  74              		.loc 1 35 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0000 80B5     		push	{r7, lr}
  79              	.LCFI0:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0002 00AF     		add	r7, sp, #0
  84              	.LCFI1:
  85              		.cfi_def_cfa_register 7
  36:openstack/02a-MAClow/adaptive_sync.c ****    // reset local variables
  37:openstack/02a-MAClow/adaptive_sync.c ****    memset(&adaptive_sync_vars,0x00,sizeof(adaptive_sync_vars_t));
  86              		.loc 1 37 0
  87 0004 40F20000 		movw	r0, #:lower16:adaptive_sync_vars
  88 0008 C0F20000 		movt	r0, #:upper16:adaptive_sync_vars
  89 000c 4FF00001 		mov	r1, #0
  90 0010 4FF02C02 		mov	r2, #44
  91 0014 FFF7FEFF 		bl	memset
  38:openstack/02a-MAClow/adaptive_sync.c ****    
  39:openstack/02a-MAClow/adaptive_sync.c ****    // default local variables
  40:openstack/02a-MAClow/adaptive_sync.c ****    adaptive_sync_vars.clockState              = S_NONE;
  92              		.loc 1 40 0
  93 0018 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
  94 001c C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
  95 0020 4FF00002 		mov	r2, #0
  96 0024 1A70     		strb	r2, [r3, #0]
  41:openstack/02a-MAClow/adaptive_sync.c ****    adaptive_sync_vars.sumOfTC                 = 0;
  97              		.loc 1 41 0
  98 0026 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
  99 002a C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 100 002e 4FF00002 		mov	r2, #0
 101 0032 DA84     		strh	r2, [r3, #38]	@ movhi
  42:openstack/02a-MAClow/adaptive_sync.c ****    adaptive_sync_vars.compensateThreshold     = BASIC_COMPENSATION_THRESHOLD;
 102              		.loc 1 42 0
 103 0034 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 104 0038 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 105 003c 4FF03A02 		mov	r2, #58
 106 0040 1A85     		strh	r2, [r3, #40]	@ movhi
  43:openstack/02a-MAClow/adaptive_sync.c ****    adaptive_sync_vars.driftChanged            = FALSE;
 107              		.loc 1 43 0
 108 0042 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 109 0046 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 110 004a 4FF00002 		mov	r2, #0
 111 004e 83F82A20 		strb	r2, [r3, #42]
  44:openstack/02a-MAClow/adaptive_sync.c **** } 
 112              		.loc 1 44 0
 113 0052 80BD     		pop	{r7, pc}
 114              		.cfi_endproc
 115              	.LFE0:
 117              		.align	2
 118              		.global	adaptive_sync_indicateTimeCorrection
 119              		.thumb
 120              		.thumb_func
 122              	adaptive_sync_indicateTimeCorrection:
 123              	.LFB1:
  45:openstack/02a-MAClow/adaptive_sync.c **** 
  46:openstack/02a-MAClow/adaptive_sync.c **** /**
  47:openstack/02a-MAClow/adaptive_sync.c **** \brief Calculate how many slots have elapsed since last synchronization.
  48:openstack/02a-MAClow/adaptive_sync.c **** 
  49:openstack/02a-MAClow/adaptive_sync.c **** \param[in] timeCorrection    The time correction being applied.
  50:openstack/02a-MAClow/adaptive_sync.c **** \param[in] timesource        The address of the neighbor with which I just
  51:openstack/02a-MAClow/adaptive_sync.c ****    communicated, which triggered a time correction.
  52:openstack/02a-MAClow/adaptive_sync.c **** */
  53:openstack/02a-MAClow/adaptive_sync.c **** void adaptive_sync_indicateTimeCorrection(int16_t timeCorrection, open_addr_t timesource){
 124              		.loc 1 53 0
 125              		.cfi_startproc
 126              		@ args = 24, pretend = 16, frame = 16
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128 0054 84B0     		sub	sp, sp, #16
 129              	.LCFI2:
 130              		.cfi_def_cfa_offset 16
 131 0056 B0B5     		push	{r4, r5, r7, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 32
 134              		.cfi_offset 4, -32
 135              		.cfi_offset 5, -28
 136              		.cfi_offset 7, -24
 137              		.cfi_offset 14, -20
 138 0058 84B0     		sub	sp, sp, #16
 139              	.LCFI4:
 140              		.cfi_def_cfa_offset 48
 141 005a 00AF     		add	r7, sp, #0
 142              	.LCFI5:
 143              		.cfi_def_cfa_register 7
 144 005c 0446     		mov	r4, r0
 145 005e 07F12400 		add	r0, r7, #36
 146 0062 80E80E00 		stmia	r0, {r1, r2, r3}
 147 0066 2346     		mov	r3, r4	@ movhi
 148 0068 FB80     		strh	r3, [r7, #6]	@ movhi
  54:openstack/02a-MAClow/adaptive_sync.c ****    uint8_t array[5];
  55:openstack/02a-MAClow/adaptive_sync.c ****    
  56:openstack/02a-MAClow/adaptive_sync.c ****    // stop calculating compensation period when compensateThreshold exceeds KATIMEOUT and drift is 
  57:openstack/02a-MAClow/adaptive_sync.c ****    if(
  58:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensateThreshold  > MAXKAPERIOD &&
 149              		.loc 1 58 0
 150 006a 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 151 006e C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 152 0072 1B8D     		ldrh	r3, [r3, #40]
  57:openstack/02a-MAClow/adaptive_sync.c ****    if(
 153              		.loc 1 57 0
 154 0074 B3F5FA6F 		cmp	r3, #2000
 155 0078 12D9     		bls	.L3
  59:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.driftChanged        == FALSE
 156              		.loc 1 59 0
 157 007a 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 158 007e C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 159 0082 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 160 0086 83F00103 		eor	r3, r3, #1
 161 008a DBB2     		uxtb	r3, r3
  58:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensateThreshold  > MAXKAPERIOD &&
 162              		.loc 1 58 0
 163 008c 002B     		cmp	r3, #0
 164 008e 07D0     		beq	.L3
  60:openstack/02a-MAClow/adaptive_sync.c ****       ) {
  61:openstack/02a-MAClow/adaptive_sync.c ****       if(timeCorrection > LIMITLARGETIMECORRECTION) {
 165              		.loc 1 61 0
 166 0090 B7F90630 		ldrsh	r3, [r7, #6]
 167 0094 052B     		cmp	r3, #5
 168 0096 40F3F280 		ble	.L2
  62:openstack/02a-MAClow/adaptive_sync.c ****          //once I get a large time correction, it means previous calcluated drift is not accurate y
  63:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_driftChanged();
 169              		.loc 1 63 0
 170 009a FFF7FEFF 		bl	adaptive_sync_driftChanged
 171 009e EEE0     		b	.L2
 172              	.L3:
  64:openstack/02a-MAClow/adaptive_sync.c ****       }
  65:openstack/02a-MAClow/adaptive_sync.c ****       return;
  66:openstack/02a-MAClow/adaptive_sync.c ****    }
  67:openstack/02a-MAClow/adaptive_sync.c ****    
  68:openstack/02a-MAClow/adaptive_sync.c ****    // check whether I am synchronized and also check whether it's the same neighbor synchronized to
  69:openstack/02a-MAClow/adaptive_sync.c ****    if(
  70:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.driftChanged == FALSE &&
 173              		.loc 1 70 0
 174 00a0 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 175 00a4 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 176 00a8 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 177 00ac 83F00103 		eor	r3, r3, #1
 178 00b0 DBB2     		uxtb	r3, r3
  69:openstack/02a-MAClow/adaptive_sync.c ****    if(
 179              		.loc 1 69 0
 180 00b2 002B     		cmp	r3, #0
 181 00b4 78D0     		beq	.L5
  71:openstack/02a-MAClow/adaptive_sync.c ****          ieee154e_isSynch()                       &&
 182              		.loc 1 71 0
 183 00b6 FFF7FEFF 		bl	ieee154e_isSynch
 184 00ba 0346     		mov	r3, r0
  70:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.driftChanged == FALSE &&
 185              		.loc 1 70 0
 186 00bc 002B     		cmp	r3, #0
 187 00be 73D0     		beq	.L5
  72:openstack/02a-MAClow/adaptive_sync.c ****          packetfunctions_sameAddress(&timesource, &(adaptive_sync_vars.compensationInfo_vars.neighb
 188              		.loc 1 72 0
 189 00c0 07F12403 		add	r3, r7, #36
 190 00c4 1846     		mov	r0, r3
 191 00c6 7149     		ldr	r1, .L10
 192 00c8 FFF7FEFF 		bl	packetfunctions_sameAddress
 193 00cc 0346     		mov	r3, r0
  71:openstack/02a-MAClow/adaptive_sync.c ****          ieee154e_isSynch()                       &&
 194              		.loc 1 71 0
 195 00ce 002B     		cmp	r3, #0
 196 00d0 6AD0     		beq	.L5
  73:openstack/02a-MAClow/adaptive_sync.c ****       ) {
  74:openstack/02a-MAClow/adaptive_sync.c ****          // only calcluate when asnDiff > compensateThresholdThreshold. (this is used for guarantee
  75:openstack/02a-MAClow/adaptive_sync.c ****          if(ieee154e_asnDiff(&adaptive_sync_vars.oldASN) > adaptive_sync_vars.compensateThreshold) 
 197              		.loc 1 75 0
 198 00d2 6F48     		ldr	r0, .L10+4
 199 00d4 FFF7FEFF 		bl	ieee154e_asnDiff
 200 00d8 0246     		mov	r2, r0
 201 00da 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 202 00de C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 203 00e2 1B8D     		ldrh	r3, [r3, #40]
 204 00e4 9A42     		cmp	r2, r3
 205 00e6 4FD9     		bls	.L6
  76:openstack/02a-MAClow/adaptive_sync.c ****             // calculate compensation interval
  77:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_calculateCompensatedSlots(timeCorrection);
 206              		.loc 1 77 0
 207 00e8 B7F90630 		ldrsh	r3, [r7, #6]
 208 00ec 1846     		mov	r0, r3
 209 00ee FFF7FEFF 		bl	adaptive_sync_calculateCompensatedSlots
  78:openstack/02a-MAClow/adaptive_sync.c ****             // reset compensationtTicks and sumOfTC after calculation
  79:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_vars.compensateTicks             = 0;
 210              		.loc 1 79 0
 211 00f2 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 212 00f6 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 213 00fa 4FF00002 		mov	r2, #0
 214 00fe 5A81     		strh	r2, [r3, #10]	@ movhi
  80:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_vars.sumOfTC                     = 0;
 215              		.loc 1 80 0
 216 0100 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 217 0104 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 218 0108 4FF00002 		mov	r2, #0
 219 010c DA84     		strh	r2, [r3, #38]	@ movhi
  81:openstack/02a-MAClow/adaptive_sync.c ****             // update threshold
  82:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_vars.compensateThreshold        *= 2;
 220              		.loc 1 82 0
 221 010e 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 222 0112 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 223 0116 1B8D     		ldrh	r3, [r3, #40]
 224 0118 4FEA4303 		lsl	r3, r3, #1
 225 011c 9AB2     		uxth	r2, r3
 226 011e 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 227 0122 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 228 0126 1A85     		strh	r2, [r3, #40]	@ movhi
  83:openstack/02a-MAClow/adaptive_sync.c ****             sixtop_setKaPeriod(adaptive_sync_vars.compensateThreshold);
 229              		.loc 1 83 0
 230 0128 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 231 012c C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 232 0130 1B8D     		ldrh	r3, [r3, #40]
 233 0132 1846     		mov	r0, r3
 234 0134 FFF7FEFF 		bl	sixtop_setKaPeriod
  84:openstack/02a-MAClow/adaptive_sync.c ****             // update oldASN
  85:openstack/02a-MAClow/adaptive_sync.c ****             ieee154e_getAsn(array);
 235              		.loc 1 85 0
 236 0138 07F10803 		add	r3, r7, #8
 237 013c 1846     		mov	r0, r3
 238 013e FFF7FEFF 		bl	ieee154e_getAsn
  86:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_vars.oldASN.bytes0and1           = ((uint16_t) array[1] << 8) | ((uint16_
 239              		.loc 1 86 0
 240 0142 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 241 0144 4FEA0323 		lsl	r3, r3, #8
 242 0148 9AB2     		uxth	r2, r3
 243 014a 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 244 014c 1343     		orrs	r3, r3, r2
 245 014e 9BB2     		uxth	r3, r3
 246 0150 9AB2     		uxth	r2, r3
 247 0152 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 248 0156 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 249 015a A3F80F20 		strh	r2, [r3, #15]	@ unaligned
  87:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_vars.oldASN.bytes2and3           = ((uint16_t) array[3] << 8) | ((uint16_
 250              		.loc 1 87 0
 251 015e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 252 0160 4FEA0323 		lsl	r3, r3, #8
 253 0164 9AB2     		uxth	r2, r3
 254 0166 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 255 0168 1343     		orrs	r3, r3, r2
 256 016a 9BB2     		uxth	r3, r3
 257 016c 9AB2     		uxth	r2, r3
 258 016e 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 259 0172 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 260 0176 A3F80D20 		strh	r2, [r3, #13]	@ unaligned
  88:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_vars.oldASN.byte4                = array[4]; 
 261              		.loc 1 88 0
 262 017a 3A7B     		ldrb	r2, [r7, #12]	@ zero_extendqisi2
 263 017c 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 264 0180 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 265 0184 1A73     		strb	r2, [r3, #12]
  75:openstack/02a-MAClow/adaptive_sync.c ****          if(ieee154e_asnDiff(&adaptive_sync_vars.oldASN) > adaptive_sync_vars.compensateThreshold) 
 266              		.loc 1 75 0
 267 0186 7AE0     		b	.L2
 268              	.L6:
  89:openstack/02a-MAClow/adaptive_sync.c ****          } else {
  90:openstack/02a-MAClow/adaptive_sync.c ****             // record the timeCorrection, if not calculate.
  91:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_vars.sumOfTC                    += timeCorrection;
 269              		.loc 1 91 0
 270 0188 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 271 018c C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 272 0190 DB8C     		ldrh	r3, [r3, #38]
 273 0192 9AB2     		uxth	r2, r3
 274 0194 FB88     		ldrh	r3, [r7, #6]
 275 0196 D318     		adds	r3, r2, r3
 276 0198 9BB2     		uxth	r3, r3
 277 019a 9AB2     		uxth	r2, r3
 278 019c 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 279 01a0 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 280 01a4 DA84     		strh	r2, [r3, #38]	@ movhi
  75:openstack/02a-MAClow/adaptive_sync.c ****          if(ieee154e_asnDiff(&adaptive_sync_vars.oldASN) > adaptive_sync_vars.compensateThreshold) 
 281              		.loc 1 75 0
 282 01a6 6AE0     		b	.L2
 283              	.L5:
  92:openstack/02a-MAClow/adaptive_sync.c ****          }
  93:openstack/02a-MAClow/adaptive_sync.c ****    } else {
  94:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.compensateThreshold               = BASIC_COMPENSATION_THRESHOLD;
 284              		.loc 1 94 0
 285 01a8 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 286 01ac C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 287 01b0 4FF03A02 		mov	r2, #58
 288 01b4 1A85     		strh	r2, [r3, #40]	@ movhi
  95:openstack/02a-MAClow/adaptive_sync.c ****       sixtop_setKaPeriod(adaptive_sync_vars.compensateThreshold);
 289              		.loc 1 95 0
 290 01b6 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 291 01ba C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 292 01be 1B8D     		ldrh	r3, [r3, #40]
 293 01c0 1846     		mov	r0, r3
 294 01c2 FFF7FEFF 		bl	sixtop_setKaPeriod
  96:openstack/02a-MAClow/adaptive_sync.c ****       
  97:openstack/02a-MAClow/adaptive_sync.c ****       // when I joined the network, or changed my time parent, reset adaptive_sync relative variabl
  98:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.clockState                        = S_NONE;
 295              		.loc 1 98 0
 296 01c6 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 297 01ca C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 298 01ce 4FF00002 		mov	r2, #0
 299 01d2 1A70     		strb	r2, [r3, #0]
  99:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.elapsedSlots                      = 0;
 300              		.loc 1 99 0
 301 01d4 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 302 01d8 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 303 01dc 4FF00002 		mov	r2, #0
 304 01e0 5A60     		str	r2, [r3, #4]
 100:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.compensationTimeout               = 0;
 305              		.loc 1 100 0
 306 01e2 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 307 01e6 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 308 01ea 4FF00002 		mov	r2, #0
 309 01ee 1A81     		strh	r2, [r3, #8]	@ movhi
 101:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.compensateTicks                   = 0;
 310              		.loc 1 101 0
 311 01f0 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 312 01f4 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 313 01f8 4FF00002 		mov	r2, #0
 314 01fc 5A81     		strh	r2, [r3, #10]	@ movhi
 102:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.sumOfTC                           = 0;
 315              		.loc 1 102 0
 316 01fe 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 317 0202 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 318 0206 4FF00002 		mov	r2, #0
 319 020a DA84     		strh	r2, [r3, #38]	@ movhi
 103:openstack/02a-MAClow/adaptive_sync.c ****       
 104:openstack/02a-MAClow/adaptive_sync.c ****       // update oldASN
 105:openstack/02a-MAClow/adaptive_sync.c ****       ieee154e_getAsn(array);
 320              		.loc 1 105 0
 321 020c 07F10803 		add	r3, r7, #8
 322 0210 1846     		mov	r0, r3
 323 0212 FFF7FEFF 		bl	ieee154e_getAsn
 106:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.oldASN.bytes0and1                 = ((uint16_t) array[1] << 8) | ((uint16_
 324              		.loc 1 106 0
 325 0216 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 326 0218 4FEA0323 		lsl	r3, r3, #8
 327 021c 9AB2     		uxth	r2, r3
 328 021e 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 329 0220 1343     		orrs	r3, r3, r2
 330 0222 9BB2     		uxth	r3, r3
 331 0224 9AB2     		uxth	r2, r3
 332 0226 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 333 022a C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 334 022e A3F80F20 		strh	r2, [r3, #15]	@ unaligned
 107:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.oldASN.bytes2and3                 = ((uint16_t) array[3] << 8) | ((uint16_
 335              		.loc 1 107 0
 336 0232 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 337 0234 4FEA0323 		lsl	r3, r3, #8
 338 0238 9AB2     		uxth	r2, r3
 339 023a BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 340 023c 1343     		orrs	r3, r3, r2
 341 023e 9BB2     		uxth	r3, r3
 342 0240 9AB2     		uxth	r2, r3
 343 0242 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 344 0246 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 345 024a A3F80D20 		strh	r2, [r3, #13]	@ unaligned
 108:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.oldASN.byte4                      = array[4]; 
 346              		.loc 1 108 0
 347 024e 3A7B     		ldrb	r2, [r7, #12]	@ zero_extendqisi2
 348 0250 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 349 0254 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 350 0258 1A73     		strb	r2, [r3, #12]
 109:openstack/02a-MAClow/adaptive_sync.c ****       
 110:openstack/02a-MAClow/adaptive_sync.c ****       // record this neighbor as my time source
 111:openstack/02a-MAClow/adaptive_sync.c ****       memcpy(&(adaptive_sync_vars.compensationInfo_vars.neighborID), &timesource, sizeof(open_addr_
 351              		.loc 1 111 0
 352 025a 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 353 025e C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 354 0262 03F11203 		add	r3, r3, #18
 355 0266 07F12402 		add	r2, r7, #36
 356 026a 1568     		ldr	r5, [r2, #0]	@ unaligned
 357 026c 5468     		ldr	r4, [r2, #4]	@ unaligned
 358 026e 9068     		ldr	r0, [r2, #8]	@ unaligned
 359 0270 D168     		ldr	r1, [r2, #12]	@ unaligned
 360 0272 1D60     		str	r5, [r3, #0]	@ unaligned
 361 0274 5C60     		str	r4, [r3, #4]	@ unaligned
 362 0276 9860     		str	r0, [r3, #8]	@ unaligned
 363 0278 D960     		str	r1, [r3, #12]	@ unaligned
 364 027a 127C     		ldrb	r2, [r2, #16]
 365 027c 1A74     		strb	r2, [r3, #16]
 366              	.L2:
 112:openstack/02a-MAClow/adaptive_sync.c ****    }
 113:openstack/02a-MAClow/adaptive_sync.c **** }
 367              		.loc 1 113 0
 368 027e 07F11007 		add	r7, r7, #16
 369 0282 BD46     		mov	sp, r7
 370 0284 BDE8B040 		pop	{r4, r5, r7, lr}
 371 0288 04B0     		add	sp, sp, #16
 372 028a 7047     		bx	lr
 373              	.L11:
 374              		.align	2
 375              	.L10:
 376 028c 12000000 		.word	adaptive_sync_vars+18
 377 0290 0C000000 		.word	adaptive_sync_vars+12
 378              		.cfi_endproc
 379              	.LFE1:
 381              		.align	2
 382              		.global	adaptive_sync_calculateCompensatedSlots
 383              		.thumb
 384              		.thumb_func
 386              	adaptive_sync_calculateCompensatedSlots:
 387              	.LFB2:
 114:openstack/02a-MAClow/adaptive_sync.c **** 
 115:openstack/02a-MAClow/adaptive_sync.c **** /**
 116:openstack/02a-MAClow/adaptive_sync.c **** \brief Calculate the compensation interval, in number of slots.
 117:openstack/02a-MAClow/adaptive_sync.c **** 
 118:openstack/02a-MAClow/adaptive_sync.c **** \param[in] timeCorrection time to be corrected
 119:openstack/02a-MAClow/adaptive_sync.c **** 
 120:openstack/02a-MAClow/adaptive_sync.c **** \returns compensationSlots the number of slots. 
 121:openstack/02a-MAClow/adaptive_sync.c **** */
 122:openstack/02a-MAClow/adaptive_sync.c **** void adaptive_sync_calculateCompensatedSlots(int16_t timeCorrection) {
 388              		.loc 1 122 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 16
 391              		@ frame_needed = 1, uses_anonymous_args = 0
 392 0294 80B5     		push	{r7, lr}
 393              	.LCFI6:
 394              		.cfi_def_cfa_offset 8
 395              		.cfi_offset 7, -8
 396              		.cfi_offset 14, -4
 397 0296 84B0     		sub	sp, sp, #16
 398              	.LCFI7:
 399              		.cfi_def_cfa_offset 24
 400 0298 00AF     		add	r7, sp, #0
 401              	.LCFI8:
 402              		.cfi_def_cfa_register 7
 403 029a 0346     		mov	r3, r0
 404 029c FB80     		strh	r3, [r7, #6]	@ movhi
 123:openstack/02a-MAClow/adaptive_sync.c ****    bool     isFirstSync;              // is this the first sync after joining network?
 124:openstack/02a-MAClow/adaptive_sync.c ****    uint16_t totalTimeCorrectionTicks; // how much error in ticks since last synchronization.
 125:openstack/02a-MAClow/adaptive_sync.c ****    
 126:openstack/02a-MAClow/adaptive_sync.c ****    if(adaptive_sync_vars.clockState == S_NONE) {
 405              		.loc 1 126 0
 406 029e 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 407 02a2 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 408 02a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 409 02a8 002B     		cmp	r3, #0
 410 02aa 03D1     		bne	.L13
 127:openstack/02a-MAClow/adaptive_sync.c ****       isFirstSync = TRUE;
 411              		.loc 1 127 0
 412 02ac 4FF00103 		mov	r3, #1
 413 02b0 FB73     		strb	r3, [r7, #15]
 414 02b2 02E0     		b	.L14
 415              	.L13:
 128:openstack/02a-MAClow/adaptive_sync.c ****    } else {
 129:openstack/02a-MAClow/adaptive_sync.c ****       isFirstSync = FALSE;
 416              		.loc 1 129 0
 417 02b4 4FF00003 		mov	r3, #0
 418 02b8 FB73     		strb	r3, [r7, #15]
 419              	.L14:
 130:openstack/02a-MAClow/adaptive_sync.c ****    }
 131:openstack/02a-MAClow/adaptive_sync.c ****    adaptive_sync_vars.elapsedSlots = ieee154e_asnDiff(&adaptive_sync_vars.oldASN);
 420              		.loc 1 131 0
 421 02ba 5B48     		ldr	r0, .L21
 422 02bc FFF7FEFF 		bl	ieee154e_asnDiff
 423 02c0 0246     		mov	r2, r0
 424 02c2 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 425 02c6 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 426 02ca 5A60     		str	r2, [r3, #4]
 132:openstack/02a-MAClow/adaptive_sync.c ****    
 133:openstack/02a-MAClow/adaptive_sync.c ****    if(isFirstSync) {
 427              		.loc 1 133 0
 428 02cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 429 02ce 002B     		cmp	r3, #0
 430 02d0 50D0     		beq	.L15
 134:openstack/02a-MAClow/adaptive_sync.c ****       if(timeCorrection > 1) {
 431              		.loc 1 134 0
 432 02d2 B7F90630 		ldrsh	r3, [r7, #6]
 433 02d6 012B     		cmp	r3, #1
 434 02d8 22DD     		ble	.L16
 135:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.clockState = S_FASTER;
 435              		.loc 1 135 0
 436 02da 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 437 02de C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 438 02e2 4FF00102 		mov	r2, #1
 439 02e6 1A70     		strb	r2, [r3, #0]
 136:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensationInfo_vars.compensationSlots       = SYNC_ACCURACY*adaptive_
 440              		.loc 1 136 0
 441 02e8 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 442 02ec C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 443 02f0 5B68     		ldr	r3, [r3, #4]
 444 02f2 9AB2     		uxth	r2, r3
 445 02f4 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 446 02f8 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 447 02fc 9A84     		strh	r2, [r3, #36]	@ movhi
 137:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensationInfo_vars.compensationSlots      /= timeCorrection;
 448              		.loc 1 137 0
 449 02fe 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 450 0302 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 451 0306 9B8C     		ldrh	r3, [r3, #36]
 452 0308 1A46     		mov	r2, r3
 453 030a B7F90630 		ldrsh	r3, [r7, #6]
 454 030e 92FBF3F3 		sdiv	r3, r2, r3
 455 0312 9AB2     		uxth	r2, r3
 456 0314 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 457 0318 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 458 031c 9A84     		strh	r2, [r3, #36]	@ movhi
 459 031e 74E0     		b	.L17
 460              	.L16:
 138:openstack/02a-MAClow/adaptive_sync.c ****       } else {
 139:openstack/02a-MAClow/adaptive_sync.c ****          if(timeCorrection < -1) {
 461              		.loc 1 139 0
 462 0320 B7F90630 		ldrsh	r3, [r7, #6]
 463 0324 B3F1FF3F 		cmp	r3, #-1
 464 0328 6FDA     		bge	.L17
 140:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_vars.clockState = S_SLOWER;
 465              		.loc 1 140 0
 466 032a 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 467 032e C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 468 0332 4FF00202 		mov	r2, #2
 469 0336 1A70     		strb	r2, [r3, #0]
 141:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_vars.compensationInfo_vars.compensationSlots    = SYNC_ACCURACY*adaptive_
 470              		.loc 1 141 0
 471 0338 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 472 033c C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 473 0340 5B68     		ldr	r3, [r3, #4]
 474 0342 9AB2     		uxth	r2, r3
 475 0344 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 476 0348 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 477 034c 9A84     		strh	r2, [r3, #36]	@ movhi
 142:openstack/02a-MAClow/adaptive_sync.c ****             adaptive_sync_vars.compensationInfo_vars.compensationSlots   /= (-timeCorrection);
 478              		.loc 1 142 0
 479 034e 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 480 0352 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 481 0356 9B8C     		ldrh	r3, [r3, #36]
 482 0358 1A46     		mov	r2, r3
 483 035a B7F90630 		ldrsh	r3, [r7, #6]
 484 035e C3F10003 		rsb	r3, r3, #0
 485 0362 92FBF3F3 		sdiv	r3, r2, r3
 486 0366 9AB2     		uxth	r2, r3
 487 0368 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 488 036c C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 489 0370 9A84     		strh	r2, [r3, #36]	@ movhi
 490 0372 4AE0     		b	.L17
 491              	.L15:
 143:openstack/02a-MAClow/adaptive_sync.c ****          } else {
 144:openstack/02a-MAClow/adaptive_sync.c ****             //timeCorrection = {-1,1}, it's not accurate when timeCorrection belongs to {-1,1}
 145:openstack/02a-MAClow/adaptive_sync.c ****             //nothing is needed to do with this case.
 146:openstack/02a-MAClow/adaptive_sync.c ****          }
 147:openstack/02a-MAClow/adaptive_sync.c ****       }
 148:openstack/02a-MAClow/adaptive_sync.c ****    } else {
 149:openstack/02a-MAClow/adaptive_sync.c ****       if(adaptive_sync_vars.clockState == S_SLOWER) {
 492              		.loc 1 149 0
 493 0374 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 494 0378 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 495 037c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 496 037e 022B     		cmp	r3, #2
 497 0380 12D1     		bne	.L18
 150:openstack/02a-MAClow/adaptive_sync.c ****          totalTimeCorrectionTicks                                    = adaptive_sync_vars.compensat
 498              		.loc 1 150 0
 499 0382 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 500 0386 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 501 038a 5B89     		ldrh	r3, [r3, #10]	@ movhi
 502 038c BB81     		strh	r3, [r7, #12]	@ movhi
 151:openstack/02a-MAClow/adaptive_sync.c ****          totalTimeCorrectionTicks                                   -= timeCorrection+adaptive_sync
 503              		.loc 1 151 0
 504 038e 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 505 0392 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 506 0396 DB8C     		ldrh	r3, [r3, #38]
 507 0398 9AB2     		uxth	r2, r3
 508 039a FB88     		ldrh	r3, [r7, #6]
 509 039c D318     		adds	r3, r2, r3
 510 039e 9BB2     		uxth	r3, r3
 511 03a0 BA89     		ldrh	r2, [r7, #12]	@ movhi
 512 03a2 D31A     		subs	r3, r2, r3
 513 03a4 BB81     		strh	r3, [r7, #12]	@ movhi
 514 03a6 11E0     		b	.L19
 515              	.L18:
 152:openstack/02a-MAClow/adaptive_sync.c ****       } else {
 153:openstack/02a-MAClow/adaptive_sync.c ****          totalTimeCorrectionTicks                                    = adaptive_sync_vars.compensat
 516              		.loc 1 153 0
 517 03a8 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 518 03ac C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 519 03b0 5B89     		ldrh	r3, [r3, #10]	@ movhi
 520 03b2 BB81     		strh	r3, [r7, #12]	@ movhi
 154:openstack/02a-MAClow/adaptive_sync.c ****          totalTimeCorrectionTicks                                   += timeCorrection+adaptive_sync
 521              		.loc 1 154 0
 522 03b4 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 523 03b8 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 524 03bc DB8C     		ldrh	r3, [r3, #38]
 525 03be 9AB2     		uxth	r2, r3
 526 03c0 FB88     		ldrh	r3, [r7, #6]
 527 03c2 D318     		adds	r3, r2, r3
 528 03c4 9AB2     		uxth	r2, r3
 529 03c6 BB89     		ldrh	r3, [r7, #12]	@ movhi
 530 03c8 D318     		adds	r3, r2, r3
 531 03ca BB81     		strh	r3, [r7, #12]	@ movhi
 532              	.L19:
 155:openstack/02a-MAClow/adaptive_sync.c ****       }
 156:openstack/02a-MAClow/adaptive_sync.c ****       if(totalTimeCorrectionTicks == 0) {
 533              		.loc 1 156 0
 534 03cc BB89     		ldrh	r3, [r7, #12]
 535 03ce 002B     		cmp	r3, #0
 536 03d0 02D1     		bne	.L20
 157:openstack/02a-MAClow/adaptive_sync.c ****          // totalTimeCorrectionTicks should be always positive if drift of clock is constant. if to
 158:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_driftChanged();
 537              		.loc 1 158 0
 538 03d2 FFF7FEFF 		bl	adaptive_sync_driftChanged
 539 03d6 18E0     		b	.L17
 540              	.L20:
 159:openstack/02a-MAClow/adaptive_sync.c ****       } else {
 160:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensationInfo_vars.compensationSlots  = SYNC_ACCURACY*adaptive_sync_
 541              		.loc 1 160 0
 542 03d8 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 543 03dc C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 544 03e0 5B68     		ldr	r3, [r3, #4]
 545 03e2 9AB2     		uxth	r2, r3
 546 03e4 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 547 03e8 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 548 03ec 9A84     		strh	r2, [r3, #36]	@ movhi
 161:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensationInfo_vars.compensationSlots /= totalTimeCorrectionTicks;
 549              		.loc 1 161 0
 550 03ee 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 551 03f2 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 552 03f6 9A8C     		ldrh	r2, [r3, #36]
 553 03f8 BB89     		ldrh	r3, [r7, #12]
 554 03fa B2FBF3F3 		udiv	r3, r2, r3
 555 03fe 9AB2     		uxth	r2, r3
 556 0400 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 557 0404 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 558 0408 9A84     		strh	r2, [r3, #36]	@ movhi
 559              	.L17:
 162:openstack/02a-MAClow/adaptive_sync.c ****       }
 163:openstack/02a-MAClow/adaptive_sync.c ****    }
 164:openstack/02a-MAClow/adaptive_sync.c ****    
 165:openstack/02a-MAClow/adaptive_sync.c ****    adaptive_sync_vars.compensationTimeout = adaptive_sync_vars.compensationInfo_vars.compensationSl
 560              		.loc 1 165 0
 561 040a 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 562 040e C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 563 0412 9A8C     		ldrh	r2, [r3, #36]
 564 0414 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 565 0418 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 566 041c 1A81     		strh	r2, [r3, #8]	@ movhi
 166:openstack/02a-MAClow/adaptive_sync.c **** }
 567              		.loc 1 166 0
 568 041e 07F11007 		add	r7, r7, #16
 569 0422 BD46     		mov	sp, r7
 570 0424 80BD     		pop	{r7, pc}
 571              	.L22:
 572 0426 00BF     		.align	2
 573              	.L21:
 574 0428 0C000000 		.word	adaptive_sync_vars+12
 575              		.cfi_endproc
 576              	.LFE2:
 578              		.align	2
 579              		.global	adaptive_sync_countCompensationTimeout
 580              		.thumb
 581              		.thumb_func
 583              	adaptive_sync_countCompensationTimeout:
 584              	.LFB3:
 167:openstack/02a-MAClow/adaptive_sync.c **** 
 168:openstack/02a-MAClow/adaptive_sync.c **** /**
 169:openstack/02a-MAClow/adaptive_sync.c **** \brief update compensationTimeout at the beginning of each slot and adjust current slot length when
 170:openstack/02a-MAClow/adaptive_sync.c **** 
 171:openstack/02a-MAClow/adaptive_sync.c **** Once compensationTimeout == 0, extend or shorten current slot length for one tick.
 172:openstack/02a-MAClow/adaptive_sync.c **** */
 173:openstack/02a-MAClow/adaptive_sync.c **** void adaptive_sync_countCompensationTimeout() {
 585              		.loc 1 173 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 8
 588              		@ frame_needed = 1, uses_anonymous_args = 0
 589 042c 80B5     		push	{r7, lr}
 590              	.LCFI9:
 591              		.cfi_def_cfa_offset 8
 592              		.cfi_offset 7, -8
 593              		.cfi_offset 14, -4
 594 042e 82B0     		sub	sp, sp, #8
 595              	.LCFI10:
 596              		.cfi_def_cfa_offset 16
 597 0430 00AF     		add	r7, sp, #0
 598              	.LCFI11:
 599              		.cfi_def_cfa_register 7
 174:openstack/02a-MAClow/adaptive_sync.c ****    uint16_t newSlotDuration;
 175:openstack/02a-MAClow/adaptive_sync.c ****    
 176:openstack/02a-MAClow/adaptive_sync.c ****    newSlotDuration  = TsSlotDuration;
 600              		.loc 1 176 0
 601 0432 4FF4F673 		mov	r3, #492
 602 0436 FB80     		strh	r3, [r7, #6]	@ movhi
 177:openstack/02a-MAClow/adaptive_sync.c ****    
 178:openstack/02a-MAClow/adaptive_sync.c ****    // if clockState is not set yet, don't compensate.
 179:openstack/02a-MAClow/adaptive_sync.c ****    if (adaptive_sync_vars.clockState == S_NONE) {
 603              		.loc 1 179 0
 604 0438 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 605 043c C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 606 0440 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 607 0442 002B     		cmp	r3, #0
 608 0444 53D0     		beq	.L29
 609              	.L24:
 180:openstack/02a-MAClow/adaptive_sync.c ****       return;
 181:openstack/02a-MAClow/adaptive_sync.c ****    }
 182:openstack/02a-MAClow/adaptive_sync.c ****    
 183:openstack/02a-MAClow/adaptive_sync.c ****    if (adaptive_sync_vars.compensationTimeout == 0) {
 610              		.loc 1 183 0
 611 0446 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 612 044a C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 613 044e 1B89     		ldrh	r3, [r3, #8]
 614 0450 002B     		cmp	r3, #0
 615 0452 4ED0     		beq	.L30
 616              	.L26:
 184:openstack/02a-MAClow/adaptive_sync.c ****       return; // should not happen
 185:openstack/02a-MAClow/adaptive_sync.c ****    }
 186:openstack/02a-MAClow/adaptive_sync.c ****    
 187:openstack/02a-MAClow/adaptive_sync.c ****    adaptive_sync_vars.compensationTimeout--;
 617              		.loc 1 187 0
 618 0454 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 619 0458 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 620 045c 1B89     		ldrh	r3, [r3, #8]
 621 045e 03F1FF33 		add	r3, r3, #-1
 622 0462 9AB2     		uxth	r2, r3
 623 0464 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 624 0468 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 625 046c 1A81     		strh	r2, [r3, #8]	@ movhi
 188:openstack/02a-MAClow/adaptive_sync.c ****    
 189:openstack/02a-MAClow/adaptive_sync.c ****    // when compensationTimeout, adjust current slot length
 190:openstack/02a-MAClow/adaptive_sync.c ****    if(adaptive_sync_vars.compensationTimeout == 0) {
 626              		.loc 1 190 0
 627 046e 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 628 0472 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 629 0476 1B89     		ldrh	r3, [r3, #8]
 630 0478 002B     		cmp	r3, #0
 631 047a 3BD1     		bne	.L23
 191:openstack/02a-MAClow/adaptive_sync.c ****       if(adaptive_sync_vars.clockState == S_SLOWER) {
 632              		.loc 1 191 0
 633 047c 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 634 0480 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 635 0484 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 636 0486 022B     		cmp	r3, #2
 637 0488 11D1     		bne	.L27
 192:openstack/02a-MAClow/adaptive_sync.c ****          newSlotDuration                    -= SYNC_ACCURACY;
 638              		.loc 1 192 0
 639 048a FB88     		ldrh	r3, [r7, #6]	@ movhi
 640 048c 03F1FF33 		add	r3, r3, #-1
 641 0490 FB80     		strh	r3, [r7, #6]	@ movhi
 193:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensateTicks += SYNC_ACCURACY;
 642              		.loc 1 193 0
 643 0492 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 644 0496 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 645 049a 5B89     		ldrh	r3, [r3, #10]
 646 049c 03F10103 		add	r3, r3, #1
 647 04a0 9AB2     		uxth	r2, r3
 648 04a2 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 649 04a6 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 650 04aa 5A81     		strh	r2, [r3, #10]	@ movhi
 651 04ac 10E0     		b	.L28
 652              	.L27:
 194:openstack/02a-MAClow/adaptive_sync.c ****       } else { // clock is fast
 195:openstack/02a-MAClow/adaptive_sync.c ****          newSlotDuration                    += SYNC_ACCURACY;
 653              		.loc 1 195 0
 654 04ae FB88     		ldrh	r3, [r7, #6]	@ movhi
 655 04b0 03F10103 		add	r3, r3, #1
 656 04b4 FB80     		strh	r3, [r7, #6]	@ movhi
 196:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensateTicks += SYNC_ACCURACY;
 657              		.loc 1 196 0
 658 04b6 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 659 04ba C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 660 04be 5B89     		ldrh	r3, [r3, #10]
 661 04c0 03F10103 		add	r3, r3, #1
 662 04c4 9AB2     		uxth	r2, r3
 663 04c6 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 664 04ca C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 665 04ce 5A81     		strh	r2, [r3, #10]	@ movhi
 666              	.L28:
 197:openstack/02a-MAClow/adaptive_sync.c ****       }
 198:openstack/02a-MAClow/adaptive_sync.c ****       // update current slot duration and reload compensationTimeout
 199:openstack/02a-MAClow/adaptive_sync.c ****       radio_setTimerPeriod(newSlotDuration);
 667              		.loc 1 199 0
 668 04d0 FB88     		ldrh	r3, [r7, #6]
 669 04d2 1846     		mov	r0, r3
 670 04d4 FFF7FEFF 		bl	radio_setTimerPeriod
 200:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.compensationTimeout = adaptive_sync_vars.compensationInfo_vars.compensatio
 671              		.loc 1 200 0
 672 04d8 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 673 04dc C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 674 04e0 9A8C     		ldrh	r2, [r3, #36]
 675 04e2 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 676 04e6 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 677 04ea 1A81     		strh	r2, [r3, #8]	@ movhi
 678 04ec 02E0     		b	.L23
 679              	.L29:
 180:openstack/02a-MAClow/adaptive_sync.c ****       return;
 680              		.loc 1 180 0
 681 04ee 00BF     		nop
 682 04f0 00E0     		b	.L23
 683              	.L30:
 184:openstack/02a-MAClow/adaptive_sync.c ****       return; // should not happen
 684              		.loc 1 184 0
 685 04f2 00BF     		nop
 686              	.L23:
 201:openstack/02a-MAClow/adaptive_sync.c **** #ifdef OPENSIM
 202:openstack/02a-MAClow/adaptive_sync.c ****       debugpins_debug_set();
 203:openstack/02a-MAClow/adaptive_sync.c ****       debugpins_debug_clr();
 204:openstack/02a-MAClow/adaptive_sync.c **** #endif
 205:openstack/02a-MAClow/adaptive_sync.c ****    }
 206:openstack/02a-MAClow/adaptive_sync.c **** }
 687              		.loc 1 206 0
 688 04f4 07F10807 		add	r7, r7, #8
 689 04f8 BD46     		mov	sp, r7
 690 04fa 80BD     		pop	{r7, pc}
 691              		.cfi_endproc
 692              	.LFE3:
 694              		.align	2
 695              		.global	adaptive_sync_countCompensationTimeout_compoundSlots
 696              		.thumb
 697              		.thumb_func
 699              	adaptive_sync_countCompensationTimeout_compoundSlots:
 700              	.LFB4:
 207:openstack/02a-MAClow/adaptive_sync.c **** 
 208:openstack/02a-MAClow/adaptive_sync.c **** /**
 209:openstack/02a-MAClow/adaptive_sync.c **** \brief update compensationTimeout when compound slots are scheduled and adjust the slot when the el
 210:openstack/02a-MAClow/adaptive_sync.c **** 
 211:openstack/02a-MAClow/adaptive_sync.c **** \param[in] compoundSlots how many slots will be elapsed before wakeup next time.
 212:openstack/02a-MAClow/adaptive_sync.c **** */
 213:openstack/02a-MAClow/adaptive_sync.c **** void adaptive_sync_countCompensationTimeout_compoundSlots(uint16_t compoundSlots) {
 701              		.loc 1 213 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 16
 704              		@ frame_needed = 1, uses_anonymous_args = 0
 705 04fc 80B5     		push	{r7, lr}
 706              	.LCFI12:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 7, -8
 709              		.cfi_offset 14, -4
 710 04fe 84B0     		sub	sp, sp, #16
 711              	.LCFI13:
 712              		.cfi_def_cfa_offset 24
 713 0500 00AF     		add	r7, sp, #0
 714              	.LCFI14:
 715              		.cfi_def_cfa_register 7
 716 0502 0346     		mov	r3, r0
 717 0504 FB80     		strh	r3, [r7, #6]	@ movhi
 214:openstack/02a-MAClow/adaptive_sync.c ****    uint16_t counter;
 215:openstack/02a-MAClow/adaptive_sync.c ****    uint8_t  compensateTicks;
 216:openstack/02a-MAClow/adaptive_sync.c ****    uint16_t newSlotDuration;
 217:openstack/02a-MAClow/adaptive_sync.c ****    
 218:openstack/02a-MAClow/adaptive_sync.c ****    newSlotDuration  = TsSlotDuration*(compoundSlots+1);
 718              		.loc 1 218 0
 719 0506 FB88     		ldrh	r3, [r7, #6]
 720 0508 03F10103 		add	r3, r3, #1
 721 050c 9BB2     		uxth	r3, r3
 722 050e 1A46     		mov	r2, r3	@ movhi
 723 0510 4FEA4212 		lsl	r2, r2, #5
 724 0514 D21A     		subs	r2, r2, r3
 725 0516 4FEA8202 		lsl	r2, r2, #2
 726 051a D31A     		subs	r3, r2, r3
 727 051c 4FEA8303 		lsl	r3, r3, #2
 728 0520 7B81     		strh	r3, [r7, #10]	@ movhi
 219:openstack/02a-MAClow/adaptive_sync.c ****    
 220:openstack/02a-MAClow/adaptive_sync.c ****    // if clockState is not set yet, don't compensate.
 221:openstack/02a-MAClow/adaptive_sync.c ****    if(adaptive_sync_vars.clockState == S_NONE) {
 729              		.loc 1 221 0
 730 0522 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 731 0526 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 732 052a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 733 052c 002B     		cmp	r3, #0
 734 052e 6ED0     		beq	.L41
 735              	.L32:
 222:openstack/02a-MAClow/adaptive_sync.c ****       return;
 223:openstack/02a-MAClow/adaptive_sync.c ****    }
 224:openstack/02a-MAClow/adaptive_sync.c ****    
 225:openstack/02a-MAClow/adaptive_sync.c ****    if(adaptive_sync_vars.compensationTimeout == 0) {
 736              		.loc 1 225 0
 737 0530 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 738 0534 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 739 0538 1B89     		ldrh	r3, [r3, #8]
 740 053a 002B     		cmp	r3, #0
 741 053c 69D0     		beq	.L42
 742              	.L34:
 226:openstack/02a-MAClow/adaptive_sync.c ****       return; // should not happen
 227:openstack/02a-MAClow/adaptive_sync.c ****    }
 228:openstack/02a-MAClow/adaptive_sync.c ****    
 229:openstack/02a-MAClow/adaptive_sync.c ****    if(compoundSlots < 1) {
 743              		.loc 1 229 0
 744 053e FB88     		ldrh	r3, [r7, #6]
 745 0540 002B     		cmp	r3, #0
 746 0542 68D0     		beq	.L43
 747              	.L35:
 230:openstack/02a-MAClow/adaptive_sync.c ****       // return, if this is not a compoundSlot
 231:openstack/02a-MAClow/adaptive_sync.c ****       return;
 232:openstack/02a-MAClow/adaptive_sync.c ****    }
 233:openstack/02a-MAClow/adaptive_sync.c ****    
 234:openstack/02a-MAClow/adaptive_sync.c ****    counter          = compoundSlots; 
 748              		.loc 1 234 0
 749 0544 FB88     		ldrh	r3, [r7, #6]	@ movhi
 750 0546 FB81     		strh	r3, [r7, #14]	@ movhi
 235:openstack/02a-MAClow/adaptive_sync.c ****    compensateTicks  = 0;
 751              		.loc 1 235 0
 752 0548 4FF00003 		mov	r3, #0
 753 054c 7B73     		strb	r3, [r7, #13]
 236:openstack/02a-MAClow/adaptive_sync.c ****    while(counter > 0) {
 754              		.loc 1 236 0
 755 054e 25E0     		b	.L36
 756              	.L38:
 237:openstack/02a-MAClow/adaptive_sync.c ****       adaptive_sync_vars.compensationTimeout--;
 757              		.loc 1 237 0
 758 0550 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 759 0554 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 760 0558 1B89     		ldrh	r3, [r3, #8]
 761 055a 03F1FF33 		add	r3, r3, #-1
 762 055e 9AB2     		uxth	r2, r3
 763 0560 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 764 0564 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 765 0568 1A81     		strh	r2, [r3, #8]	@ movhi
 238:openstack/02a-MAClow/adaptive_sync.c ****       if (adaptive_sync_vars.compensationTimeout == 0) {
 766              		.loc 1 238 0
 767 056a 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 768 056e C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 769 0572 1B89     		ldrh	r3, [r3, #8]
 770 0574 002B     		cmp	r3, #0
 771 0576 0DD1     		bne	.L37
 239:openstack/02a-MAClow/adaptive_sync.c ****          compensateTicks += 1;
 772              		.loc 1 239 0
 773 0578 7B7B     		ldrb	r3, [r7, #13]
 774 057a 03F10103 		add	r3, r3, #1
 775 057e 7B73     		strb	r3, [r7, #13]
 240:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensationTimeout = adaptive_sync_vars.compensationInfo_vars.compensa
 776              		.loc 1 240 0
 777 0580 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 778 0584 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 779 0588 9A8C     		ldrh	r2, [r3, #36]
 780 058a 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 781 058e C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 782 0592 1A81     		strh	r2, [r3, #8]	@ movhi
 783              	.L37:
 241:openstack/02a-MAClow/adaptive_sync.c ****       }
 242:openstack/02a-MAClow/adaptive_sync.c ****       counter--;
 784              		.loc 1 242 0
 785 0594 FB89     		ldrh	r3, [r7, #14]	@ movhi
 786 0596 03F1FF33 		add	r3, r3, #-1
 787 059a FB81     		strh	r3, [r7, #14]	@ movhi
 788              	.L36:
 236:openstack/02a-MAClow/adaptive_sync.c ****    while(counter > 0) {
 789              		.loc 1 236 0 discriminator 1
 790 059c FB89     		ldrh	r3, [r7, #14]
 791 059e 002B     		cmp	r3, #0
 792 05a0 D6D1     		bne	.L38
 243:openstack/02a-MAClow/adaptive_sync.c ****    }
 244:openstack/02a-MAClow/adaptive_sync.c ****    
 245:openstack/02a-MAClow/adaptive_sync.c ****    // when compensateTicks > 0, I need to do compensation by adjusting current slot length
 246:openstack/02a-MAClow/adaptive_sync.c ****    if(compensateTicks > 0) {
 793              		.loc 1 246 0
 794 05a2 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 795 05a4 002B     		cmp	r3, #0
 796 05a6 37D0     		beq	.L31
 247:openstack/02a-MAClow/adaptive_sync.c ****       if(adaptive_sync_vars.clockState == S_SLOWER) {
 797              		.loc 1 247 0
 798 05a8 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 799 05ac C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 800 05b0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 801 05b2 022B     		cmp	r3, #2
 802 05b4 13D1     		bne	.L39
 248:openstack/02a-MAClow/adaptive_sync.c ****          newSlotDuration                    -= compensateTicks*SYNC_ACCURACY;
 803              		.loc 1 248 0
 804 05b6 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 805 05b8 9BB2     		uxth	r3, r3
 806 05ba 7A89     		ldrh	r2, [r7, #10]	@ movhi
 807 05bc D31A     		subs	r3, r2, r3
 808 05be 7B81     		strh	r3, [r7, #10]	@ movhi
 249:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensateTicks += compensateTicks*SYNC_ACCURACY;
 809              		.loc 1 249 0
 810 05c0 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 811 05c4 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 812 05c8 5A89     		ldrh	r2, [r3, #10]
 813 05ca 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 814 05cc 9BB2     		uxth	r3, r3
 815 05ce D318     		adds	r3, r2, r3
 816 05d0 9AB2     		uxth	r2, r3
 817 05d2 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 818 05d6 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 819 05da 5A81     		strh	r2, [r3, #10]	@ movhi
 820 05dc 12E0     		b	.L40
 821              	.L39:
 250:openstack/02a-MAClow/adaptive_sync.c ****       } else { // clock is fast
 251:openstack/02a-MAClow/adaptive_sync.c ****          newSlotDuration                    += compensateTicks*SYNC_ACCURACY;
 822              		.loc 1 251 0
 823 05de 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 824 05e0 9AB2     		uxth	r2, r3
 825 05e2 7B89     		ldrh	r3, [r7, #10]	@ movhi
 826 05e4 D318     		adds	r3, r2, r3
 827 05e6 7B81     		strh	r3, [r7, #10]	@ movhi
 252:openstack/02a-MAClow/adaptive_sync.c ****          adaptive_sync_vars.compensateTicks += compensateTicks * SYNC_ACCURACY;
 828              		.loc 1 252 0
 829 05e8 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 830 05ec C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 831 05f0 5A89     		ldrh	r2, [r3, #10]
 832 05f2 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 833 05f4 9BB2     		uxth	r3, r3
 834 05f6 D318     		adds	r3, r2, r3
 835 05f8 9AB2     		uxth	r2, r3
 836 05fa 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 837 05fe C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 838 0602 5A81     		strh	r2, [r3, #10]	@ movhi
 839              	.L40:
 253:openstack/02a-MAClow/adaptive_sync.c ****       }
 254:openstack/02a-MAClow/adaptive_sync.c ****       radio_setTimerPeriod(newSlotDuration);
 840              		.loc 1 254 0
 841 0604 7B89     		ldrh	r3, [r7, #10]
 842 0606 1846     		mov	r0, r3
 843 0608 FFF7FEFF 		bl	radio_setTimerPeriod
 844 060c 04E0     		b	.L31
 845              	.L41:
 222:openstack/02a-MAClow/adaptive_sync.c ****       return;
 846              		.loc 1 222 0
 847 060e 00BF     		nop
 848 0610 02E0     		b	.L31
 849              	.L42:
 226:openstack/02a-MAClow/adaptive_sync.c ****       return; // should not happen
 850              		.loc 1 226 0
 851 0612 00BF     		nop
 852 0614 00E0     		b	.L31
 853              	.L43:
 231:openstack/02a-MAClow/adaptive_sync.c ****       return;
 854              		.loc 1 231 0
 855 0616 00BF     		nop
 856              	.L31:
 255:openstack/02a-MAClow/adaptive_sync.c **** #ifdef OPENSIM
 256:openstack/02a-MAClow/adaptive_sync.c ****       debugpins_debug_set();
 257:openstack/02a-MAClow/adaptive_sync.c ****       debugpins_debug_clr();
 258:openstack/02a-MAClow/adaptive_sync.c **** #endif
 259:openstack/02a-MAClow/adaptive_sync.c ****    }
 260:openstack/02a-MAClow/adaptive_sync.c **** }
 857              		.loc 1 260 0
 858 0618 07F11007 		add	r7, r7, #16
 859 061c BD46     		mov	sp, r7
 860 061e 80BD     		pop	{r7, pc}
 861              		.cfi_endproc
 862              	.LFE4:
 864              		.align	2
 865              		.global	adaptive_sync_driftChanged
 866              		.thumb
 867              		.thumb_func
 869              	adaptive_sync_driftChanged:
 870              	.LFB5:
 261:openstack/02a-MAClow/adaptive_sync.c **** 
 262:openstack/02a-MAClow/adaptive_sync.c **** /**
 263:openstack/02a-MAClow/adaptive_sync.c **** \brief set driftChanged to true.
 264:openstack/02a-MAClow/adaptive_sync.c **** */
 265:openstack/02a-MAClow/adaptive_sync.c **** void adaptive_sync_driftChanged() {
 871              		.loc 1 265 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 1, uses_anonymous_args = 0
 875              		@ link register save eliminated.
 876 0620 80B4     		push	{r7}
 877              	.LCFI15:
 878              		.cfi_def_cfa_offset 4
 879              		.cfi_offset 7, -4
 880 0622 00AF     		add	r7, sp, #0
 881              	.LCFI16:
 882              		.cfi_def_cfa_register 7
 266:openstack/02a-MAClow/adaptive_sync.c **** #ifndef NOADAPTIVESYNC
 267:openstack/02a-MAClow/adaptive_sync.c ****    adaptive_sync_vars.driftChanged = TRUE;
 883              		.loc 1 267 0
 884 0624 40F20003 		movw	r3, #:lower16:adaptive_sync_vars
 885 0628 C0F20003 		movt	r3, #:upper16:adaptive_sync_vars
 886 062c 4FF00102 		mov	r2, #1
 887 0630 83F82A20 		strb	r2, [r3, #42]
 268:openstack/02a-MAClow/adaptive_sync.c **** #endif
 269:openstack/02a-MAClow/adaptive_sync.c **** }
 888              		.loc 1 269 0
 889 0634 BD46     		mov	sp, r7
 890 0636 80BC     		pop	{r7}
 891 0638 7047     		bx	lr
 892              		.cfi_endproc
 893              	.LFE5:
 895              	.Letext0:
 896              		.file 2 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
 897              		.file 3 "inc/opendefs.h"
 898              		.file 4 "openstack/02a-MAClow/adaptive_sync.h"
 899              		.file 5 "bsp/boards/OpenMote-CC2538/board_info.h"
 900              		.file 6 "openstack/03b-IPv6/icmpv6rpl.h"
 901              		.file 7 "openstack/02a-MAClow/IEEE802154Ecsl.h"
DEFINED SYMBOLS
                            *ABS*:00000000 adaptive_sync.c
     /tmp/cc8asjuT.s:19     .rodata:00000000 $d
     /tmp/cc8asjuT.s:22     .rodata:00000000 rreg_uriquery
     /tmp/cc8asjuT.s:27     .rodata:00000008 infoBoardname
     /tmp/cc8asjuT.s:32     .rodata:00000010 infouCName
     /tmp/cc8asjuT.s:37     .rodata:00000018 infoRadioName
     /tmp/cc8asjuT.s:42     .rodata:00000024 infoStackName
     /tmp/cc8asjuT.s:47     .rodata:00000030 all_routers_multicast
                            *COM*:0000002c adaptive_sync_vars
     /tmp/cc8asjuT.s:66     .text:00000000 $t
     /tmp/cc8asjuT.s:71     .text:00000000 adaptive_sync_init
     /tmp/cc8asjuT.s:122    .text:00000054 adaptive_sync_indicateTimeCorrection
     /tmp/cc8asjuT.s:869    .text:00000620 adaptive_sync_driftChanged
     /tmp/cc8asjuT.s:386    .text:00000294 adaptive_sync_calculateCompensatedSlots
     /tmp/cc8asjuT.s:376    .text:0000028c $d
     /tmp/cc8asjuT.s:381    .text:00000294 $t
     /tmp/cc8asjuT.s:574    .text:00000428 $d
     /tmp/cc8asjuT.s:578    .text:0000042c $t
     /tmp/cc8asjuT.s:583    .text:0000042c adaptive_sync_countCompensationTimeout
     /tmp/cc8asjuT.s:699    .text:000004fc adaptive_sync_countCompensationTimeout_compoundSlots
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e96eee74da26538b12ac9582e3798382
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.toolchain_defs.h.2.e4ebbe6e0a48032a9b79077dc42e1ffd
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.string.h.17.f8d12df81104836a3f2a5d589ae830d8
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.board_info.h.21.2f0cbb5ab4c556c54c487f727dca8532
                           .group:00000000 wm4.opendefs.h.19.05852eb648ac65e48c7817e5cbf03346
                           .group:00000000 wm4.opentimers.h.8.044f2d040a134cdb0ddb58adfc2508be
                           .group:00000000 wm4.openserial.h.8.8c63e3800d2936b44b5370ce1aae62b7
                           .group:00000000 wm4.icmpv6rpl.h.2.0ce84dbe8c203c7079b39e7e96c7c01e
                           .group:00000000 wm4.neighbors.h.15.9f35f180a0332d1bc442efb0ec51905c
                           .group:00000000 wm4.schedule.h.2.74f699399ee9cbf3b59178f1204d8511
                           .group:00000000 wm4.processIE.h.2.1848f1e3c653035e9779472584ce0441
                           .group:00000000 wm4.IEEE802154Ecsl.h.21.9b3cd0c823c4cebe26b24d119729e7b5
                           .group:00000000 wm4.sixtop.h.2.0b8613e8e48e9109b53e6143f3ed1895
                           .group:00000000 wm4.scheduler.h.2.ca320b72942c5204a6e225e3c9c0814e

UNDEFINED SYMBOLS
memset
ieee154e_isSynch
packetfunctions_sameAddress
ieee154e_asnDiff
sixtop_setKaPeriod
ieee154e_getAsn
radio_setTimerPeriod
