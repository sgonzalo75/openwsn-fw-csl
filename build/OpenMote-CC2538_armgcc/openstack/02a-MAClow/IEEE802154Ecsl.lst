   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"IEEE802154Ecsl.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  22              	rreg_uriquery:
  23 0000 683D7563 		.ascii	"h=ucb\000"
  23      6200
  24 0006 0000     		.align	2
  27              	infoBoardname:
  28 0008 43433235 		.ascii	"CC2538\000"
  28      333800
  29 000f 00       		.align	2
  32              	infouCName:
  33 0010 43433235 		.ascii	"CC2538\000"
  33      333800
  34 0017 00       		.align	2
  37              	infoRadioName:
  38 0018 43433235 		.ascii	"CC2538 SoC\000"
  38      33382053 
  38      6F4300
  39 0023 00       		.align	2
  42              	infoStackName:
  43 0024 4F70656E 		.ascii	"OpenWSN \000"
  43      57534E20 
  43      00
  44 002d 000000   		.align	2
  47              	all_routers_multicast:
  48 0030 FF       		.byte	-1
  49 0031 02       		.byte	2
  50 0032 00       		.byte	0
  51 0033 00       		.byte	0
  52 0034 00       		.byte	0
  53 0035 00       		.byte	0
  54 0036 00       		.byte	0
  55 0037 00       		.byte	0
  56 0038 00       		.byte	0
  57 0039 00       		.byte	0
  58 003a 00       		.byte	0
  59 003b 00       		.byte	0
  60 003c 00       		.byte	0
  61 003d 00       		.byte	0
  62 003e 00       		.byte	0
  63 003f 02       		.byte	2
  64              		.comm	ieee154e_vars,76,4
  65              		.comm	ieee154e_stats,15,4
  66              		.comm	ieee154e_dbg,20,4
  67              		.text
  68              		.align	2
  69              		.global	ieee154e_init
  70              		.thumb
  71              		.thumb_func
  73              	ieee154e_init:
  74              	.LFB0:
  75              		.file 1 "openstack/02a-MAClow/IEEE802154Ecsl.c"
   1:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "IEEE802154Ecsl.h"
   2:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
   3:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "opendefs.h"
   4:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "radio.h"
   5:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "radiotimer.h"
   6:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "IEEE802154.h"
   7:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "openqueue.h"
   8:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "idmanager.h"
   9:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "openserial.h"
  10:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "schedule.h"
  11:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "packetfunctions.h"
  12:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "scheduler.h"
  13:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "leds.h"
  14:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "neighbors.h"
  15:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "debugpins.h"
  16:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "sixtop.h"
  17:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "adaptive_sync.h"
  18:openstack/02a-MAClow/IEEE802154Ecsl.c **** #include "processIE.h"
  19:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  20:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
  21:openstack/02a-MAClow/IEEE802154Ecsl.c **** //=========================== VARIABLES ================================
  22:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
  23:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  24:openstack/02a-MAClow/IEEE802154Ecsl.c **** ieee154e_vars_t    ieee154e_vars;
  25:openstack/02a-MAClow/IEEE802154Ecsl.c **** ieee154e_stats_t   ieee154e_stats;
  26:openstack/02a-MAClow/IEEE802154Ecsl.c **** ieee154e_dbg_t     ieee154e_dbg;
  27:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  28:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
  29:openstack/02a-MAClow/IEEE802154Ecsl.c **** //========================== PROTOTYPES ================================
  30:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
  31:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  32:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  33:openstack/02a-MAClow/IEEE802154Ecsl.c **** // TX-MODE: CSL Frame sending activities prototypes
  34:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_ti1(void);
  35:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_ti2(void);
  36:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_tie1(void);
  37:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_ti3(void);
  38:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_tie2(void);
  39:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_ti4(PORT_RADIOTIMER_WIDTH capturedTime);
  40:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_tie3(void);
  41:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_ti5(PORT_RADIOTIMER_WIDTH capturedTime);
  42:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  43:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ti2(void);
  44:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_tie1(void);
  45:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ti3(void);
  46:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_tie2(void);
  47:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ti4(PORT_RADIOTIMER_WIDTH capturedTime);
  48:openstack/02a-MAClow/IEEE802154Ecsl.c **** void	activity_csl_data_tie3(void);
  49:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ti5(PORT_RADIOTIMER_WIDTH capturedTime);
  50:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ti6(void);
  51:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_tie4(void);
  52:openstack/02a-MAClow/IEEE802154Ecsl.c **** void	activity_csl_data_ti7(void);
  53:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_tie5(void);
  54:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ti8(PORT_RADIOTIMER_WIDTH capturedTime);
  55:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_tie6(void);
  56:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ti9(PORT_RADIOTIMER_WIDTH capturedTime);
  57:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  58:openstack/02a-MAClow/IEEE802154Ecsl.c **** // RX-MODE: CSL Sampling activities prototypes
  59:openstack/02a-MAClow/IEEE802154Ecsl.c **** void 	activity_csl_wakeup_ri1(void);
  60:openstack/02a-MAClow/IEEE802154Ecsl.c **** void 	activity_csl_wakeup_ri2(void);
  61:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_rie1(void);
  62:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_ri3(void);
  63:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_rie2(void);
  64:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_ri4(PORT_RADIOTIMER_WIDTH capturedTime);
  65:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_rie3(void);
  66:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_ri5(PORT_RADIOTIMER_WIDTH capturedTime);
  67:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_wakeup_rie4(void);
  68:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  69:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ri2(void);
  70:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_rie1(void);
  71:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ri3(void);
  72:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_rie2(void);
  73:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ri4(PORT_RADIOTIMER_WIDTH capturedTime);
  74:openstack/02a-MAClow/IEEE802154Ecsl.c **** void	activity_csl_data_rie3(void);
  75:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ri5(PORT_RADIOTIMER_WIDTH capturedTime);
  76:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ri6(void);
  77:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_rie4(void);
  78:openstack/02a-MAClow/IEEE802154Ecsl.c **** void	activity_csl_data_ri7(void);
  79:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_rie5(void);
  80:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ri8(PORT_RADIOTIMER_WIDTH capturedTime);
  81:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_rie6(void);
  82:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    activity_csl_data_ri9(PORT_RADIOTIMER_WIDTH capturedTime);
  83:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  84:openstack/02a-MAClow/IEEE802154Ecsl.c **** // frame validity check
  85:openstack/02a-MAClow/IEEE802154Ecsl.c **** bool     isValidRxFrame(ieee802154_header_iht* ieee802514_header);
  86:openstack/02a-MAClow/IEEE802154Ecsl.c **** bool     isValidAck(ieee802154_header_iht*     ieee802514_header,
  87:openstack/02a-MAClow/IEEE802154Ecsl.c ****                     OpenQueueEntry_t*          packetSent);
  88:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     changeIsSync(bool newIsSync);
  89:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  90:openstack/02a-MAClow/IEEE802154Ecsl.c **** // statistics
  91:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     resetStats(void);
  92:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     updateStats(PORT_SIGNED_INT_WIDTH timeCorrection);
  93:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  94:openstack/02a-MAClow/IEEE802154Ecsl.c **** // notifying upper layer
  95:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     notif_sendDone(OpenQueueEntry_t* packetSent, owerror_t error);
  96:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     notif_receive(OpenQueueEntry_t* packetReceived, uint8_t action);
  97:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
  98:openstack/02a-MAClow/IEEE802154Ecsl.c **** // IEs Handling
  99:openstack/02a-MAClow/IEEE802154Ecsl.c **** bool     ieee154e_processIEs(OpenQueueEntry_t* pkt, uint16_t* lenIE);
 100:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 101:openstack/02a-MAClow/IEEE802154Ecsl.c **** // ASN handling
 102:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     incrementAsnOffset(void);
 103:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     asnStoreFromAdv(uint8_t* asn);
 104:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     joinPriorityStoreFromAdv(uint8_t jp);
 105:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 106:openstack/02a-MAClow/IEEE802154Ecsl.c **** // misc
 107:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     changeState(ieee154e_state_t newstate);
 108:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     endOps(void);
 109:openstack/02a-MAClow/IEEE802154Ecsl.c **** bool     debugPrint_asn(void);
 110:openstack/02a-MAClow/IEEE802154Ecsl.c **** bool     debugPrint_isSync(void);
 111:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 112:openstack/02a-MAClow/IEEE802154Ecsl.c **** // CSL Sampling interrupts
 113:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     isr_ieee154ecsl_newChannelSample(void);
 114:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     isr_ieee154ecsl_timer(void);
 115:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 116:openstack/02a-MAClow/IEEE802154Ecsl.c **** // CSL queue checking for local transmissions
 117:openstack/02a-MAClow/IEEE802154Ecsl.c **** void 	 isr_ieee154ecsl_txtimer_cb(void);
 118:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 119:openstack/02a-MAClow/IEEE802154Ecsl.c **** // Testing callback to put a packet on queue for testing CSL Tx mode.
 120:openstack/02a-MAClow/IEEE802154Ecsl.c **** void     isr_ieee154ecsl_addPacketToQueueForTestingCslTx_cb (void);
 121:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 122:openstack/02a-MAClow/IEEE802154Ecsl.c **** // CSL Wake-up frames (create and retrieve methods).
 123:openstack/02a-MAClow/IEEE802154Ecsl.c **** void 	ieee802154_retrieveWakeUpFrame(OpenQueueEntry_t* msg, ieee802154_header_iht* ieee802514_heade
 124:openstack/02a-MAClow/IEEE802154Ecsl.c **** void    ieee802154_createWakeUpFrame(OpenQueueEntry_t* msg, uint8_t sequenceNumber, open_addr_t* ne
 125:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 126:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 127:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 128:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
 129:openstack/02a-MAClow/IEEE802154Ecsl.c **** //========================== INITIALIZATION ============================
 130:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
 131:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 132:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 133:openstack/02a-MAClow/IEEE802154Ecsl.c ****   \brief This function initializes this module.
 134:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 135:openstack/02a-MAClow/IEEE802154Ecsl.c ****   Call this function once before any other function in this module, possibly during boot-up.
 136:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 137:openstack/02a-MAClow/IEEE802154Ecsl.c **** void ieee154e_init() {
  76              		.loc 1 137 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              	.LCFI0:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 00AF     		add	r7, sp, #0
  86              	.LCFI1:
  87              		.cfi_def_cfa_register 7
 138:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
 139:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // initialize variables
 140:openstack/02a-MAClow/IEEE802154Ecsl.c ****    memset(&ieee154e_vars,0,sizeof(ieee154e_vars_t));
  88              		.loc 1 140 0
  89 0004 40F20000 		movw	r0, #:lower16:ieee154e_vars
  90 0008 C0F20000 		movt	r0, #:upper16:ieee154e_vars
  91 000c 4FF00001 		mov	r1, #0
  92 0010 4FF04C02 		mov	r2, #76
  93 0014 FFF7FEFF 		bl	memset
 141:openstack/02a-MAClow/IEEE802154Ecsl.c ****    memset(&ieee154e_dbg,0,sizeof(ieee154e_dbg_t));
  94              		.loc 1 141 0
  95 0018 40F20000 		movw	r0, #:lower16:ieee154e_dbg
  96 001c C0F20000 		movt	r0, #:upper16:ieee154e_dbg
  97 0020 4FF00001 		mov	r1, #0
  98 0024 4FF01402 		mov	r2, #20
  99 0028 FFF7FEFF 		bl	memset
 142:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
 143:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (idmanager_getIsDAGroot()==TRUE) {
 100              		.loc 1 143 0
 101 002c FFF7FEFF 		bl	idmanager_getIsDAGroot
 102 0030 0346     		mov	r3, r0
 103 0032 002B     		cmp	r3, #0
 104 0034 04D0     		beq	.L2
 144:openstack/02a-MAClow/IEEE802154Ecsl.c ****       changeIsSync(TRUE);
 105              		.loc 1 144 0
 106 0036 4FF00100 		mov	r0, #1
 107 003a FFF7FEFF 		bl	changeIsSync
 108 003e 03E0     		b	.L3
 109              	.L2:
 145:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } else {
 146:openstack/02a-MAClow/IEEE802154Ecsl.c ****       changeIsSync(FALSE);
 110              		.loc 1 146 0
 111 0040 4FF00000 		mov	r0, #0
 112 0044 FFF7FEFF 		bl	changeIsSync
 113              	.L3:
 147:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 148:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
 149:openstack/02a-MAClow/IEEE802154Ecsl.c ****    resetStats();
 114              		.loc 1 149 0
 115 0048 FFF7FEFF 		bl	resetStats
 150:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_stats.numDeSync                 = 0;
 116              		.loc 1 150 0
 117 004c 40F20003 		movw	r3, #:lower16:ieee154e_stats
 118 0050 C0F20003 		movt	r3, #:upper16:ieee154e_stats
 119 0054 4FF00002 		mov	r2, #0
 120 0058 9A71     		strb	r2, [r3, #6]
 151:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
 152:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // update CSL Mode to SLEEP in order to allow RX o TX.
 153:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.cslMode = CSL_SLEEP_MODE;
 121              		.loc 1 153 0
 122 005a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 123 005e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 124 0062 4FF00002 		mov	r2, #0
 125 0066 83F84520 		strb	r2, [r3, #69]
 154:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Set initial DSN counter for wake-up sequence frames.
 155:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.cslDSN	 = 0;
 126              		.loc 1 155 0
 127 006a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 128 006e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 129 0072 4FF00002 		mov	r2, #0
 130 0076 83F84420 		strb	r2, [r3, #68]
 156:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 157:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // switch radio on - Does this function really do anything?. Its contents are commented...
 158:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rfOn();
 131              		.loc 1 158 0
 132 007a FFF7FEFF 		bl	radio_rfOn
 159:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
 160:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // set callback functions for the radio
 161:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_setOverflowCb(isr_ieee154ecsl_newChannelSample); // Fires every macCSLPeriod for CSL chann
 133              		.loc 1 161 0
 134 007e 40F20000 		movw	r0, #:lower16:isr_ieee154ecsl_newChannelSample
 135 0082 C0F20000 		movt	r0, #:upper16:isr_ieee154ecsl_newChannelSample
 136 0086 FFF7FEFF 		bl	radio_setOverflowCb
 162:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_setCompareCb(isr_ieee154ecsl_timer);             // Fires for FSM state changing
 137              		.loc 1 162 0
 138 008a 40F20000 		movw	r0, #:lower16:isr_ieee154ecsl_timer
 139 008e C0F20000 		movt	r0, #:upper16:isr_ieee154ecsl_timer
 140 0092 FFF7FEFF 		bl	radio_setCompareCb
 163:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_setStartFrameCb(ieee154ecsl_startOfFrame);
 141              		.loc 1 163 0
 142 0096 40F20000 		movw	r0, #:lower16:ieee154ecsl_startOfFrame
 143 009a C0F20000 		movt	r0, #:upper16:ieee154ecsl_startOfFrame
 144 009e FFF7FEFF 		bl	radio_setStartFrameCb
 164:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_setEndFrameCb(ieee154ecsl_endOfFrame);
 145              		.loc 1 164 0
 146 00a2 40F20000 		movw	r0, #:lower16:ieee154ecsl_endOfFrame
 147 00a6 C0F20000 		movt	r0, #:upper16:ieee154ecsl_endOfFrame
 148 00aa FFF7FEFF 		bl	radio_setEndFrameCb
 165:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 166:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // set timer for checking frames on local queue to transmit.
 167:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.txTimer = opentimers_start(macCSLTxChkFreq, TIMER_PERIODIC, TIME_TICS, isr_ieee154
 149              		.loc 1 167 0
 150 00ae 40F2AE70 		movw	r0, #1966
 151 00b2 4FF00001 		mov	r1, #0
 152 00b6 4FF00102 		mov	r2, #1
 153 00ba 40F20003 		movw	r3, #:lower16:isr_ieee154ecsl_txtimer_cb
 154 00be C0F20003 		movt	r3, #:upper16:isr_ieee154ecsl_txtimer_cb
 155 00c2 FFF7FEFF 		bl	opentimers_start
 156 00c6 0346     		mov	r3, r0
 157 00c8 1A46     		mov	r2, r3
 158 00ca 40F20003 		movw	r3, #:lower16:ieee154e_vars
 159 00ce C0F20003 		movt	r3, #:upper16:ieee154e_vars
 160 00d2 83F84620 		strb	r2, [r3, #70]
 168:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 169:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // set timer for callback to add packet to queue for testing CSL TX (every 5 seconds)
 170:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.cslTxTestTimer = opentimers_start(2000, TIMER_PERIODIC, TIME_MS, isr_ieee154ecsl_a
 161              		.loc 1 170 0
 162 00d6 4FF4FA60 		mov	r0, #2000
 163 00da 4FF00001 		mov	r1, #0
 164 00de 4FF00002 		mov	r2, #0
 165 00e2 40F20003 		movw	r3, #:lower16:isr_ieee154ecsl_addPacketToQueueForTestingCslTx_cb
 166 00e6 C0F20003 		movt	r3, #:upper16:isr_ieee154ecsl_addPacketToQueueForTestingCslTx_cb
 167 00ea FFF7FEFF 		bl	opentimers_start
 168 00ee 0346     		mov	r3, r0
 169 00f0 1A46     		mov	r2, r3
 170 00f2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 171 00f6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 172 00fa 83F84720 		strb	r2, [r3, #71]
 171:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 172:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // have the radio start its timer for channel sampling (macCSLPeriod)
 173:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_startTimer(macCSLPeriod);
 173              		.loc 1 173 0
 174 00fe 41F69A10 		movw	r0, #6554
 175 0102 FFF7FEFF 		bl	radio_startTimer
 174:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 176              		.loc 1 174 0
 177 0106 80BD     		pop	{r7, pc}
 178              		.cfi_endproc
 179              	.LFE0:
 181              		.align	2
 182              		.global	isr_ieee154ecsl_newChannelSample
 183              		.thumb
 184              		.thumb_func
 186              	isr_ieee154ecsl_newChannelSample:
 187              	.LFB1:
 175:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 176:openstack/02a-MAClow/IEEE802154Ecsl.c **** //=========================== public ==========================================
 177:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 178:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
 179:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================  EVENTS & CALLBACKS ===========================
 180:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
 181:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 182:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 183:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Indicates a new CSL Channel Sample has just started.
 184:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 185:openstack/02a-MAClow/IEEE802154Ecsl.c **** This function executes in ISR mode, when the new CSÑ Channel Sample timer fires.
 186:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 187:openstack/02a-MAClow/IEEE802154Ecsl.c **** void isr_ieee154ecsl_newChannelSample() {
 188              		.loc 1 187 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0108 80B5     		push	{r7, lr}
 193              	.LCFI2:
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 010a 00AF     		add	r7, sp, #0
 198              	.LCFI3:
 199              		.cfi_def_cfa_register 7
 188:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Establish the new timer for the next channel sample
 189:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_setTimerPeriod(macCSLPeriod);
 200              		.loc 1 189 0
 201 010c 41F69A10 		movw	r0, #6554
 202 0110 FFF7FEFF 		bl	radio_setTimerPeriod
 190:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 191:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Verificamos que no estamos ya en un proceso de TX o RX previo.
 192:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if(ieee154e_vars.cslMode == CSL_SLEEP_MODE) {
 203              		.loc 1 192 0
 204 0114 40F20003 		movw	r3, #:lower16:ieee154e_vars
 205 0118 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 206 011c 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 207 0120 002B     		cmp	r3, #0
 208 0122 02D1     		bne	.L5
 193:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // We call the first activity on FSM for channel sampling (CSL FSM RX mode)
 194:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  activity_csl_wakeup_ri1();
 209              		.loc 1 194 0
 210 0124 FFF7FEFF 		bl	activity_csl_wakeup_ri1
 211 0128 12E0     		b	.L6
 212              	.L5:
 195:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } else {
 196:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // log the info about a operation in progress
 197:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  openserial_printInfo(COMPONENT_IEEE802154E,ERR_MAC_OPERATION_IN_PROGRESS,
 198:openstack/02a-MAClow/IEEE802154Ecsl.c **** 						  (errorparameter_t)ieee154e_vars.cslMode, (errorparameter_t)ieee154e_dbg.num_cslSamples);
 213              		.loc 1 198 0
 214 012a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 215 012e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 216 0132 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 197:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  openserial_printInfo(COMPONENT_IEEE802154E,ERR_MAC_OPERATION_IN_PROGRESS,
 217              		.loc 1 197 0
 218 0136 1A46     		mov	r2, r3
 219              		.loc 1 198 0
 220 0138 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 221 013c C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 222 0140 1B69     		ldr	r3, [r3, #16]
 197:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  openserial_printInfo(COMPONENT_IEEE802154E,ERR_MAC_OPERATION_IN_PROGRESS,
 223              		.loc 1 197 0
 224 0142 9BB2     		uxth	r3, r3
 225 0144 4FF00900 		mov	r0, #9
 226 0148 4FF04001 		mov	r1, #64
 227 014c FFF7FEFF 		bl	openserial_printInfo
 228              	.L6:
 199:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 200:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 201:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Increment the number of cslSamples.
 202:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_dbg.num_cslSamples++;
 229              		.loc 1 202 0
 230 0150 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 231 0154 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 232 0158 1B69     		ldr	r3, [r3, #16]
 233 015a 03F10102 		add	r2, r3, #1
 234 015e 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 235 0162 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 236 0166 1A61     		str	r2, [r3, #16]
 203:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 237              		.loc 1 203 0
 238 0168 80BD     		pop	{r7, pc}
 239              		.cfi_endproc
 240              	.LFE1:
 242 016a 00BF     		.align	2
 243              		.global	isr_ieee154ecsl_timer
 244              		.thumb
 245              		.thumb_func
 247              	isr_ieee154ecsl_timer:
 248              	.LFB2:
 204:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 205:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 206:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Indicates the FSM timer has fired.
 207:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 208:openstack/02a-MAClow/IEEE802154Ecsl.c **** This function executes in ISR mode, when the FSM timer fires.
 209:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 210:openstack/02a-MAClow/IEEE802154Ecsl.c **** void isr_ieee154ecsl_timer() {
 249              		.loc 1 210 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 1, uses_anonymous_args = 0
 253 016c 80B5     		push	{r7, lr}
 254              	.LCFI4:
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 7, -8
 257              		.cfi_offset 14, -4
 258 016e 00AF     		add	r7, sp, #0
 259              	.LCFI5:
 260              		.cfi_def_cfa_register 7
 211:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.cslMode == CSL_RX_MODE)  { // Current CSL operation mode is channel sampling a
 261              		.loc 1 211 0
 262 0170 40F20003 		movw	r3, #:lower16:ieee154e_vars
 263 0174 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 264 0178 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 265 017c 012B     		cmp	r3, #1
 266 017e 71D1     		bne	.L8
 212:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   switch (ieee154e_vars.state) {
 267              		.loc 1 212 0
 268 0180 40F20003 		movw	r3, #:lower16:ieee154e_vars
 269 0184 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 270 0188 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 271 018a A3F12A03 		sub	r3, r3, #42
 272 018e 0F2B     		cmp	r3, #15
 273 0190 53D8     		bhi	.L9
 274 0192 01A2     		adr	r2, .L26
 275 0194 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 276              		.align	2
 277              	.L26:
 278 0198 D9010000 		.word	.L10+1
 279 019c DF010000 		.word	.L11+1
 280 01a0 E5010000 		.word	.L12+1
 281 01a4 EB010000 		.word	.L13+1
 282 01a8 F1010000 		.word	.L14+1
 283 01ac F7010000 		.word	.L15+1
 284 01b0 FD010000 		.word	.L16+1
 285 01b4 03020000 		.word	.L17+1
 286 01b8 09020000 		.word	.L18+1
 287 01bc 0F020000 		.word	.L19+1
 288 01c0 15020000 		.word	.L20+1
 289 01c4 1B020000 		.word	.L21+1
 290 01c8 21020000 		.word	.L22+1
 291 01cc 27020000 		.word	.L23+1
 292 01d0 2D020000 		.word	.L24+1
 293 01d4 33020000 		.word	.L25+1
 294              	.L10:
 213:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      // RX-MODE
 214:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXWAKEUPOFFSET:      activity_csl_wakeup_ri2();  break;
 295              		.loc 1 214 0
 296 01d8 FFF7FEFF 		bl	activity_csl_wakeup_ri2
 297 01dc B6E0     		b	.L28
 298              	.L11:
 215:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXWAKEUPPREPARE:     activity_csl_wakeup_rie1(); break;
 299              		.loc 1 215 0
 300 01de FFF7FEFF 		bl	activity_csl_wakeup_rie1
 301 01e2 B3E0     		b	.L28
 302              	.L12:
 216:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXWAKEUPREADY:       activity_csl_wakeup_ri3();  break;
 303              		.loc 1 216 0
 304 01e4 FFF7FEFF 		bl	activity_csl_wakeup_ri3
 305 01e8 B0E0     		b	.L28
 306              	.L13:
 217:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXWAKEUPLISTEN:      activity_csl_wakeup_rie2(); break;
 307              		.loc 1 217 0
 308 01ea FFF7FEFF 		bl	activity_csl_wakeup_rie2
 309 01ee ADE0     		b	.L28
 310              	.L14:
 218:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXWAKEUP:			 activity_csl_wakeup_rie3(); break;
 311              		.loc 1 218 0
 312 01f0 FFF7FEFF 		bl	activity_csl_wakeup_rie3
 313 01f4 AAE0     		b	.L28
 314              	.L15:
 219:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXWAKEUPVALIDATE: 	 activity_csl_wakeup_rie4(); break;
 315              		.loc 1 219 0
 316 01f6 FFF7FEFF 		bl	activity_csl_wakeup_rie4
 317 01fa A7E0     		b	.L28
 318              	.L16:
 220:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 221:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXDATAOFFSET:    	 activity_csl_data_ri2();    break;
 319              		.loc 1 221 0
 320 01fc FFF7FEFF 		bl	activity_csl_data_ri2
 321 0200 A4E0     		b	.L28
 322              	.L17:
 222:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXDATAPREPARE:       activity_csl_data_rie1();   break;
 323              		.loc 1 222 0
 324 0202 FFF7FEFF 		bl	activity_csl_data_rie1
 325 0206 A1E0     		b	.L28
 326              	.L18:
 223:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXDATAREADY:         activity_csl_data_ri3();    break;
 327              		.loc 1 223 0
 328 0208 FFF7FEFF 		bl	activity_csl_data_ri3
 329 020c 9EE0     		b	.L28
 330              	.L19:
 224:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXDATALISTEN:        activity_csl_data_rie2();   break;
 331              		.loc 1 224 0
 332 020e FFF7FEFF 		bl	activity_csl_data_rie2
 333 0212 9BE0     		b	.L28
 334              	.L20:
 225:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXDATA:			     activity_csl_data_rie3();   break;
 335              		.loc 1 225 0
 336 0214 FFF7FEFF 		bl	activity_csl_data_rie3
 337 0218 98E0     		b	.L28
 338              	.L21:
 226:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 227:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLTXACKOFFSET: 	     activity_csl_data_ri6();    break;
 339              		.loc 1 227 0
 340 021a FFF7FEFF 		bl	activity_csl_data_ri6
 341 021e 95E0     		b	.L28
 342              	.L22:
 228:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLTXACKPREPARE:        activity_csl_data_rie4();   break;
 343              		.loc 1 228 0
 344 0220 FFF7FEFF 		bl	activity_csl_data_rie4
 345 0224 92E0     		b	.L28
 346              	.L23:
 229:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLTXACKREADY:          activity_csl_data_ri7();    break;
 347              		.loc 1 229 0
 348 0226 FFF7FEFF 		bl	activity_csl_data_ri7
 349 022a 8FE0     		b	.L28
 350              	.L24:
 230:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLTXACKDELAY:          activity_csl_data_rie5();   break;
 351              		.loc 1 230 0
 352 022c FFF7FEFF 		bl	activity_csl_data_rie5
 353 0230 8CE0     		b	.L28
 354              	.L25:
 231:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLTXACK:               activity_csl_data_rie6();   break;
 355              		.loc 1 231 0
 356 0232 FFF7FEFF 		bl	activity_csl_data_rie6
 357 0236 00BF     		nop
 358 0238 88E0     		b	.L28
 359              	.L9:
 232:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  default:
 233:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 // log the error
 234:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_TIMERFIRES,
 235:openstack/02a-MAClow/IEEE802154Ecsl.c **** 								   (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_dbg.num_cslSamples);
 360              		.loc 1 235 0
 361 023a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 362 023e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 363 0242 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 234:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_TIMERFIRES,
 364              		.loc 1 234 0
 365 0244 1A46     		mov	r2, r3
 366              		.loc 1 235 0
 367 0246 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 368 024a C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 369 024e 1B69     		ldr	r3, [r3, #16]
 234:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_TIMERFIRES,
 370              		.loc 1 234 0
 371 0250 9BB2     		uxth	r3, r3
 372 0252 4FF00900 		mov	r0, #9
 373 0256 4FF03B01 		mov	r1, #59
 374 025a FFF7FEFF 		bl	openserial_printError
 236:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 // abort
 237:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 endOps();
 375              		.loc 1 237 0
 376 025e FFF7FEFF 		bl	endOps
 238:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 break;
 377              		.loc 1 238 0
 378 0262 73E0     		b	.L28
 379              	.L8:
 239:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   }
 240:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } else if (ieee154e_vars.cslMode == CSL_TX_MODE)  { // Current CSL operation mode is frame TX.
 380              		.loc 1 240 0
 381 0264 40F20003 		movw	r3, #:lower16:ieee154e_vars
 382 0268 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 383 026c 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 384 0270 022B     		cmp	r3, #2
 385 0272 6BD1     		bne	.L28
 241:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   switch (ieee154e_vars.state) {
 386              		.loc 1 241 0
 387 0274 40F20003 		movw	r3, #:lower16:ieee154e_vars
 388 0278 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 389 027c 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 390 027e A3F11A03 		sub	r3, r3, #26
 391 0282 0E2B     		cmp	r3, #14
 392 0284 4DD8     		bhi	.L29
 393 0286 01A2     		adr	r2, .L45
 394 0288 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 395              		.align	2
 396              	.L45:
 397 028c C9020000 		.word	.L30+1
 398 0290 CF020000 		.word	.L31+1
 399 0294 D5020000 		.word	.L32+1
 400 0298 DB020000 		.word	.L33+1
 401 029c E1020000 		.word	.L34+1
 402 02a0 E7020000 		.word	.L35+1
 403 02a4 ED020000 		.word	.L36+1
 404 02a8 F3020000 		.word	.L37+1
 405 02ac F9020000 		.word	.L38+1
 406 02b0 FF020000 		.word	.L39+1
 407 02b4 05030000 		.word	.L40+1
 408 02b8 0B030000 		.word	.L41+1
 409 02bc 11030000 		.word	.L42+1
 410 02c0 17030000 		.word	.L43+1
 411 02c4 1D030000 		.word	.L44+1
 412              	.L30:
 242:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      // TX-MODE
 243:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXWAKEUPOFFSET:		 activity_csl_wakeup_ti2();  break;
 413              		.loc 1 243 0
 414 02c8 FFF7FEFF 		bl	activity_csl_wakeup_ti2
 415 02cc 3EE0     		b	.L28
 416              	.L31:
 244:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXWAKEUPPREPARE:	 activity_csl_wakeup_tie1(); break;
 417              		.loc 1 244 0
 418 02ce FFF7FEFF 		bl	activity_csl_wakeup_tie1
 419 02d2 3BE0     		b	.L28
 420              	.L32:
 245:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXWAKEUPREADY:	     activity_csl_wakeup_ti3();  break;
 421              		.loc 1 245 0
 422 02d4 FFF7FEFF 		bl	activity_csl_wakeup_ti3
 423 02d8 38E0     		b	.L28
 424              	.L33:
 246:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXWAKEUPDELAY:	     activity_csl_wakeup_tie2(); break;
 425              		.loc 1 246 0
 426 02da FFF7FEFF 		bl	activity_csl_wakeup_tie2
 427 02de 35E0     		b	.L28
 428              	.L34:
 247:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXWAKEUP: 	         activity_csl_wakeup_tie3(); break;
 429              		.loc 1 247 0
 430 02e0 FFF7FEFF 		bl	activity_csl_wakeup_tie3
 431 02e4 32E0     		b	.L28
 432              	.L35:
 248:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 249:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXDATAOFFSET:        activity_csl_data_ti2();    break;
 433              		.loc 1 249 0
 434 02e6 FFF7FEFF 		bl	activity_csl_data_ti2
 435 02ea 2FE0     		b	.L28
 436              	.L36:
 250:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXDATAPREPARE:	     activity_csl_data_tie1(); 	 break;
 437              		.loc 1 250 0
 438 02ec FFF7FEFF 		bl	activity_csl_data_tie1
 439 02f0 2CE0     		b	.L28
 440              	.L37:
 251:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXDATAREADY:	     activity_csl_data_ti3(); 	 break;
 441              		.loc 1 251 0
 442 02f2 FFF7FEFF 		bl	activity_csl_data_ti3
 443 02f6 29E0     		b	.L28
 444              	.L38:
 252:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXDATADELAY:	     activity_csl_data_tie2(); 	 break;
 445              		.loc 1 252 0
 446 02f8 FFF7FEFF 		bl	activity_csl_data_tie2
 447 02fc 26E0     		b	.L28
 448              	.L39:
 253:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXDATA: 	         activity_csl_data_tie3();	 break;
 449              		.loc 1 253 0
 450 02fe FFF7FEFF 		bl	activity_csl_data_tie3
 451 0302 23E0     		b	.L28
 452              	.L40:
 254:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 255:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLRXACKOFFSET: 	     activity_csl_data_ti6();	 break;
 453              		.loc 1 255 0
 454 0304 FFF7FEFF 		bl	activity_csl_data_ti6
 455 0308 20E0     		b	.L28
 456              	.L41:
 256:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLRXACKPREPARE:	     activity_csl_data_tie4(); 	 break;
 457              		.loc 1 256 0
 458 030a FFF7FEFF 		bl	activity_csl_data_tie4
 459 030e 1DE0     		b	.L28
 460              	.L42:
 257:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLRXACKREADY: 	     activity_csl_data_ti7(); 	 break;
 461              		.loc 1 257 0
 462 0310 FFF7FEFF 		bl	activity_csl_data_ti7
 463 0314 1AE0     		b	.L28
 464              	.L43:
 258:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLRXACKLISTEN: 	     activity_csl_data_tie5(); 	 break;
 465              		.loc 1 258 0
 466 0316 FFF7FEFF 		bl	activity_csl_data_tie5
 467 031a 17E0     		b	.L28
 468              	.L44:
 259:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLRXACK:     	         activity_csl_data_tie6(); 	 break;
 469              		.loc 1 259 0
 470 031c FFF7FEFF 		bl	activity_csl_data_tie6
 471 0320 14E0     		b	.L28
 472              	.L29:
 260:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 261:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  default:
 262:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 // log the error
 263:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_TIMERFIRES,
 264:openstack/02a-MAClow/IEEE802154Ecsl.c **** 								   (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_dbg.num_cslSamples);
 473              		.loc 1 264 0
 474 0322 40F20003 		movw	r3, #:lower16:ieee154e_vars
 475 0326 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 476 032a 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 263:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_TIMERFIRES,
 477              		.loc 1 263 0
 478 032c 1A46     		mov	r2, r3
 479              		.loc 1 264 0
 480 032e 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 481 0332 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 482 0336 1B69     		ldr	r3, [r3, #16]
 263:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_TIMERFIRES,
 483              		.loc 1 263 0
 484 0338 9BB2     		uxth	r3, r3
 485 033a 4FF00900 		mov	r0, #9
 486 033e 4FF03B01 		mov	r1, #59
 487 0342 FFF7FEFF 		bl	openserial_printError
 265:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 // abort
 266:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 endOps();
 488              		.loc 1 266 0
 489 0346 FFF7FEFF 		bl	endOps
 267:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			 break;
 490              		.loc 1 267 0
 491 034a 00BF     		nop
 492              	.L28:
 268:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   }
 269:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 270:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_dbg.num_timer++;
 493              		.loc 1 270 0
 494 034c 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 495 0350 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 496 0354 5B68     		ldr	r3, [r3, #4]
 497 0356 03F10102 		add	r2, r3, #1
 498 035a 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 499 035e C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 500 0362 5A60     		str	r2, [r3, #4]
 271:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 501              		.loc 1 271 0
 502 0364 80BD     		pop	{r7, pc}
 503              		.cfi_endproc
 504              	.LFE2:
 506 0366 00BF     		.align	2
 507              		.global	ieee154ecsl_startOfFrame
 508              		.thumb
 509              		.thumb_func
 511              	ieee154ecsl_startOfFrame:
 512              	.LFB3:
 272:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 273:openstack/02a-MAClow/IEEE802154Ecsl.c **** void ieee154ecsl_startOfFrame(PORT_RADIOTIMER_WIDTH capturedTime) {
 513              		.loc 1 273 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 8
 516              		@ frame_needed = 1, uses_anonymous_args = 0
 517 0368 80B5     		push	{r7, lr}
 518              	.LCFI6:
 519              		.cfi_def_cfa_offset 8
 520              		.cfi_offset 7, -8
 521              		.cfi_offset 14, -4
 522 036a 82B0     		sub	sp, sp, #8
 523              	.LCFI7:
 524              		.cfi_def_cfa_offset 16
 525 036c 00AF     		add	r7, sp, #0
 526              	.LCFI8:
 527              		.cfi_def_cfa_register 7
 528 036e 7860     		str	r0, [r7, #4]
 274:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	if(ieee154e_vars.cslMode == CSL_RX_MODE)  { // Current CSL operation mode is channel sampling and 
 529              		.loc 1 274 0
 530 0370 40F20003 		movw	r3, #:lower16:ieee154e_vars
 531 0374 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 532 0378 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 533 037c 012B     		cmp	r3, #1
 534 037e 30D1     		bne	.L47
 275:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   switch (ieee154e_vars.state) {
 535              		.loc 1 275 0
 536 0380 40F20003 		movw	r3, #:lower16:ieee154e_vars
 537 0384 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 538 0388 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 539 038a A3F12D03 		sub	r3, r3, #45
 540 038e 0B2B     		cmp	r3, #11
 541 0390 73D8     		bhi	.L60
 542 0392 01A2     		adr	r2, .L52
 543 0394 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 544              		.align	2
 545              	.L52:
 546 0398 C9030000 		.word	.L49+1
 547 039c C9030000 		.word	.L49+1
 548 03a0 7B040000 		.word	.L60+1
 549 03a4 7B040000 		.word	.L60+1
 550 03a8 7B040000 		.word	.L60+1
 551 03ac D1030000 		.word	.L50+1
 552 03b0 D1030000 		.word	.L50+1
 553 03b4 7B040000 		.word	.L60+1
 554 03b8 7B040000 		.word	.L60+1
 555 03bc 7B040000 		.word	.L60+1
 556 03c0 7B040000 		.word	.L60+1
 557 03c4 D9030000 		.word	.L51+1
 558              	.L49:
 276:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  // RX MODE
 277:openstack/02a-MAClow/IEEE802154Ecsl.c ****           /*
 278:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   It is possible to receive in this state for radio where there is no way of differentiated betw
 279:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   (e.g. CC2420). We must therefore expect to the start of a packet in this "ready" state.
 280:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  */
 281:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXWAKEUP:    			 // no break!
 282:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXWAKEUPLISTEN:	 	     activity_csl_wakeup_ri4(capturedTime); break;
 559              		.loc 1 282 0
 560 03c8 7868     		ldr	r0, [r7, #4]
 561 03ca FFF7FEFF 		bl	activity_csl_wakeup_ri4
 562 03ce 55E0     		b	.L54
 563              	.L50:
 283:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 284:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXDATAREADY:		     // no break!
 285:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLRXDATALISTEN:            activity_csl_data_ri4(capturedTime);   break;
 564              		.loc 1 285 0
 565 03d0 7868     		ldr	r0, [r7, #4]
 566 03d2 FFF7FEFF 		bl	activity_csl_data_ri4
 567 03d6 51E0     		b	.L54
 568              	.L51:
 286:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 287:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  case S_CSLTXACKDELAY:              activity_csl_data_ri8(capturedTime);   break;
 569              		.loc 1 287 0
 570 03d8 7868     		ldr	r0, [r7, #4]
 571 03da FFF7FEFF 		bl	activity_csl_data_ri8
 572 03de 00BF     		nop
 573 03e0 4CE0     		b	.L54
 574              	.L47:
 288:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  default:
 289:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			// log the error
 290:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			//openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_SAMPLE,
 291:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			//					  (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_dbg.num_cslSamples);
 292:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			// abort
 293:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			//endOps();
 294:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			break;
 295:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		}
 296:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	} else if (ieee154e_vars.cslMode == CSL_TX_MODE)  { // Current CSL operation mode is frame TX.
 575              		.loc 1 296 0
 576 03e2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 577 03e6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 578 03ea 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 579 03ee 022B     		cmp	r3, #2
 580 03f0 44D1     		bne	.L54
 297:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   switch (ieee154e_vars.state) {
 581              		.loc 1 297 0
 582 03f2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 583 03f6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 584 03fa 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 585 03fc A3F11D03 		sub	r3, r3, #29
 586 0400 0A2B     		cmp	r3, #10
 587 0402 25D8     		bhi	.L55
 588 0404 01A2     		adr	r2, .L59
 589 0406 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 590 040a 00BF     		.align	2
 591              	.L59:
 592 040c 41040000 		.word	.L56+1
 593 0410 51040000 		.word	.L55+1
 594 0414 51040000 		.word	.L55+1
 595 0418 51040000 		.word	.L55+1
 596 041c 51040000 		.word	.L55+1
 597 0420 49040000 		.word	.L57+1
 598 0424 51040000 		.word	.L55+1
 599 0428 51040000 		.word	.L55+1
 600 042c 51040000 		.word	.L55+1
 601 0430 39040000 		.word	.L58+1
 602 0434 39040000 		.word	.L58+1
 603              	.L58:
 298:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  // TX MODE
 299:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 300:openstack/02a-MAClow/IEEE802154Ecsl.c ****           /*
 301:openstack/02a-MAClow/IEEE802154Ecsl.c ****           It is possible to receive in this state for radio where there is no way of differentiated
 302:openstack/02a-MAClow/IEEE802154Ecsl.c ****           (e.g. CC2420). We must therefore expect to the start of a packet in this "ready" state.
 303:openstack/02a-MAClow/IEEE802154Ecsl.c ****           */
 304:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLRXACKREADY:               // no break!
 305:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLRXACKLISTEN:              activity_csl_data_ti8(capturedTime);  break;
 604              		.loc 1 305 0
 605 0438 7868     		ldr	r0, [r7, #4]
 606 043a FFF7FEFF 		bl	activity_csl_data_ti8
 607 043e 1DE0     		b	.L54
 608              	.L56:
 306:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 307:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXWAKEUPDELAY:            activity_csl_wakeup_ti4(capturedTime); break;
 609              		.loc 1 307 0
 610 0440 7868     		ldr	r0, [r7, #4]
 611 0442 FFF7FEFF 		bl	activity_csl_wakeup_ti4
 612 0446 19E0     		b	.L54
 613              	.L57:
 308:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      case S_CSLTXDATADELAY:              activity_csl_data_ti4(capturedTime);   break;
 614              		.loc 1 308 0
 615 0448 7868     		ldr	r0, [r7, #4]
 616 044a FFF7FEFF 		bl	activity_csl_data_ti4
 617 044e 15E0     		b	.L54
 618              	.L55:
 309:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 310:openstack/02a-MAClow/IEEE802154Ecsl.c ****           default:
 311:openstack/02a-MAClow/IEEE802154Ecsl.c ****    			// log the error
 312:openstack/02a-MAClow/IEEE802154Ecsl.c ****    			openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_SAMPLE,
 313:openstack/02a-MAClow/IEEE802154Ecsl.c ****    								  (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_dbg.num_cslSamples);
 619              		.loc 1 313 0
 620 0450 40F20003 		movw	r3, #:lower16:ieee154e_vars
 621 0454 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 622 0458 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 312:openstack/02a-MAClow/IEEE802154Ecsl.c ****    			openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_SAMPLE,
 623              		.loc 1 312 0
 624 045a 1A46     		mov	r2, r3
 625              		.loc 1 313 0
 626 045c 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 627 0460 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 628 0464 1B69     		ldr	r3, [r3, #16]
 312:openstack/02a-MAClow/IEEE802154Ecsl.c ****    			openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_SAMPLE,
 629              		.loc 1 312 0
 630 0466 9BB2     		uxth	r3, r3
 631 0468 4FF00900 		mov	r0, #9
 632 046c 4FF03E01 		mov	r1, #62
 633 0470 FFF7FEFF 		bl	openserial_printError
 314:openstack/02a-MAClow/IEEE802154Ecsl.c ****    			// abort
 315:openstack/02a-MAClow/IEEE802154Ecsl.c ****    			endOps();
 634              		.loc 1 315 0
 635 0474 FFF7FEFF 		bl	endOps
 316:openstack/02a-MAClow/IEEE802154Ecsl.c ****    			break;
 636              		.loc 1 316 0
 637 0478 00E0     		b	.L54
 638              	.L60:
 294:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			break;
 639              		.loc 1 294 0
 640 047a 00BF     		nop
 641              	.L54:
 317:openstack/02a-MAClow/IEEE802154Ecsl.c ****    		}
 318:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	}
 319:openstack/02a-MAClow/IEEE802154Ecsl.c ****   ieee154e_dbg.num_startOfFrame++;
 642              		.loc 1 319 0
 643 047c 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 644 0480 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 645 0484 9B68     		ldr	r3, [r3, #8]
 646 0486 03F10102 		add	r2, r3, #1
 647 048a 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 648 048e C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 649 0492 9A60     		str	r2, [r3, #8]
 320:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 650              		.loc 1 320 0
 651 0494 07F10807 		add	r7, r7, #8
 652 0498 BD46     		mov	sp, r7
 653 049a 80BD     		pop	{r7, pc}
 654              		.cfi_endproc
 655              	.LFE3:
 657              		.align	2
 658              		.global	ieee154ecsl_endOfFrame
 659              		.thumb
 660              		.thumb_func
 662              	ieee154ecsl_endOfFrame:
 663              	.LFB4:
 321:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 322:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 323:openstack/02a-MAClow/IEEE802154Ecsl.c **** void ieee154ecsl_endOfFrame(PORT_RADIOTIMER_WIDTH capturedTime) {
 664              		.loc 1 323 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 8
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668 049c 80B5     		push	{r7, lr}
 669              	.LCFI9:
 670              		.cfi_def_cfa_offset 8
 671              		.cfi_offset 7, -8
 672              		.cfi_offset 14, -4
 673 049e 82B0     		sub	sp, sp, #8
 674              	.LCFI10:
 675              		.cfi_def_cfa_offset 16
 676 04a0 00AF     		add	r7, sp, #0
 677              	.LCFI11:
 678              		.cfi_def_cfa_register 7
 679 04a2 7860     		str	r0, [r7, #4]
 324:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	if(ieee154e_vars.cslMode == CSL_RX_MODE)  { // Current CSL operation mode is channel sampling and 
 680              		.loc 1 324 0
 681 04a4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 682 04a8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 683 04ac 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 684 04b0 012B     		cmp	r3, #1
 685 04b2 2CD1     		bne	.L62
 325:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   switch (ieee154e_vars.state) {
 686              		.loc 1 325 0
 687 04b4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 688 04b8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 689 04bc 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 690 04be 342B     		cmp	r3, #52
 691 04c0 07D0     		beq	.L65
 692 04c2 392B     		cmp	r3, #57
 693 04c4 09D0     		beq	.L66
 694 04c6 2E2B     		cmp	r3, #46
 695 04c8 0CD1     		bne	.L73
 696              	.L64:
 326:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		 // RX MODE
 327:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		 case S_CSLRXWAKEUP:           activity_csl_wakeup_ri5(capturedTime);  break;
 697              		.loc 1 327 0
 698 04ca 7868     		ldr	r0, [r7, #4]
 699 04cc FFF7FEFF 		bl	activity_csl_wakeup_ri5
 700 04d0 51E0     		b	.L68
 701              	.L65:
 328:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		 case S_CSLRXDATA:             activity_csl_data_ri5(capturedTime);    break;
 702              		.loc 1 328 0
 703 04d2 7868     		ldr	r0, [r7, #4]
 704 04d4 FFF7FEFF 		bl	activity_csl_data_ri5
 705 04d8 4DE0     		b	.L68
 706              	.L66:
 329:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		 case S_CSLTXACK:              activity_csl_data_ri9(capturedTime);    break;
 707              		.loc 1 329 0
 708 04da 7868     		ldr	r0, [r7, #4]
 709 04dc FFF7FEFF 		bl	activity_csl_data_ri9
 710 04e0 00BF     		nop
 711 04e2 48E0     		b	.L68
 712              	.L73:
 330:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		 default:
 331:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			// log the error
 332:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_ENDOFFRAME,
 333:openstack/02a-MAClow/IEEE802154Ecsl.c **** 								  (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_dbg.num_cslSamples);
 713              		.loc 1 333 0
 714 04e4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 715 04e8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 716 04ec 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 332:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_ENDOFFRAME,
 717              		.loc 1 332 0
 718 04ee 1A46     		mov	r2, r3
 719              		.loc 1 333 0
 720 04f0 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 721 04f4 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 722 04f8 1B69     		ldr	r3, [r3, #16]
 332:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_ENDOFFRAME,
 723              		.loc 1 332 0
 724 04fa 9BB2     		uxth	r3, r3
 725 04fc 4FF00900 		mov	r0, #9
 726 0500 4FF03F01 		mov	r1, #63
 727 0504 FFF7FEFF 		bl	openserial_printError
 334:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			// abort
 335:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			endOps();
 728              		.loc 1 335 0
 729 0508 FFF7FEFF 		bl	endOps
 336:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			break;
 730              		.loc 1 336 0
 731 050c 33E0     		b	.L68
 732              	.L62:
 337:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   }
 338:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	} else if (ieee154e_vars.cslMode == CSL_TX_MODE)  { // Current CSL operation mode is frame TX.
 733              		.loc 1 338 0
 734 050e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 735 0512 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 736 0516 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 737 051a 022B     		cmp	r3, #2
 738 051c 2BD1     		bne	.L68
 339:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  switch (ieee154e_vars.state) {
 739              		.loc 1 339 0
 740 051e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 741 0522 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 742 0526 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 743 0528 232B     		cmp	r3, #35
 744 052a 07D0     		beq	.L71
 745 052c 282B     		cmp	r3, #40
 746 052e 09D0     		beq	.L72
 747 0530 1E2B     		cmp	r3, #30
 748 0532 0BD1     		bne	.L74
 749              	.L70:
 340:openstack/02a-MAClow/IEEE802154Ecsl.c ****         // TX MODE
 341:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	    case S_CSLTXWAKEUP:            activity_csl_wakeup_ti5(capturedTime); break;
 750              		.loc 1 341 0
 751 0534 7868     		ldr	r0, [r7, #4]
 752 0536 FFF7FEFF 		bl	activity_csl_wakeup_ti5
 753 053a 1CE0     		b	.L68
 754              	.L71:
 342:openstack/02a-MAClow/IEEE802154Ecsl.c ****         case S_CSLTXDATA:              activity_csl_data_ti5(capturedTime);   break;
 755              		.loc 1 342 0
 756 053c 7868     		ldr	r0, [r7, #4]
 757 053e FFF7FEFF 		bl	activity_csl_data_ti5
 758 0542 18E0     		b	.L68
 759              	.L72:
 343:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	    case S_CSLRXACK:               activity_csl_data_ti9(capturedTime);   break;
 760              		.loc 1 343 0
 761 0544 7868     		ldr	r0, [r7, #4]
 762 0546 FFF7FEFF 		bl	activity_csl_data_ti9
 763 054a 14E0     		b	.L68
 764              	.L74:
 344:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	    default:
 345:openstack/02a-MAClow/IEEE802154Ecsl.c ****            // log the error
 346:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_ENDOFFRAME,
 347:openstack/02a-MAClow/IEEE802154Ecsl.c **** 			   				    (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_dbg.num_cslSamples)
 765              		.loc 1 347 0
 766 054c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 767 0550 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 768 0554 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 346:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_ENDOFFRAME,
 769              		.loc 1 346 0
 770 0556 1A46     		mov	r2, r3
 771              		.loc 1 347 0
 772 0558 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 773 055c C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 774 0560 1B69     		ldr	r3, [r3, #16]
 346:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_CSL_ENDOFFRAME,
 775              		.loc 1 346 0
 776 0562 9BB2     		uxth	r3, r3
 777 0564 4FF00900 		mov	r0, #9
 778 0568 4FF03F01 		mov	r1, #63
 779 056c FFF7FEFF 		bl	openserial_printError
 348:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	   // abort
 349:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   endOps();
 780              		.loc 1 349 0
 781 0570 FFF7FEFF 		bl	endOps
 350:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   break;
 782              		.loc 1 350 0
 783 0574 00BF     		nop
 784              	.L68:
 351:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  }
 352:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	}
 353:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_dbg.num_endOfFrame++;
 785              		.loc 1 353 0
 786 0576 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 787 057a C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 788 057e DB68     		ldr	r3, [r3, #12]
 789 0580 03F10102 		add	r2, r3, #1
 790 0584 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 791 0588 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 792 058c DA60     		str	r2, [r3, #12]
 354:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 793              		.loc 1 354 0
 794 058e 07F10807 		add	r7, r7, #8
 795 0592 BD46     		mov	sp, r7
 796 0594 80BD     		pop	{r7, pc}
 797              		.cfi_endproc
 798              	.LFE4:
 800 0596 00BF     		.align	2
 801              		.global	isr_ieee154ecsl_txtimer_cb
 802              		.thumb
 803              		.thumb_func
 805              	isr_ieee154ecsl_txtimer_cb:
 806              	.LFB5:
 355:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 356:openstack/02a-MAClow/IEEE802154Ecsl.c **** // tx timer interrupt callbacks
 357:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 358:openstack/02a-MAClow/IEEE802154Ecsl.c **** void isr_ieee154ecsl_txtimer_cb() {
 807              		.loc 1 358 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 1, uses_anonymous_args = 0
 811 0598 80B5     		push	{r7, lr}
 812              	.LCFI12:
 813              		.cfi_def_cfa_offset 8
 814              		.cfi_offset 7, -8
 815              		.cfi_offset 14, -4
 816 059a 00AF     		add	r7, sp, #0
 817              	.LCFI13:
 818              		.cfi_def_cfa_register 7
 359:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 360:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// Verificamos que no estamos ya en un proceso de TX o RX previo.
 361:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if(ieee154e_vars.cslMode == CSL_SLEEP_MODE) {
 819              		.loc 1 361 0
 820 059c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 821 05a0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 822 05a4 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 823 05a8 002B     		cmp	r3, #0
 824 05aa 02D1     		bne	.L76
 362:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // We call the first activity on FSM for channel sampling (CSL FSM RX mode)
 363:openstack/02a-MAClow/IEEE802154Ecsl.c ****       activity_csl_wakeup_ti1();
 825              		.loc 1 363 0
 826 05ac FFF7FEFF 		bl	activity_csl_wakeup_ti1
 827 05b0 12E0     		b	.L75
 828              	.L76:
 364:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 365:openstack/02a-MAClow/IEEE802154Ecsl.c ****    else {
 366:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // log the info about a operation in progress
 367:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  openserial_printInfo(COMPONENT_IEEE802154E,ERR_MAC_OPERATION_IN_PROGRESS,
 368:openstack/02a-MAClow/IEEE802154Ecsl.c **** 						  (errorparameter_t)ieee154e_vars.cslMode, (errorparameter_t)ieee154e_dbg.num_cslSamples);
 829              		.loc 1 368 0
 830 05b2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 831 05b6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 832 05ba 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 367:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  openserial_printInfo(COMPONENT_IEEE802154E,ERR_MAC_OPERATION_IN_PROGRESS,
 833              		.loc 1 367 0
 834 05be 1A46     		mov	r2, r3
 835              		.loc 1 368 0
 836 05c0 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 837 05c4 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 838 05c8 1B69     		ldr	r3, [r3, #16]
 367:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  openserial_printInfo(COMPONENT_IEEE802154E,ERR_MAC_OPERATION_IN_PROGRESS,
 839              		.loc 1 367 0
 840 05ca 9BB2     		uxth	r3, r3
 841 05cc 4FF00900 		mov	r0, #9
 842 05d0 4FF04001 		mov	r1, #64
 843 05d4 FFF7FEFF 		bl	openserial_printInfo
 844              	.L75:
 369:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 370:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 845              		.loc 1 370 0
 846 05d8 80BD     		pop	{r7, pc}
 847              		.cfi_endproc
 848              	.LFE5:
 850 05da 00BF     		.align	2
 851              		.global	isr_ieee154ecsl_addPacketToQueueForTestingCslTx_cb
 852              		.thumb
 853              		.thumb_func
 855              	isr_ieee154ecsl_addPacketToQueueForTestingCslTx_cb:
 856              	.LFB6:
 371:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 372:openstack/02a-MAClow/IEEE802154Ecsl.c **** // test timer interrupt callback to put a new packet on queue for testing CSL TX mode.
 373:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 374:openstack/02a-MAClow/IEEE802154Ecsl.c **** void isr_ieee154ecsl_addPacketToQueueForTestingCslTx_cb () {
 857              		.loc 1 374 0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 24
 860              		@ frame_needed = 1, uses_anonymous_args = 0
 861 05dc B0B5     		push	{r4, r5, r7, lr}
 862              	.LCFI14:
 863              		.cfi_def_cfa_offset 16
 864              		.cfi_offset 4, -16
 865              		.cfi_offset 5, -12
 866              		.cfi_offset 7, -8
 867              		.cfi_offset 14, -4
 868 05de 8AB0     		sub	sp, sp, #40
 869              	.LCFI15:
 870              		.cfi_def_cfa_offset 56
 871 05e0 04AF     		add	r7, sp, #16
 872              	.LCFI16:
 873              		.cfi_def_cfa 7, 40
 375:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 376:openstack/02a-MAClow/IEEE802154Ecsl.c ****   OpenQueueEntry_t* pkt;
 377:openstack/02a-MAClow/IEEE802154Ecsl.c ****   open_addr_t neighbor;
 378:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 379:openstack/02a-MAClow/IEEE802154Ecsl.c ****   // Simulate a ficticious address for CSL testing.
 380:openstack/02a-MAClow/IEEE802154Ecsl.c ****   neighbor.addr_64b[0]=0x00;
 874              		.loc 1 380 0
 875 05e2 4FF00003 		mov	r3, #0
 876 05e6 7B70     		strb	r3, [r7, #1]
 381:openstack/02a-MAClow/IEEE802154Ecsl.c ****   neighbor.addr_64b[1]=0x11;
 877              		.loc 1 381 0
 878 05e8 4FF01103 		mov	r3, #17
 879 05ec BB70     		strb	r3, [r7, #2]
 382:openstack/02a-MAClow/IEEE802154Ecsl.c ****   neighbor.addr_64b[2]=0x22;
 880              		.loc 1 382 0
 881 05ee 4FF02203 		mov	r3, #34
 882 05f2 FB70     		strb	r3, [r7, #3]
 383:openstack/02a-MAClow/IEEE802154Ecsl.c ****   neighbor.addr_64b[3]=0x33;
 883              		.loc 1 383 0
 884 05f4 4FF03303 		mov	r3, #51
 885 05f8 3B71     		strb	r3, [r7, #4]
 384:openstack/02a-MAClow/IEEE802154Ecsl.c ****   neighbor.addr_64b[4]=0x44;
 886              		.loc 1 384 0
 887 05fa 4FF04403 		mov	r3, #68
 888 05fe 7B71     		strb	r3, [r7, #5]
 385:openstack/02a-MAClow/IEEE802154Ecsl.c ****   neighbor.addr_64b[5]=0x55;
 889              		.loc 1 385 0
 890 0600 4FF05503 		mov	r3, #85
 891 0604 BB71     		strb	r3, [r7, #6]
 386:openstack/02a-MAClow/IEEE802154Ecsl.c ****   neighbor.addr_64b[6]=0x66;
 892              		.loc 1 386 0
 893 0606 4FF06603 		mov	r3, #102
 894 060a FB71     		strb	r3, [r7, #7]
 387:openstack/02a-MAClow/IEEE802154Ecsl.c ****   neighbor.addr_64b[7]=0x77;
 895              		.loc 1 387 0
 896 060c 4FF07703 		mov	r3, #119
 897 0610 3B72     		strb	r3, [r7, #8]
 388:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 389:openstack/02a-MAClow/IEEE802154Ecsl.c ****   neighbor.type=ADDR_64B;
 898              		.loc 1 389 0
 899 0612 4FF00203 		mov	r3, #2
 900 0616 3B70     		strb	r3, [r7, #0]
 390:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 391:openstack/02a-MAClow/IEEE802154Ecsl.c ****   // Switch off all the leds.
 392:openstack/02a-MAClow/IEEE802154Ecsl.c ****   leds_all_off();
 901              		.loc 1 392 0
 902 0618 FFF7FEFF 		bl	leds_all_off
 393:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 394:openstack/02a-MAClow/IEEE802154Ecsl.c ****   // CREATE DATA PACKET ONLY IF NOT ALREADY EXISTS ON QUEUE.
 395:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 396:openstack/02a-MAClow/IEEE802154Ecsl.c ****   if (openqueue_macGetDataPacket(&neighbor) == NULL) {
 903              		.loc 1 396 0
 904 061c 3B46     		mov	r3, r7
 905 061e 1846     		mov	r0, r3
 906 0620 FFF7FEFF 		bl	openqueue_macGetDataPacket
 907 0624 0346     		mov	r3, r0
 908 0626 002B     		cmp	r3, #0
 909 0628 6FD1     		bne	.L78
 397:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 398:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // get freebuffer.
 399:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  pkt = openqueue_getFreePacketBuffer(COMPONENT_IEEE802154E);
 910              		.loc 1 399 0
 911 062a 4FF00900 		mov	r0, #9
 912 062e FFF7FEFF 		bl	openqueue_getFreePacketBuffer
 913 0632 7861     		str	r0, [r7, #20]
 400:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  if(pkt==NULL) {
 914              		.loc 1 400 0
 915 0634 7B69     		ldr	r3, [r7, #20]
 916 0636 002B     		cmp	r3, #0
 917 0638 0CD1     		bne	.L80
 401:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		// registro del error & fin de operaciones.
 402:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		openserial_printError(COMPONENT_IEEE802154E,ERR_NO_FREE_PACKET_BUFFER, (errorparameter_t)0, (erro
 918              		.loc 1 402 0
 919 063a 4FF00900 		mov	r0, #9
 920 063e 4FF02C01 		mov	r1, #44
 921 0642 4FF00002 		mov	r2, #0
 922 0646 4FF00003 		mov	r3, #0
 923 064a FFF7FEFF 		bl	openserial_printError
 403:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		endOps();
 924              		.loc 1 403 0
 925 064e FFF7FEFF 		bl	endOps
 926 0652 5AE0     		b	.L78
 927              	.L80:
 404:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		return;
 405:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  }
 406:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 407:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // Declaración de propiedad sobre el paquete.
 408:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  pkt->creator = COMPONENT_SIXTOP_TO_IEEE802154E;
 928              		.loc 1 408 0
 929 0654 7B69     		ldr	r3, [r7, #20]
 930 0656 4FF00A02 		mov	r2, #10
 931 065a 1A70     		strb	r2, [r3, #0]
 409:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  pkt->owner   = COMPONENT_SIXTOP_TO_IEEE802154E;
 932              		.loc 1 409 0
 933 065c 7B69     		ldr	r3, [r7, #20]
 934 065e 4FF00A02 		mov	r2, #10
 935 0662 5A70     		strb	r2, [r3, #1]
 410:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 411:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // Frame type (data frame).
 412:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  pkt->l2_frameType=IEEE154_TYPE_DATA;
 936              		.loc 1 412 0
 937 0664 7B69     		ldr	r3, [r7, #20]
 938 0666 4FF00102 		mov	r2, #1
 939 066a 83F84920 		strb	r2, [r3, #73]
 413:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 414:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // Flag created only to discriminate and toggle led indicator.
 415:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  pkt->cslFlag=123;
 940              		.loc 1 415 0
 941 066e 7B69     		ldr	r3, [r7, #20]
 942 0670 4FF07B02 		mov	r2, #123
 943 0674 83F8ED20 		strb	r2, [r3, #237]
 416:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 417:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // Neighbor address.
 418:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  memcpy(&(pkt->l2_nextORpreviousHop),&neighbor,sizeof(open_addr_t));
 944              		.loc 1 418 0
 945 0678 7B69     		ldr	r3, [r7, #20]
 946 067a 03F13803 		add	r3, r3, #56
 947 067e 1D46     		mov	r5, r3
 948 0680 3C46     		mov	r4, r7
 949 0682 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 950 0684 2860     		str	r0, [r5, #0]	@ unaligned
 951 0686 6960     		str	r1, [r5, #4]	@ unaligned
 952 0688 AA60     		str	r2, [r5, #8]	@ unaligned
 953 068a EB60     		str	r3, [r5, #12]	@ unaligned
 954 068c 2378     		ldrb	r3, [r4, #0]
 955 068e 2B74     		strb	r3, [r5, #16]
 419:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 420:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // TX retries
 421:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  pkt->l2_retriesLeft = TXRETRIES;
 956              		.loc 1 421 0
 957 0690 7B69     		ldr	r3, [r7, #20]
 958 0692 4FF00302 		mov	r2, #3
 959 0696 83F84B20 		strb	r2, [r3, #75]
 422:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 423:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // record this packet's dsn (for matching the ACK)
 424:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  pkt->l2_dsn = ieee154e_vars.cslDSN++;
 960              		.loc 1 424 0
 961 069a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 962 069e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 963 06a2 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 964 06a6 7A69     		ldr	r2, [r7, #20]
 965 06a8 1946     		mov	r1, r3
 966 06aa 82F84A10 		strb	r1, [r2, #74]
 967 06ae 03F10103 		add	r3, r3, #1
 968 06b2 DAB2     		uxtb	r2, r3
 969 06b4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 970 06b8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 971 06bc 83F84420 		strb	r2, [r3, #68]
 425:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 426:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // this is a new packet which I never attempted to send
 427:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  pkt->l2_numTxAttempts = 0;
 972              		.loc 1 427 0
 973 06c0 7B69     		ldr	r3, [r7, #20]
 974 06c2 4FF00002 		mov	r2, #0
 975 06c6 83F84C20 		strb	r2, [r3, #76]
 428:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 429:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // transmit with the default TX power
 430:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  pkt->l1_txPower = TX_POWER;
 976              		.loc 1 430 0
 977 06ca 7B69     		ldr	r3, [r7, #20]
 978 06cc 4FF01F02 		mov	r2, #31
 979 06d0 83F86720 		strb	r2, [r3, #103]
 431:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 432:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // add a IEEE802.15.4 header
 433:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  ieee802154_prependHeader(pkt,
 434:openstack/02a-MAClow/IEEE802154Ecsl.c **** 							   pkt->l2_frameType,
 980              		.loc 1 434 0
 981 06d4 7B69     		ldr	r3, [r7, #20]
 433:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  ieee802154_prependHeader(pkt,
 982              		.loc 1 433 0
 983 06d6 93F84930 		ldrb	r3, [r3, #73]	@ zero_extendqisi2
 435:openstack/02a-MAClow/IEEE802154Ecsl.c **** 							   IEEE154_IELIST_NO,
 436:openstack/02a-MAClow/IEEE802154Ecsl.c **** 							   IEEE154_FRAMEVERSION,
 437:openstack/02a-MAClow/IEEE802154Ecsl.c **** 							   IEEE154_SEC_NO_SECURITY,
 438:openstack/02a-MAClow/IEEE802154Ecsl.c **** 							   pkt->l2_dsn,
 984              		.loc 1 438 0
 985 06da 7A69     		ldr	r2, [r7, #20]
 433:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  ieee802154_prependHeader(pkt,
 986              		.loc 1 433 0
 987 06dc 92F84A10 		ldrb	r1, [r2, #74]	@ zero_extendqisi2
 988 06e0 7A69     		ldr	r2, [r7, #20]
 989 06e2 02F13802 		add	r2, r2, #56
 990 06e6 4FF00000 		mov	r0, #0
 991 06ea 0090     		str	r0, [sp, #0]
 992 06ec 0191     		str	r1, [sp, #4]
 993 06ee 0292     		str	r2, [sp, #8]
 994 06f0 7869     		ldr	r0, [r7, #20]
 995 06f2 1946     		mov	r1, r3
 996 06f4 4FF00002 		mov	r2, #0
 997 06f8 4FF00203 		mov	r3, #2
 998 06fc FFF7FEFF 		bl	ieee802154_prependHeader
 439:openstack/02a-MAClow/IEEE802154Ecsl.c **** 							   &(pkt->l2_nextORpreviousHop)
 440:openstack/02a-MAClow/IEEE802154Ecsl.c **** 							   );
 441:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 442:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // reserve space for 2-byte CRC
 443:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  packetfunctions_reserveFooterSize(pkt,2);
 999              		.loc 1 443 0
 1000 0700 7869     		ldr	r0, [r7, #20]
 1001 0702 4FF00201 		mov	r1, #2
 1002 0706 FFF7FEFF 		bl	packetfunctions_reserveFooterSize
 1003              	.L78:
 444:openstack/02a-MAClow/IEEE802154Ecsl.c ****   }
 445:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 446:openstack/02a-MAClow/IEEE802154Ecsl.c ****   return;
 447:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1004              		.loc 1 447 0
 1005 070a 07F11807 		add	r7, r7, #24
 1006 070e BD46     		mov	sp, r7
 1007 0710 B0BD     		pop	{r4, r5, r7, pc}
 1008              		.cfi_endproc
 1009              	.LFE6:
 1011 0712 00BF     		.align	2
 1012              		.global	activity_csl_wakeup_ti1
 1013              		.thumb
 1014              		.thumb_func
 1016              	activity_csl_wakeup_ti1:
 1017              	.LFB7:
 448:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 449:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 450:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
 451:openstack/02a-MAClow/IEEE802154Ecsl.c **** //========================== CSL TX MODE ===============================
 452:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
 453:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 454:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 455:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [wake-up ti1].
 456:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 457:openstack/02a-MAClow/IEEE802154Ecsl.c ****  This method is invoked in ISR-mode from "isr_ieee154ecsl_txtimer_cb" function when TX Timer is fir
 458:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 459:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 460:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_ti1() {
 1018              		.loc 1 460 0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 24
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022 0714 80B5     		push	{r7, lr}
 1023              	.LCFI17:
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 7, -8
 1026              		.cfi_offset 14, -4
 1027 0716 86B0     		sub	sp, sp, #24
 1028              	.LCFI18:
 1029              		.cfi_def_cfa_offset 32
 1030 0718 00AF     		add	r7, sp, #0
 1031              	.LCFI19:
 1032              		.cfi_def_cfa_register 7
 461:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   cellType_t  cellType;
 462:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   open_addr_t neighbor;
 463:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 464:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // update CSL Mode to TX in order to avoid problems in FSM.
 465:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   ieee154e_vars.cslMode = CSL_TX_MODE;
 1033              		.loc 1 465 0
 1034 071a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1035 071e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1036 0722 4FF00202 		mov	r2, #2
 1037 0726 83F84520 		strb	r2, [r3, #69]
 466:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 467:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // Las acciones que realizaremos son las siguientes:
 468:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   //  - Avanzar el schedule para posicionar la siguiente posición en éste, el cual marcará la 
 469:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   //  - Verificar el estado actual dentro de la FSM para comprobar que efectivamente nos encontra
 470:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   //  - Si no hay problema en ambos, verificamos el tipo de slot en el schedule y preparamos un p
 471:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   //    destino asociado a dicho slot.
 472:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 473:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // increment ASN (do this first so debug pins are in sync)
 474:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   incrementAsnOffset();
 1038              		.loc 1 474 0
 1039 072a FFF7FEFF 		bl	incrementAsnOffset
 475:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 476:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // wiggle debug pins
 477:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   debugpins_slot_toggle();
 1040              		.loc 1 477 0
 1041 072e FFF7FEFF 		bl	debugpins_slot_toggle
 478:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   if (ieee154e_vars.slotOffset==0) {
 1042              		.loc 1 478 0
 1043 0732 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1044 0736 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1045 073a DB88     		ldrh	r3, [r3, #6]
 1046 073c 002B     		cmp	r3, #0
 1047 073e 01D1     		bne	.L83
 479:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      debugpins_frame_toggle();
 1048              		.loc 1 479 0
 1049 0740 FFF7FEFF 		bl	debugpins_frame_toggle
 1050              	.L83:
 480:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   }
 481:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 482:openstack/02a-MAClow/IEEE802154Ecsl.c ****        // if the previous slot took too long, we will not be in the right state
 483:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   if (ieee154e_vars.state!=S_SLEEP) {
 1051              		.loc 1 483 0
 1052 0744 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1053 0748 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1054 074c 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1055 074e 002B     		cmp	r3, #0
 1056 0750 14D0     		beq	.L84
 484:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      // log the error
 485:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_STARTSLOT,
 486:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	                            (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_dbg.
 1057              		.loc 1 486 0
 1058 0752 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1059 0756 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1060 075a 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 485:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_STARTSLOT,
 1061              		.loc 1 485 0
 1062 075c 1A46     		mov	r2, r3
 1063              		.loc 1 486 0
 1064 075e 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 1065 0762 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 1066 0766 1B69     		ldr	r3, [r3, #16]
 485:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_STARTSLOT,
 1067              		.loc 1 485 0
 1068 0768 9BB2     		uxth	r3, r3
 1069 076a 4FF00900 		mov	r0, #9
 1070 076e 4FF01E01 		mov	r1, #30
 1071 0772 FFF7FEFF 		bl	openserial_printError
 487:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      // abort
 488:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      endOps();
 1072              		.loc 1 488 0
 1073 0776 FFF7FEFF 		bl	endOps
 1074 077a 62E0     		b	.L82
 1075              	.L84:
 489:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	      return;
 490:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   }
 491:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 492:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // advance the schedule
 493:openstack/02a-MAClow/IEEE802154Ecsl.c ****        schedule_advanceSlot();
 1076              		.loc 1 493 0
 1077 077c FFF7FEFF 		bl	schedule_advanceSlot
 494:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 495:openstack/02a-MAClow/IEEE802154Ecsl.c ****        // stop using serial
 496:openstack/02a-MAClow/IEEE802154Ecsl.c ****        openserial_stop();
 1078              		.loc 1 496 0
 1079 0780 FFF7FEFF 		bl	openserial_stop
 497:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 498:openstack/02a-MAClow/IEEE802154Ecsl.c ****        // check the schedule to see what type of slot this is
 499:openstack/02a-MAClow/IEEE802154Ecsl.c ****        cellType = schedule_getType();
 1080              		.loc 1 499 0
 1081 0784 FFF7FEFF 		bl	schedule_getType
 1082 0788 0346     		mov	r3, r0
 1083 078a FB75     		strb	r3, [r7, #23]
 500:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 501:openstack/02a-MAClow/IEEE802154Ecsl.c ****        // check whether we can send
 502:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   if (schedule_getOkToSend()) {
 1084              		.loc 1 502 0
 1085 078c FFF7FEFF 		bl	schedule_getOkToSend
 1086 0790 0346     		mov	r3, r0
 1087 0792 002B     		cmp	r3, #0
 1088 0794 10D0     		beq	.L86
 503:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       schedule_getNeighbor(&neighbor);
 1089              		.loc 1 503 0
 1090 0796 07F10403 		add	r3, r7, #4
 1091 079a 1846     		mov	r0, r3
 1092 079c FFF7FEFF 		bl	schedule_getNeighbor
 504:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       ieee154e_vars.dataToSend = openqueue_macGetDataPacket(&neighbor);
 1093              		.loc 1 504 0
 1094 07a0 07F10403 		add	r3, r7, #4
 1095 07a4 1846     		mov	r0, r3
 1096 07a6 FFF7FEFF 		bl	openqueue_macGetDataPacket
 1097 07aa 0246     		mov	r2, r0
 1098 07ac 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1099 07b0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1100 07b4 5A61     		str	r2, [r3, #20]
 1101 07b6 06E0     		b	.L87
 1102              	.L86:
 505:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   } else {
 506:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       ieee154e_vars.dataToSend = NULL;
 1103              		.loc 1 506 0
 1104 07b8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1105 07bc C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1106 07c0 4FF00002 		mov	r2, #0
 1107 07c4 5A61     		str	r2, [r3, #20]
 1108              	.L87:
 507:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   }
 508:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   if((ieee154e_vars.dataToSend!=NULL) && (cellType == CELLTYPE_TX)) {   // If I have a packet to 
 1109              		.loc 1 508 0
 1110 07c6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1111 07ca C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1112 07ce 5B69     		ldr	r3, [r3, #20]
 1113 07d0 002B     		cmp	r3, #0
 1114 07d2 2ED0     		beq	.L88
 1115              		.loc 1 508 0 is_stmt 0 discriminator 1
 1116 07d4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1117 07d6 022B     		cmp	r3, #2
 1118 07d8 2BD1     		bne	.L88
 509:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       // change state to start sending CSL preamble before send the data packet.
 510:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       changeState(S_CSLTXWAKEUPOFFSET);
 1119              		.loc 1 510 0 is_stmt 1
 1120 07da 4FF01A00 		mov	r0, #26
 1121 07de FFF7FEFF 		bl	changeState
 511:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       // Establecemos el tiempo de rendezvous que será necesario esperar. Como se trata de una T
 512:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       // no sincronizada, deberá ser un tiempo igual a macCSLMaxPeriod (por eso cuando venza
 513:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       // el timing DURATION_tt1, solo nos quedará el tiempo macCSLMaxPeriod.
 514:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       ieee154e_vars.rzTime = DURATION_tt1 + macCSLMaxPeriod;
 1122              		.loc 1 514 0
 1123 07e2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1124 07e6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1125 07ea 5B6A     		ldr	r3, [r3, #36]
 1126 07ec 9BB2     		uxth	r3, r3
 1127 07ee 03F5CE53 		add	r3, r3, #6592
 1128 07f2 03F11403 		add	r3, r3, #20
 1129 07f6 9AB2     		uxth	r2, r3
 1130 07f8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1131 07fc C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1132 0800 A3F84820 		strh	r2, [r3, #72]	@ movhi
 515:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       // change owner
 516:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       //ieee154e_vars.dataToSend->owner = COMPONENT_IEEE802154E;
 517:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       // record that I will attempt to transmit this packet
 518:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       ieee154e_vars.dataToSend->l2_numTxAttempts++;
 1133              		.loc 1 518 0
 1134 0804 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1135 0808 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1136 080c 5B69     		ldr	r3, [r3, #20]
 1137 080e 93F84C20 		ldrb	r2, [r3, #76]	@ zero_extendqisi2
 1138 0812 02F10102 		add	r2, r2, #1
 1139 0816 D2B2     		uxtb	r2, r2
 1140 0818 83F84C20 		strb	r2, [r3, #76]
 519:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       // arm tt1
 520:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       radiotimer_schedule(DURATION_tt1);
 1141              		.loc 1 520 0
 1142 081c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1143 0820 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1144 0824 5B6A     		ldr	r3, [r3, #36]
 1145 0826 03F13A03 		add	r3, r3, #58
 1146 082a 1846     		mov	r0, r3
 1147 082c FFF7FEFF 		bl	radiotimer_schedule
 1148 0830 07E0     		b	.L82
 1149              	.L88:
 521:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   } else {
 522:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	       // abort because slot is not TX or there is no data to send, so we reset TX Mode state
 523:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   ieee154e_vars.cslMode = CSL_SLEEP_MODE;
 1150              		.loc 1 523 0
 1151 0832 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1152 0836 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1153 083a 4FF00002 		mov	r2, #0
 1154 083e 83F84520 		strb	r2, [r3, #69]
 1155              	.L82:
 524:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   }
 525:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1156              		.loc 1 525 0
 1157 0842 07F11807 		add	r7, r7, #24
 1158 0846 BD46     		mov	sp, r7
 1159 0848 80BD     		pop	{r7, pc}
 1160              		.cfi_endproc
 1161              	.LFE7:
 1163 084a 00BF     		.align	2
 1164              		.global	activity_csl_wakeup_ti2
 1165              		.thumb
 1166              		.thumb_func
 1168              	activity_csl_wakeup_ti2:
 1169              	.LFB8:
 526:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 527:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 528:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [wake-up ti2].
 529:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 530:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
 531:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to prepare the radio for sending packets.
 532:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 533:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 534:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_ti2() {
 1170              		.loc 1 534 0
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 24
 1173              		@ frame_needed = 1, uses_anonymous_args = 0
 1174 084c 80B5     		push	{r7, lr}
 1175              	.LCFI20:
 1176              		.cfi_def_cfa_offset 8
 1177              		.cfi_offset 7, -8
 1178              		.cfi_offset 14, -4
 1179 084e 86B0     		sub	sp, sp, #24
 1180              	.LCFI21:
 1181              		.cfi_def_cfa_offset 32
 1182 0850 00AF     		add	r7, sp, #0
 1183              	.LCFI22:
 1184              		.cfi_def_cfa_register 7
 535:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 536:openstack/02a-MAClow/IEEE802154Ecsl.c ****    open_addr_t neighbor;
 537:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 538:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 539:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXWAKEUPPREPARE);
 1185              		.loc 1 539 0
 1186 0852 4FF01B00 		mov	r0, #27
 1187 0856 FFF7FEFF 		bl	changeState
 540:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 541:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Calculamos el valor del rz-time en cada trama wake-up de la secuencia dado que debe ir reduci
 542:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // al extemo remoto el tiempo restante hasta el envío de la trama de datos.
 543:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 544:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // El tiempo lastCapturedTime se ve incrementado tras el envio de cada trama wake-up por lo que 
 545:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // valor más proximo al rztime inicial (macCSLMaxPeriod).
 546:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 547:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.remainingRzTime = ieee154e_vars.rzTime - ieee154e_vars.lastCapturedTime;
 1188              		.loc 1 547 0
 1189 085a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1190 085e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1191 0862 B3F84820 		ldrh	r2, [r3, #72]
 1192 0866 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1193 086a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1194 086e 5B6A     		ldr	r3, [r3, #36]
 1195 0870 9BB2     		uxth	r3, r3
 1196 0872 D31A     		subs	r3, r2, r3
 1197 0874 9AB2     		uxth	r2, r3
 1198 0876 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1199 087a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1200 087e A3F84A20 		strh	r2, [r3, #74]	@ movhi
 548:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 549:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //
 550:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Construimos el paquete Wake-Up con su valor RZTime asociado en caso de no existir ya.
 551:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //
 552:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 553:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.wakeupToSend == NULL) { // first time
 1201              		.loc 1 553 0
 1202 0882 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1203 0886 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1204 088a DB6B     		ldr	r3, [r3, #60]
 1205 088c 002B     		cmp	r3, #0
 1206 088e 7FD1     		bne	.L91
 554:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 555:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // obtenemos un buffer en el cual poder guardar los datos recibidos.
 556:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   ieee154e_vars.wakeupToSend = openqueue_getFreePacketBuffer(COMPONENT_IEEE802154E);
 1207              		.loc 1 556 0
 1208 0890 4FF00900 		mov	r0, #9
 1209 0894 FFF7FEFF 		bl	openqueue_getFreePacketBuffer
 1210 0898 0246     		mov	r2, r0
 1211 089a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1212 089e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1213 08a2 DA63     		str	r2, [r3, #60]
 557:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   if (ieee154e_vars.wakeupToSend==NULL) {
 1214              		.loc 1 557 0
 1215 08a4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1216 08a8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1217 08ac DB6B     		ldr	r3, [r3, #60]
 1218 08ae 002B     		cmp	r3, #0
 1219 08b0 0CD1     		bne	.L92
 558:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  // registro del error & fin de operaciones.
 559:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  openserial_printError(COMPONENT_IEEE802154E,ERR_NO_FREE_PACKET_BUFFER, (errorparameter_t)0, (er
 1220              		.loc 1 559 0
 1221 08b2 4FF00900 		mov	r0, #9
 1222 08b6 4FF02C01 		mov	r1, #44
 1223 08ba 4FF00002 		mov	r2, #0
 1224 08be 4FF00003 		mov	r3, #0
 1225 08c2 FFF7FEFF 		bl	openserial_printError
 560:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  endOps();
 1226              		.loc 1 560 0
 1227 08c6 FFF7FEFF 		bl	endOps
 1228 08ca A0E0     		b	.L90
 1229              	.L92:
 561:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  return;
 562:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   }
 563:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 564:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // Declaración de propiedad sobre el paquete.
 565:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   ieee154e_vars.wakeupToSend->creator = COMPONENT_IEEE802154E;
 1230              		.loc 1 565 0
 1231 08cc 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1232 08d0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1233 08d4 DB6B     		ldr	r3, [r3, #60]
 1234 08d6 4FF00902 		mov	r2, #9
 1235 08da 1A70     		strb	r2, [r3, #0]
 566:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   ieee154e_vars.wakeupToSend->owner   = COMPONENT_IEEE802154E;
 1236              		.loc 1 566 0
 1237 08dc 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1238 08e0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1239 08e4 DB6B     		ldr	r3, [r3, #60]
 1240 08e6 4FF00902 		mov	r2, #9
 1241 08ea 5A70     		strb	r2, [r3, #1]
 567:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 568:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // El tipo de trama es Multipurpose.
 569:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   ieee154e_vars.wakeupToSend->l2_frameType = IEEE154_TYPE_MULTIPURPOSE;
 1242              		.loc 1 569 0
 1243 08ec 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1244 08f0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1245 08f4 DB6B     		ldr	r3, [r3, #60]
 1246 08f6 4FF00502 		mov	r2, #5
 1247 08fa 83F84920 		strb	r2, [r3, #73]
 570:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 571:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // El dsn del paquete lo obtenemos a partir del actual DSN incrementado en cada paquete de la s
 572:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   ieee154e_vars.wakeupToSend->l2_dsn = ieee154e_vars.cslDSN++;
 1248              		.loc 1 572 0
 1249 08fe 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1250 0902 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1251 0906 DA6B     		ldr	r2, [r3, #60]
 1252 0908 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1253 090c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1254 0910 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 1255 0914 1946     		mov	r1, r3
 1256 0916 82F84A10 		strb	r1, [r2, #74]
 1257 091a 03F10103 		add	r3, r3, #1
 1258 091e DAB2     		uxtb	r2, r3
 1259 0920 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1260 0924 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1261 0928 83F84420 		strb	r2, [r3, #68]
 573:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 574:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // El destinatario es el mismo que el destinatario del mensaje de datos indicado en el schedule
 575:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   schedule_getNeighbor(&neighbor);
 1262              		.loc 1 575 0
 1263 092c 07F10403 		add	r3, r7, #4
 1264 0930 1846     		mov	r0, r3
 1265 0932 FFF7FEFF 		bl	schedule_getNeighbor
 576:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 577:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // Verificamos que se trata de una dirección corta (short address). En caso contrario generamo
 578:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   if(neighbor.type != ADDR_16B) {
 1266              		.loc 1 578 0
 1267 0936 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 1268 0938 012B     		cmp	r3, #1
 1269 093a 08D0     		beq	.L94
 579:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   // CSL: This is an invalid address because address in wake-up frame must be short address.
 580:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   // We do not finish operations but we will use later short address getting it from long addres
 581:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		   openserial_printInfo(COMPONENT_IEEE802154,ERR_IEEE154_UNSUPPORTED, (errorparameter_t)1, (error
 1270              		.loc 1 581 0
 1271 093c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 1272 093e 4FF00800 		mov	r0, #8
 1273 0942 4FF01901 		mov	r1, #25
 1274 0946 4FF00102 		mov	r2, #1
 1275 094a FFF7FEFF 		bl	openserial_printInfo
 1276              	.L94:
 582:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   }
 583:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 584:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // create frame header.
 585:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   ieee802154_createWakeUpFrame(ieee154e_vars.wakeupToSend,
 1277              		.loc 1 585 0
 1278 094e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1279 0952 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1280 0956 D86B     		ldr	r0, [r3, #60]
 586:openstack/02a-MAClow/IEEE802154Ecsl.c **** 									ieee154e_vars.wakeupToSend->l2_dsn,
 1281              		.loc 1 586 0
 1282 0958 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1283 095c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1284 0960 DB6B     		ldr	r3, [r3, #60]
 585:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   ieee802154_createWakeUpFrame(ieee154e_vars.wakeupToSend,
 1285              		.loc 1 585 0
 1286 0962 93F84A10 		ldrb	r1, [r3, #74]	@ zero_extendqisi2
 1287 0966 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1288 096a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1289 096e B3F84A30 		ldrh	r3, [r3, #74]
 1290 0972 07F10402 		add	r2, r7, #4
 1291 0976 FFF7FEFF 		bl	ieee802154_createWakeUpFrame
 587:openstack/02a-MAClow/IEEE802154Ecsl.c **** 									&neighbor,
 588:openstack/02a-MAClow/IEEE802154Ecsl.c **** 									ieee154e_vars.remainingRzTime);
 589:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 590:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // space for 2-byte CRC
 591:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   packetfunctions_reserveFooterSize(ieee154e_vars.wakeupToSend,2);
 1292              		.loc 1 591 0
 1293 097a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1294 097e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1295 0982 DB6B     		ldr	r3, [r3, #60]
 1296 0984 1846     		mov	r0, r3
 1297 0986 4FF00201 		mov	r1, #2
 1298 098a FFF7FEFF 		bl	packetfunctions_reserveFooterSize
 1299 098e 0EE0     		b	.L95
 1300              	.L91:
 592:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 593:openstack/02a-MAClow/IEEE802154Ecsl.c ****    else {
 594:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // update rztime in header.
 595:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // Se posiciona 8 posiciones antes dado que estamos escribiendo el paquete de atras hacia delan
 596:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // - 1 byte FCF
 597:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // - 1 byte SEQ
 598:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // - 2 bytes PANID
 599:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // - 2 bytes DEST ADDR
 600:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // - 2 bytes RZTIME IE HEADER
 601:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // - 2 bytes RZTIME (el cual se sobrescribirá con el nuevo valor).
 602:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	    *((uint16_t*)(ieee154e_vars.wakeupToSend->payload+8)) = ieee154e_vars.remainingRzTime;
 1301              		.loc 1 602 0
 1302 0990 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1303 0994 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1304 0998 DB6B     		ldr	r3, [r3, #60]
 1305 099a 5B68     		ldr	r3, [r3, #4]
 1306 099c 03F10802 		add	r2, r3, #8
 1307 09a0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1308 09a4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1309 09a8 B3F84A30 		ldrh	r3, [r3, #74]
 1310 09ac 1380     		strh	r3, [r2, #0]	@ movhi
 1311              	.L95:
 603:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 604:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 605:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 606:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // load the packet in the radio's Tx buffer
 607:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_loadPacket(ieee154e_vars.wakeupToSend->payload, ieee154e_vars.wakeupToSend->length);
 1312              		.loc 1 607 0
 1313 09ae 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1314 09b2 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1315 09b6 DB6B     		ldr	r3, [r3, #60]
 1316 09b8 5A68     		ldr	r2, [r3, #4]
 1317 09ba 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1318 09be C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1319 09c2 DB6B     		ldr	r3, [r3, #60]
 1320 09c4 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1321 09c6 1046     		mov	r0, r2
 1322 09c8 1946     		mov	r1, r3
 1323 09ca FFF7FEFF 		bl	radio_loadPacket
 608:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 609:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // enable the radio in Tx mode. This does not send the packet.
 610:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_txEnable();
 1324              		.loc 1 610 0
 1325 09ce FFF7FEFF 		bl	radio_txEnable
 611:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnInit=radio_getTimerValue();
 1326              		.loc 1 611 0
 1327 09d2 FFF7FEFF 		bl	radio_getTimerValue
 1328 09d6 0246     		mov	r2, r0
 1329 09d8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1330 09dc C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1331 09e0 1A63     		str	r2, [r3, #48]
 612:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnThisSlot=TRUE;
 1332              		.loc 1 612 0
 1333 09e2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1334 09e6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1335 09ea 4FF00102 		mov	r2, #1
 1336 09ee 83F83820 		strb	r2, [r3, #56]
 613:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 614:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm tt2
 615:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_tt2);
 1337              		.loc 1 615 0
 1338 09f2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1339 09f6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1340 09fa 5B6A     		ldr	r3, [r3, #36]
 1341 09fc 03F17C03 		add	r3, r3, #124
 1342 0a00 1846     		mov	r0, r3
 1343 0a02 FFF7FEFF 		bl	radiotimer_schedule
 616:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 617:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 618:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXWAKEUPREADY);
 1344              		.loc 1 618 0
 1345 0a06 4FF01C00 		mov	r0, #28
 1346 0a0a FFF7FEFF 		bl	changeState
 1347              	.L90:
 619:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1348              		.loc 1 619 0
 1349 0a0e 07F11807 		add	r7, r7, #24
 1350 0a12 BD46     		mov	sp, r7
 1351 0a14 80BD     		pop	{r7, pc}
 1352              		.cfi_endproc
 1353              	.LFE8:
 1355 0a16 00BF     		.align	2
 1356              		.global	activity_csl_wakeup_tie1
 1357              		.thumb
 1358              		.thumb_func
 1360              	activity_csl_wakeup_tie1:
 1361              	.LFB9:
 620:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 621:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 622:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [wake-up tie1].
 623:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 624:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #tt2 expiring, i.e. timer fires while state = S_CSLTXWAKEUPPREPARE. This is 
 625:openstack/02a-MAClow/IEEE802154Ecsl.c ****   did not have enough time to execute. Chances are to set maxTxDataPrepare too small. The implement
 626:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 627:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_tie1() {
 1362              		.loc 1 627 0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 0
 1365              		@ frame_needed = 1, uses_anonymous_args = 0
 1366 0a18 80B5     		push	{r7, lr}
 1367              	.LCFI23:
 1368              		.cfi_def_cfa_offset 8
 1369              		.cfi_offset 7, -8
 1370              		.cfi_offset 14, -4
 1371 0a1a 00AF     		add	r7, sp, #0
 1372              	.LCFI24:
 1373              		.cfi_def_cfa_register 7
 628:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
 629:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXTXDATAPREPARE_OVERFLOW,
 630:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_vars.slo
 1374              		.loc 1 630 0
 1375 0a1c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1376 0a20 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1377 0a24 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 629:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXTXDATAPREPARE_OVERFLOW,
 1378              		.loc 1 629 0
 1379 0a26 1A46     		mov	r2, r3
 1380 0a28 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1381 0a2c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1382 0a30 DB88     		ldrh	r3, [r3, #6]
 1383 0a32 4FF00900 		mov	r0, #9
 1384 0a36 4FF02201 		mov	r1, #34
 1385 0a3a FFF7FEFF 		bl	openserial_printError
 631:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 632:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
 633:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //endOps();
 634:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1386              		.loc 1 634 0
 1387 0a3e 80BD     		pop	{r7, pc}
 1388              		.cfi_endproc
 1389              	.LFE9:
 1391              		.align	2
 1392              		.global	activity_csl_wakeup_ti3
 1393              		.thumb
 1394              		.thumb_func
 1396              	activity_csl_wakeup_ti3:
 1397              	.LFB10:
 635:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 636:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 637:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [wake-up ti3].
 638:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 639:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
 640:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The radio is configured and this interrupt gives it the "go" signal to start listening.
 641:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 642:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 643:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_ti3() {
 1398              		.loc 1 643 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 0
 1401              		@ frame_needed = 1, uses_anonymous_args = 0
 1402 0a40 80B5     		push	{r7, lr}
 1403              	.LCFI25:
 1404              		.cfi_def_cfa_offset 8
 1405              		.cfi_offset 7, -8
 1406              		.cfi_offset 14, -4
 1407 0a42 00AF     		add	r7, sp, #0
 1408              	.LCFI26:
 1409              		.cfi_def_cfa_register 7
 644:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 645:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXWAKEUPDELAY);
 1410              		.loc 1 645 0
 1411 0a44 4FF01D00 		mov	r0, #29
 1412 0a48 FFF7FEFF 		bl	changeState
 646:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 647:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm tt3
 648:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_tt3);
 1413              		.loc 1 648 0
 1414 0a4c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1415 0a50 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1416 0a54 5B6A     		ldr	r3, [r3, #36]
 1417 0a56 03F19D03 		add	r3, r3, #157
 1418 0a5a 1846     		mov	r0, r3
 1419 0a5c FFF7FEFF 		bl	radiotimer_schedule
 649:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 650:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // give the 'go' to transmit
 651:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_txNow();
 1420              		.loc 1 651 0
 1421 0a60 FFF7FEFF 		bl	radio_txNow
 652:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1422              		.loc 1 652 0
 1423 0a64 80BD     		pop	{r7, pc}
 1424              		.cfi_endproc
 1425              	.LFE10:
 1427 0a66 00BF     		.align	2
 1428              		.global	activity_csl_wakeup_tie2
 1429              		.thumb
 1430              		.thumb_func
 1432              	activity_csl_wakeup_tie2:
 1433              	.LFB11:
 653:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 654:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 655:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [wakeup tie2].
 656:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 657:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #tt3 expiring, i.e. timer fires while state = S_CSLTXWAKEUPDELAY. If no pack
 658:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 659:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_tie2() {
 1434              		.loc 1 659 0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 0
 1437              		@ frame_needed = 1, uses_anonymous_args = 0
 1438 0a68 80B5     		push	{r7, lr}
 1439              	.LCFI27:
 1440              		.cfi_def_cfa_offset 8
 1441              		.cfi_offset 7, -8
 1442              		.cfi_offset 14, -4
 1443 0a6a 00AF     		add	r7, sp, #0
 1444              	.LCFI28:
 1445              		.cfi_def_cfa_register 7
 660:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
 661:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDRADIO_OVERFLOWS,
 662:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_vars.slo
 1446              		.loc 1 662 0
 1447 0a6c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1448 0a70 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1449 0a74 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 661:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDRADIO_OVERFLOWS,
 1450              		.loc 1 661 0
 1451 0a76 1A46     		mov	r2, r3
 1452 0a78 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1453 0a7c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1454 0a80 DB88     		ldrh	r3, [r3, #6]
 1455 0a82 4FF00900 		mov	r0, #9
 1456 0a86 4FF02701 		mov	r1, #39
 1457 0a8a FFF7FEFF 		bl	openserial_printError
 663:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
 664:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //endOps();
 665:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1458              		.loc 1 665 0
 1459 0a8e 80BD     		pop	{r7, pc}
 1460              		.cfi_endproc
 1461              	.LFE11:
 1463              		.align	2
 1464              		.global	activity_csl_wakeup_ti4
 1465              		.thumb
 1466              		.thumb_func
 1468              	activity_csl_wakeup_ti4:
 1469              	.LFB12:
 666:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 667:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 668:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [wake-up ti4].
 669:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 670:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_startOfFrame" function when a start of frame ev
 671:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to capture the time, cancel #tt3 and arm #tt4 (max time to send all the pack
 672:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 673:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_ti4(PORT_RADIOTIMER_WIDTH capturedTime) {
 1470              		.loc 1 673 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 8
 1473              		@ frame_needed = 1, uses_anonymous_args = 0
 1474 0a90 80B5     		push	{r7, lr}
 1475              	.LCFI29:
 1476              		.cfi_def_cfa_offset 8
 1477              		.cfi_offset 7, -8
 1478              		.cfi_offset 14, -4
 1479 0a92 82B0     		sub	sp, sp, #8
 1480              	.LCFI30:
 1481              		.cfi_def_cfa_offset 16
 1482 0a94 00AF     		add	r7, sp, #0
 1483              	.LCFI31:
 1484              		.cfi_def_cfa_register 7
 1485 0a96 7860     		str	r0, [r7, #4]
 674:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 675:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancel tt3
 676:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 1486              		.loc 1 676 0
 1487 0a98 FFF7FEFF 		bl	radiotimer_cancel
 677:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 678:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time
 679:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.lastCapturedTime = capturedTime;
 1488              		.loc 1 679 0
 1489 0a9c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1490 0aa0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1491 0aa4 7A68     		ldr	r2, [r7, #4]
 1492 0aa6 5A62     		str	r2, [r3, #36]
 680:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 681:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 682:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXWAKEUP);
 1493              		.loc 1 682 0
 1494 0aa8 4FF01E00 		mov	r0, #30
 1495 0aac FFF7FEFF 		bl	changeState
 683:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 684:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm tt4
 685:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_tt4);
 1496              		.loc 1 685 0
 1497 0ab0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1498 0ab4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1499 0ab8 5B6A     		ldr	r3, [r3, #36]
 1500 0aba 03F1A403 		add	r3, r3, #164
 1501 0abe 1846     		mov	r0, r3
 1502 0ac0 FFF7FEFF 		bl	radiotimer_schedule
 686:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1503              		.loc 1 686 0
 1504 0ac4 07F10807 		add	r7, r7, #8
 1505 0ac8 BD46     		mov	sp, r7
 1506 0aca 80BD     		pop	{r7, pc}
 1507              		.cfi_endproc
 1508              	.LFE12:
 1510              		.align	2
 1511              		.global	activity_csl_wakeup_tie3
 1512              		.thumb
 1513              		.thumb_func
 1515              	activity_csl_wakeup_tie3:
 1516              	.LFB13:
 687:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 688:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 689:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [wake-up tie3].
 690:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 691:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #tt4 expiring, i.e. timer fires while state = S_CSLTXWAKEUP. This is an erro
 692:openstack/02a-MAClow/IEEE802154Ecsl.c ****   took too long to transmit the data packet. The implemented behaviour is to log the error and fini
 693:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 694:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_tie3() {
 1517              		.loc 1 694 0
 1518              		.cfi_startproc
 1519              		@ args = 0, pretend = 0, frame = 0
 1520              		@ frame_needed = 1, uses_anonymous_args = 0
 1521 0acc 80B5     		push	{r7, lr}
 1522              	.LCFI32:
 1523              		.cfi_def_cfa_offset 8
 1524              		.cfi_offset 7, -8
 1525              		.cfi_offset 14, -4
 1526 0ace 00AF     		add	r7, sp, #0
 1527              	.LCFI33:
 1528              		.cfi_def_cfa_register 7
 695:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
 696:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDDATADURATION_OVERFLOWS,
 697:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_vars.slo
 1529              		.loc 1 697 0
 1530 0ad0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1531 0ad4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1532 0ad8 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 696:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDDATADURATION_OVERFLOWS,
 1533              		.loc 1 696 0
 1534 0ada 1A46     		mov	r2, r3
 1535 0adc 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1536 0ae0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1537 0ae4 DB88     		ldrh	r3, [r3, #6]
 1538 0ae6 4FF00900 		mov	r0, #9
 1539 0aea 4FF02601 		mov	r1, #38
 1540 0aee FFF7FEFF 		bl	openserial_printError
 698:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
 699:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //endOps();
 700:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1541              		.loc 1 700 0
 1542 0af2 80BD     		pop	{r7, pc}
 1543              		.cfi_endproc
 1544              	.LFE13:
 1546              		.align	2
 1547              		.global	activity_csl_wakeup_ti5
 1548              		.thumb
 1549              		.thumb_func
 1551              	activity_csl_wakeup_ti5:
 1552              	.LFB14:
 701:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 702:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 703:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 704:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [wake-up ri5].
 705:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 706:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_endOfFrame" function when a end of frame event 
 707:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to change state, cancel #rt4, and start sending data frame and wait for ACK.
 708:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 709:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_ti5(PORT_RADIOTIMER_WIDTH capturedTime) {
 1553              		.loc 1 709 0
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 8
 1556              		@ frame_needed = 1, uses_anonymous_args = 0
 1557 0af4 80B5     		push	{r7, lr}
 1558              	.LCFI34:
 1559              		.cfi_def_cfa_offset 8
 1560              		.cfi_offset 7, -8
 1561              		.cfi_offset 14, -4
 1562 0af6 82B0     		sub	sp, sp, #8
 1563              	.LCFI35:
 1564              		.cfi_def_cfa_offset 16
 1565 0af8 00AF     		add	r7, sp, #0
 1566              	.LCFI36:
 1567              		.cfi_def_cfa_register 7
 1568 0afa 7860     		str	r0, [r7, #4]
 710:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 711:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// record the captured time
 712:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	ieee154e_vars.lastCapturedTime = capturedTime;
 1569              		.loc 1 712 0
 1570 0afc 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1571 0b00 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1572 0b04 7A68     		ldr	r2, [r7, #4]
 1573 0b06 5A62     		str	r2, [r3, #36]
 713:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 714:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// Mientras el tiempo capturado en el envío de la ultima trama wake-up de la trama wake-up sequen
 715:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// sea inferior al tiempo de la duración del rztime inicial, debemos seguir enviando tramas wake-
 716:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// En caso contrario, enviamos la trama de datos.
 717:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 718:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	if((ieee154e_vars.rzTime - ieee154e_vars.lastCapturedTime) < ieee154e_vars.remainingRzTime) {
 1574              		.loc 1 718 0
 1575 0b08 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1576 0b0c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1577 0b10 B3F84830 		ldrh	r3, [r3, #72]
 1578 0b14 1A46     		mov	r2, r3
 1579 0b16 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1580 0b1a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1581 0b1e 5B6A     		ldr	r3, [r3, #36]
 1582 0b20 D21A     		subs	r2, r2, r3
 1583 0b22 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1584 0b26 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1585 0b2a B3F84A30 		ldrh	r3, [r3, #74]
 1586 0b2e 9A42     		cmp	r2, r3
 1587 0b30 04D2     		bcs	.L102
 719:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   changeState(S_CSLTXWAKEUPOFFSET);
 1588              		.loc 1 719 0
 1589 0b32 4FF01A00 		mov	r0, #26
 1590 0b36 FFF7FEFF 		bl	changeState
 1591 0b3a 03E0     		b	.L103
 1592              	.L102:
 720:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	}
 721:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	else {
 722:openstack/02a-MAClow/IEEE802154Ecsl.c ****        changeState(S_CSLTXDATAOFFSET);
 1593              		.loc 1 722 0
 1594 0b3c 4FF01F00 		mov	r0, #31
 1595 0b40 FFF7FEFF 		bl	changeState
 1596              	.L103:
 723:openstack/02a-MAClow/IEEE802154Ecsl.c ****     }
 724:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 725:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm tt1 (enviemos de nuevo una trama de wake-up o de datos, el tiempo será tt1).
 726:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_tt1);
 1597              		.loc 1 726 0
 1598 0b44 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1599 0b48 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1600 0b4c 5B6A     		ldr	r3, [r3, #36]
 1601 0b4e 03F13A03 		add	r3, r3, #58
 1602 0b52 1846     		mov	r0, r3
 1603 0b54 FFF7FEFF 		bl	radiotimer_schedule
 727:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1604              		.loc 1 727 0
 1605 0b58 07F10807 		add	r7, r7, #8
 1606 0b5c BD46     		mov	sp, r7
 1607 0b5e 80BD     		pop	{r7, pc}
 1608              		.cfi_endproc
 1609              	.LFE14:
 1611              		.align	2
 1612              		.global	activity_csl_data_ti2
 1613              		.thumb
 1614              		.thumb_func
 1616              	activity_csl_data_ti2:
 1617              	.LFB15:
 728:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 729:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 730:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 731:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data ti2].
 732:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 733:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
 734:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to prepare the radio for sending packets.
 735:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 736:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ti2() {
 1618              		.loc 1 736 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 0
 1621              		@ frame_needed = 1, uses_anonymous_args = 0
 1622 0b60 80B5     		push	{r7, lr}
 1623              	.LCFI37:
 1624              		.cfi_def_cfa_offset 8
 1625              		.cfi_offset 7, -8
 1626              		.cfi_offset 14, -4
 1627 0b62 00AF     		add	r7, sp, #0
 1628              	.LCFI38:
 1629              		.cfi_def_cfa_register 7
 737:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 738:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXDATAPREPARE);
 1630              		.loc 1 738 0
 1631 0b64 4FF02000 		mov	r0, #32
 1632 0b68 FFF7FEFF 		bl	changeState
 739:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 740:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // load the packet in the radio's Tx buffer
 741:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_loadPacket(ieee154e_vars.dataToSend->payload,
 1633              		.loc 1 741 0
 1634 0b6c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1635 0b70 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1636 0b74 5B69     		ldr	r3, [r3, #20]
 1637 0b76 5A68     		ldr	r2, [r3, #4]
 742:openstack/02a-MAClow/IEEE802154Ecsl.c ****                     ieee154e_vars.dataToSend->length);
 1638              		.loc 1 742 0
 1639 0b78 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1640 0b7c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1641 0b80 5B69     		ldr	r3, [r3, #20]
 741:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_loadPacket(ieee154e_vars.dataToSend->payload,
 1642              		.loc 1 741 0
 1643 0b82 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1644 0b84 1046     		mov	r0, r2
 1645 0b86 1946     		mov	r1, r3
 1646 0b88 FFF7FEFF 		bl	radio_loadPacket
 743:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 744:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // enable the radio in Tx mode. This does not send the packet.
 745:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_txEnable();
 1647              		.loc 1 745 0
 1648 0b8c FFF7FEFF 		bl	radio_txEnable
 746:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnInit=radio_getTimerValue();
 1649              		.loc 1 746 0
 1650 0b90 FFF7FEFF 		bl	radio_getTimerValue
 1651 0b94 0246     		mov	r2, r0
 1652 0b96 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1653 0b9a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1654 0b9e 1A63     		str	r2, [r3, #48]
 747:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnThisSlot=TRUE;
 1655              		.loc 1 747 0
 1656 0ba0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1657 0ba4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1658 0ba8 4FF00102 		mov	r2, #1
 1659 0bac 83F83820 		strb	r2, [r3, #56]
 748:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 749:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm tt2
 750:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_tt2);
 1660              		.loc 1 750 0
 1661 0bb0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1662 0bb4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1663 0bb8 5B6A     		ldr	r3, [r3, #36]
 1664 0bba 03F17C03 		add	r3, r3, #124
 1665 0bbe 1846     		mov	r0, r3
 1666 0bc0 FFF7FEFF 		bl	radiotimer_schedule
 751:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 752:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 753:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXDATAREADY);
 1667              		.loc 1 753 0
 1668 0bc4 4FF02100 		mov	r0, #33
 1669 0bc8 FFF7FEFF 		bl	changeState
 754:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 755:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1670              		.loc 1 755 0
 1671 0bcc 80BD     		pop	{r7, pc}
 1672              		.cfi_endproc
 1673              	.LFE15:
 1675 0bce 00BF     		.align	2
 1676              		.global	activity_csl_data_tie1
 1677              		.thumb
 1678              		.thumb_func
 1680              	activity_csl_data_tie1:
 1681              	.LFB16:
 756:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 757:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 758:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data tie1].
 759:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 760:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #tt2 expiring, i.e. timer fires while state = S_CSLTXDATAPREPARE. This is re
 761:openstack/02a-MAClow/IEEE802154Ecsl.c ****   did not have enough time to execute. Chances are to set maxTxDataPrepare too small. The implement
 762:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 763:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_tie1() {
 1682              		.loc 1 763 0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 0
 1685              		@ frame_needed = 1, uses_anonymous_args = 0
 1686 0bd0 80B5     		push	{r7, lr}
 1687              	.LCFI39:
 1688              		.cfi_def_cfa_offset 8
 1689              		.cfi_offset 7, -8
 1690              		.cfi_offset 14, -4
 1691 0bd2 00AF     		add	r7, sp, #0
 1692              	.LCFI40:
 1693              		.cfi_def_cfa_register 7
 764:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
 765:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXTXDATAPREPARE_OVERFLOW,
 766:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_vars.slo
 1694              		.loc 1 766 0
 1695 0bd4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1696 0bd8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1697 0bdc 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 765:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXTXDATAPREPARE_OVERFLOW,
 1698              		.loc 1 765 0
 1699 0bde 1A46     		mov	r2, r3
 1700 0be0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1701 0be4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1702 0be8 DB88     		ldrh	r3, [r3, #6]
 1703 0bea 4FF00900 		mov	r0, #9
 1704 0bee 4FF02201 		mov	r1, #34
 1705 0bf2 FFF7FEFF 		bl	openserial_printError
 767:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
 768:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 1706              		.loc 1 768 0
 1707 0bf6 FFF7FEFF 		bl	endOps
 769:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1708              		.loc 1 769 0
 1709 0bfa 80BD     		pop	{r7, pc}
 1710              		.cfi_endproc
 1711              	.LFE16:
 1713              		.align	2
 1714              		.global	activity_csl_data_ti3
 1715              		.thumb
 1716              		.thumb_func
 1718              	activity_csl_data_ti3:
 1719              	.LFB17:
 770:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 771:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 772:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data ti3].
 773:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 774:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
 775:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The radio is configured and this interrupt gives it the "go" signal to start listening.
 776:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 777:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ti3() {
 1720              		.loc 1 777 0
 1721              		.cfi_startproc
 1722              		@ args = 0, pretend = 0, frame = 0
 1723              		@ frame_needed = 1, uses_anonymous_args = 0
 1724 0bfc 80B5     		push	{r7, lr}
 1725              	.LCFI41:
 1726              		.cfi_def_cfa_offset 8
 1727              		.cfi_offset 7, -8
 1728              		.cfi_offset 14, -4
 1729 0bfe 00AF     		add	r7, sp, #0
 1730              	.LCFI42:
 1731              		.cfi_def_cfa_register 7
 778:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 779:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXDATADELAY);
 1732              		.loc 1 779 0
 1733 0c00 4FF02200 		mov	r0, #34
 1734 0c04 FFF7FEFF 		bl	changeState
 780:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 781:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm tt3
 782:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_tt3);
 1735              		.loc 1 782 0
 1736 0c08 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1737 0c0c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1738 0c10 5B6A     		ldr	r3, [r3, #36]
 1739 0c12 03F19D03 		add	r3, r3, #157
 1740 0c16 1846     		mov	r0, r3
 1741 0c18 FFF7FEFF 		bl	radiotimer_schedule
 783:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 784:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // give the 'go' to transmit
 785:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_txNow();
 1742              		.loc 1 785 0
 1743 0c1c FFF7FEFF 		bl	radio_txNow
 786:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1744              		.loc 1 786 0
 1745 0c20 80BD     		pop	{r7, pc}
 1746              		.cfi_endproc
 1747              	.LFE17:
 1749 0c22 00BF     		.align	2
 1750              		.global	activity_csl_data_tie2
 1751              		.thumb
 1752              		.thumb_func
 1754              	activity_csl_data_tie2:
 1755              	.LFB18:
 787:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 788:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 789:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 790:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX Sampling error [data tie2].
 791:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 792:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #tt3 expiring, i.e. timer fires while state = S_CSLTXDATADELAY. If no packet
 793:openstack/02a-MAClow/IEEE802154Ecsl.c ****   none will be sent and it is safe to switch off the radio. This timer is set such that the radio w
 794:openstack/02a-MAClow/IEEE802154Ecsl.c ****   duration (#TsLongGT).
 795:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 796:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_tie2() {
 1756              		.loc 1 796 0
 1757              		.cfi_startproc
 1758              		@ args = 0, pretend = 0, frame = 0
 1759              		@ frame_needed = 1, uses_anonymous_args = 0
 1760 0c24 80B5     		push	{r7, lr}
 1761              	.LCFI43:
 1762              		.cfi_def_cfa_offset 8
 1763              		.cfi_offset 7, -8
 1764              		.cfi_offset 14, -4
 1765 0c26 00AF     		add	r7, sp, #0
 1766              	.LCFI44:
 1767              		.cfi_def_cfa_register 7
 797:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
 798:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDRADIO_OVERFLOWS,
 799:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_vars.slo
 1768              		.loc 1 799 0
 1769 0c28 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1770 0c2c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1771 0c30 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 798:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDRADIO_OVERFLOWS,
 1772              		.loc 1 798 0
 1773 0c32 1A46     		mov	r2, r3
 1774 0c34 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1775 0c38 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1776 0c3c DB88     		ldrh	r3, [r3, #6]
 1777 0c3e 4FF00900 		mov	r0, #9
 1778 0c42 4FF02701 		mov	r1, #39
 1779 0c46 FFF7FEFF 		bl	openserial_printError
 800:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 801:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
 802:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 1780              		.loc 1 802 0
 1781 0c4a FFF7FEFF 		bl	endOps
 803:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1782              		.loc 1 803 0
 1783 0c4e 80BD     		pop	{r7, pc}
 1784              		.cfi_endproc
 1785              	.LFE18:
 1787              		.align	2
 1788              		.global	activity_csl_data_ti4
 1789              		.thumb
 1790              		.thumb_func
 1792              	activity_csl_data_ti4:
 1793              	.LFB19:
 804:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 805:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 806:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 807:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data ti4].
 808:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 809:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_startOfFrame" function when a start of frame ev
 810:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to change state, cancel #tt3 and arm #tt4 (max time to sent all the packet).
 811:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 812:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ti4(PORT_RADIOTIMER_WIDTH capturedTime) {
 1794              		.loc 1 812 0
 1795              		.cfi_startproc
 1796              		@ args = 0, pretend = 0, frame = 8
 1797              		@ frame_needed = 1, uses_anonymous_args = 0
 1798 0c50 80B5     		push	{r7, lr}
 1799              	.LCFI45:
 1800              		.cfi_def_cfa_offset 8
 1801              		.cfi_offset 7, -8
 1802              		.cfi_offset 14, -4
 1803 0c52 82B0     		sub	sp, sp, #8
 1804              	.LCFI46:
 1805              		.cfi_def_cfa_offset 16
 1806 0c54 00AF     		add	r7, sp, #0
 1807              	.LCFI47:
 1808              		.cfi_def_cfa_register 7
 1809 0c56 7860     		str	r0, [r7, #4]
 813:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 814:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXDATA);
 1810              		.loc 1 814 0
 1811 0c58 4FF02300 		mov	r0, #35
 1812 0c5c FFF7FEFF 		bl	changeState
 815:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 816:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancel tt3
 817:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 1813              		.loc 1 817 0
 1814 0c60 FFF7FEFF 		bl	radiotimer_cancel
 818:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 819:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time
 820:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.lastCapturedTime = capturedTime;
 1815              		.loc 1 820 0
 1816 0c64 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1817 0c68 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1818 0c6c 7A68     		ldr	r2, [r7, #4]
 1819 0c6e 5A62     		str	r2, [r3, #36]
 821:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 822:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm tt4
 823:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_tt4);
 1820              		.loc 1 823 0
 1821 0c70 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1822 0c74 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1823 0c78 5B6A     		ldr	r3, [r3, #36]
 1824 0c7a 03F1A403 		add	r3, r3, #164
 1825 0c7e 1846     		mov	r0, r3
 1826 0c80 FFF7FEFF 		bl	radiotimer_schedule
 824:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1827              		.loc 1 824 0
 1828 0c84 07F10807 		add	r7, r7, #8
 1829 0c88 BD46     		mov	sp, r7
 1830 0c8a 80BD     		pop	{r7, pc}
 1831              		.cfi_endproc
 1832              	.LFE19:
 1834              		.align	2
 1835              		.global	activity_csl_data_tie3
 1836              		.thumb
 1837              		.thumb_func
 1839              	activity_csl_data_tie3:
 1840              	.LFB20:
 825:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 826:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 827:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data tie3].
 828:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 829:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #tt4 expiring, i.e. timer fires while state = S_CSLTXDATA. This is an error 
 830:openstack/02a-MAClow/IEEE802154Ecsl.c ****   to transmit the data packet. The implemented behaviour is to log the error and finish.
 831:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 832:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_tie3() {
 1841              		.loc 1 832 0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 1, uses_anonymous_args = 0
 1845 0c8c 80B5     		push	{r7, lr}
 1846              	.LCFI48:
 1847              		.cfi_def_cfa_offset 8
 1848              		.cfi_offset 7, -8
 1849              		.cfi_offset 14, -4
 1850 0c8e 00AF     		add	r7, sp, #0
 1851              	.LCFI49:
 1852              		.cfi_def_cfa_register 7
 833:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
 834:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDDATADURATION_OVERFLOWS,
 835:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_vars.slo
 1853              		.loc 1 835 0
 1854 0c90 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1855 0c94 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1856 0c98 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 834:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDDATADURATION_OVERFLOWS,
 1857              		.loc 1 834 0
 1858 0c9a 1A46     		mov	r2, r3
 1859 0c9c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1860 0ca0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1861 0ca4 DB88     		ldrh	r3, [r3, #6]
 1862 0ca6 4FF00900 		mov	r0, #9
 1863 0caa 4FF02601 		mov	r1, #38
 1864 0cae FFF7FEFF 		bl	openserial_printError
 836:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
 837:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 1865              		.loc 1 837 0
 1866 0cb2 FFF7FEFF 		bl	endOps
 838:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1867              		.loc 1 838 0
 1868 0cb6 80BD     		pop	{r7, pc}
 1869              		.cfi_endproc
 1870              	.LFE20:
 1872              		.align	2
 1873              		.global	activity_csl_data_ti5
 1874              		.thumb
 1875              		.thumb_func
 1877              	activity_csl_data_ti5:
 1878              	.LFB21:
 839:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 840:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 841:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data ri5].
 842:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 843:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_endOfFrame" function when a end of frame event 
 844:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to change state, cancel #tt4, and notify upper layer and schedule about succ
 845:openstack/02a-MAClow/IEEE802154Ecsl.c ****   start process for receive ACK frame (arm #tt5).
 846:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 847:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ti5(PORT_RADIOTIMER_WIDTH capturedTime) {
 1879              		.loc 1 847 0
 1880              		.cfi_startproc
 1881              		@ args = 0, pretend = 0, frame = 16
 1882              		@ frame_needed = 1, uses_anonymous_args = 0
 1883 0cb8 90B5     		push	{r4, r7, lr}
 1884              	.LCFI50:
 1885              		.cfi_def_cfa_offset 12
 1886              		.cfi_offset 4, -12
 1887              		.cfi_offset 7, -8
 1888              		.cfi_offset 14, -4
 1889 0cba 85B0     		sub	sp, sp, #20
 1890              	.LCFI51:
 1891              		.cfi_def_cfa_offset 32
 1892 0cbc 00AF     		add	r7, sp, #0
 1893              	.LCFI52:
 1894              		.cfi_def_cfa_register 7
 1895 0cbe 7860     		str	r0, [r7, #4]
 848:openstack/02a-MAClow/IEEE802154Ecsl.c ****    bool listenForAck;
 849:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 850:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 851:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXACKOFFSET);
 1896              		.loc 1 851 0
 1897 0cc0 4FF02400 		mov	r0, #36
 1898 0cc4 FFF7FEFF 		bl	changeState
 852:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 853:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancel tt4
 854:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 1899              		.loc 1 854 0
 1900 0cc8 FFF7FEFF 		bl	radiotimer_cancel
 855:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 856:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // turn off the radio
 857:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rfOff();
 1901              		.loc 1 857 0
 1902 0ccc FFF7FEFF 		bl	radio_rfOff
 858:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnTics+=(radio_getTimerValue()-ieee154e_vars.radioOnInit);
 1903              		.loc 1 858 0
 1904 0cd0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1905 0cd4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1906 0cd8 5C6B     		ldr	r4, [r3, #52]
 1907 0cda FFF7FEFF 		bl	radio_getTimerValue
 1908 0cde 0246     		mov	r2, r0
 1909 0ce0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1910 0ce4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1911 0ce8 1B6B     		ldr	r3, [r3, #48]
 1912 0cea D31A     		subs	r3, r2, r3
 1913 0cec E218     		adds	r2, r4, r3
 1914 0cee 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1915 0cf2 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1916 0cf6 5A63     		str	r2, [r3, #52]
 859:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 860:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time
 861:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.lastCapturedTime = capturedTime;
 1917              		.loc 1 861 0
 1918 0cf8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1919 0cfc C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1920 0d00 7A68     		ldr	r2, [r7, #4]
 1921 0d02 5A62     		str	r2, [r3, #36]
 862:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 863:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // decides whether to listen for an ACK
 864:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (packetfunctions_isBroadcastMulticast(&ieee154e_vars.dataToSend->l2_nextORpreviousHop)==TRUE)
 1922              		.loc 1 864 0
 1923 0d04 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1924 0d08 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1925 0d0c 5B69     		ldr	r3, [r3, #20]
 1926 0d0e 03F13803 		add	r3, r3, #56
 1927 0d12 1846     		mov	r0, r3
 1928 0d14 FFF7FEFF 		bl	packetfunctions_isBroadcastMulticast
 1929 0d18 0346     		mov	r3, r0
 1930 0d1a 002B     		cmp	r3, #0
 1931 0d1c 03D0     		beq	.L111
 865:openstack/02a-MAClow/IEEE802154Ecsl.c ****       listenForAck = FALSE;
 1932              		.loc 1 865 0
 1933 0d1e 4FF00003 		mov	r3, #0
 1934 0d22 FB73     		strb	r3, [r7, #15]
 1935 0d24 02E0     		b	.L112
 1936              	.L111:
 866:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } else {
 867:openstack/02a-MAClow/IEEE802154Ecsl.c ****       listenForAck = TRUE;
 1937              		.loc 1 867 0
 1938 0d26 4FF00103 		mov	r3, #1
 1939 0d2a FB73     		strb	r3, [r7, #15]
 1940              	.L112:
 868:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 869:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 870:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // CSL: TEST CODE
 871:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // toggle orange led to indicate TX.
 872:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if((ieee154e_vars.dataToSend->l2_frameType == IEEE154_TYPE_DATA) &&
 1941              		.loc 1 872 0
 1942 0d2c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1943 0d30 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1944 0d34 5B69     		ldr	r3, [r3, #20]
 1945 0d36 93F84930 		ldrb	r3, [r3, #73]	@ zero_extendqisi2
 1946 0d3a 012B     		cmp	r3, #1
 1947 0d3c 15D1     		bne	.L113
 873:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  (ieee154e_vars.dataToSend->owner == COMPONENT_SIXTOP_TO_IEEE802154E) &&
 1948              		.loc 1 873 0 discriminator 1
 1949 0d3e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1950 0d42 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1951 0d46 5B69     		ldr	r3, [r3, #20]
 1952 0d48 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 872:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if((ieee154e_vars.dataToSend->l2_frameType == IEEE154_TYPE_DATA) &&
 1953              		.loc 1 872 0 discriminator 1
 1954 0d4a 0A2B     		cmp	r3, #10
 1955 0d4c 0DD1     		bne	.L113
 874:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  (ieee154e_vars.dataToSend->cslFlag == 123)) {
 1956              		.loc 1 874 0
 1957 0d4e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1958 0d52 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1959 0d56 5B69     		ldr	r3, [r3, #20]
 1960 0d58 93F8ED30 		ldrb	r3, [r3, #237]	@ zero_extendqisi2
 873:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  (ieee154e_vars.dataToSend->owner == COMPONENT_SIXTOP_TO_IEEE802154E) &&
 1961              		.loc 1 873 0
 1962 0d5c 7B2B     		cmp	r3, #123
 1963 0d5e 04D1     		bne	.L113
 875:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	 //leds_sync_toggle();
 876:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	 leds_sync_blink();
 1964              		.loc 1 876 0
 1965 0d60 FFF7FEFF 		bl	leds_sync_blink
 877:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	 listenForAck = FALSE;
 1966              		.loc 1 877 0
 1967 0d64 4FF00003 		mov	r3, #0
 1968 0d68 FB73     		strb	r3, [r7, #15]
 1969              	.L113:
 878:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 879:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // END TEST CODE
 880:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 881:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 882:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (listenForAck==TRUE) {
 1970              		.loc 1 882 0
 1971 0d6a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1972 0d6c 002B     		cmp	r3, #0
 1973 0d6e 0AD0     		beq	.L114
 883:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // arm tt5
 884:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radiotimer_schedule(DURATION_tt5);
 1974              		.loc 1 884 0
 1975 0d70 40F20003 		movw	r3, #:lower16:ieee154e_vars
 1976 0d74 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 1977 0d78 5B6A     		ldr	r3, [r3, #36]
 1978 0d7a 03F17D03 		add	r3, r3, #125
 1979 0d7e 1846     		mov	r0, r3
 1980 0d80 FFF7FEFF 		bl	radiotimer_schedule
 1981 0d84 09E0     		b	.L110
 1982              	.L114:
 885:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } else {
 886:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // indicate succesful Tx to schedule to keep statistics
 887:openstack/02a-MAClow/IEEE802154Ecsl.c ****       schedule_indicateTx(&ieee154e_vars.asn,TRUE);
 1983              		.loc 1 887 0
 1984 0d86 40F20000 		movw	r0, #:lower16:ieee154e_vars
 1985 0d8a C0F20000 		movt	r0, #:upper16:ieee154e_vars
 1986 0d8e 4FF00101 		mov	r1, #1
 1987 0d92 FFF7FEFF 		bl	schedule_indicateTx
 888:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 889:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // CSL TEST CODE (comment notification)
 890:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // indicate to upper later the packet was sent successfully
 891:openstack/02a-MAClow/IEEE802154Ecsl.c ****       //notif_sendDone(ieee154e_vars.dataToSend,E_SUCCESS);
 892:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 893:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // reset local variable
 894:openstack/02a-MAClow/IEEE802154Ecsl.c ****       //ieee154e_vars.dataToSend = NULL;
 895:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // END TEST CODE
 896:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 897:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // abort
 898:openstack/02a-MAClow/IEEE802154Ecsl.c ****       endOps();
 1988              		.loc 1 898 0
 1989 0d96 FFF7FEFF 		bl	endOps
 1990              	.L110:
 899:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 900:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 1991              		.loc 1 900 0
 1992 0d9a 07F11407 		add	r7, r7, #20
 1993 0d9e BD46     		mov	sp, r7
 1994 0da0 90BD     		pop	{r4, r7, pc}
 1995              		.cfi_endproc
 1996              	.LFE21:
 1998 0da2 00BF     		.align	2
 1999              		.global	activity_csl_data_ti6
 2000              		.thumb
 2001              		.thumb_func
 2003              	activity_csl_data_ti6:
 2004              	.LFB22:
 901:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 902:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 903:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data ti6].
 904:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 905:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
 906:openstack/02a-MAClow/IEEE802154Ecsl.c ****    The functionality is to prepare the radio for ACK reception.
 907:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 908:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ti6() {
 2005              		.loc 1 908 0
 2006              		.cfi_startproc
 2007              		@ args = 0, pretend = 0, frame = 0
 2008              		@ frame_needed = 1, uses_anonymous_args = 0
 2009 0da4 80B5     		push	{r7, lr}
 2010              	.LCFI53:
 2011              		.cfi_def_cfa_offset 8
 2012              		.cfi_offset 7, -8
 2013              		.cfi_offset 14, -4
 2014 0da6 00AF     		add	r7, sp, #0
 2015              	.LCFI54:
 2016              		.cfi_def_cfa_register 7
 909:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 910:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXACKPREPARE);
 2017              		.loc 1 910 0
 2018 0da8 4FF02500 		mov	r0, #37
 2019 0dac FFF7FEFF 		bl	changeState
 911:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 912:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // enable the radio in Rx mode. The radio is not actively listening yet.
 913:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rxEnable();
 2020              		.loc 1 913 0
 2021 0db0 FFF7FEFF 		bl	radio_rxEnable
 914:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 915:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //caputre init of radio for duty cycle calculation
 916:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnInit=radio_getTimerValue();
 2022              		.loc 1 916 0
 2023 0db4 FFF7FEFF 		bl	radio_getTimerValue
 2024 0db8 0246     		mov	r2, r0
 2025 0dba 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2026 0dbe C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2027 0dc2 1A63     		str	r2, [r3, #48]
 917:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnThisSlot=TRUE;
 2028              		.loc 1 917 0
 2029 0dc4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2030 0dc8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2031 0dcc 4FF00102 		mov	r2, #1
 2032 0dd0 83F83820 		strb	r2, [r3, #56]
 918:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 919:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm tt6
 920:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_tt6);
 2033              		.loc 1 920 0
 2034 0dd4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2035 0dd8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2036 0ddc 5B6A     		ldr	r3, [r3, #36]
 2037 0dde 03F18703 		add	r3, r3, #135
 2038 0de2 1846     		mov	r0, r3
 2039 0de4 FFF7FEFF 		bl	radiotimer_schedule
 921:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 922:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 923:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXACKREADY);
 2040              		.loc 1 923 0
 2041 0de8 4FF02600 		mov	r0, #38
 2042 0dec FFF7FEFF 		bl	changeState
 924:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2043              		.loc 1 924 0
 2044 0df0 80BD     		pop	{r7, pc}
 2045              		.cfi_endproc
 2046              	.LFE22:
 2048 0df2 00BF     		.align	2
 2049              		.global	activity_csl_data_tie4
 2050              		.thumb
 2051              		.thumb_func
 2053              	activity_csl_data_tie4:
 2054              	.LFB23:
 925:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 926:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 927:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data tie4].
 928:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 929:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
 930:openstack/02a-MAClow/IEEE802154Ecsl.c ****    The functionality is to prepare the radio for ACK sending.
 931:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 932:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_tie4() {
 2055              		.loc 1 932 0
 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 0
 2058              		@ frame_needed = 1, uses_anonymous_args = 0
 2059 0df4 80B5     		push	{r7, lr}
 2060              	.LCFI55:
 2061              		.cfi_def_cfa_offset 8
 2062              		.cfi_offset 7, -8
 2063              		.cfi_offset 14, -4
 2064 0df6 00AF     		add	r7, sp, #0
 2065              	.LCFI56:
 2066              		.cfi_def_cfa_register 7
 933:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
 934:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXRXACKPREPARE_OVERFLOWS,
 935:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state, (errorparameter_t)ieee154e_vars.slo
 2067              		.loc 1 935 0
 2068 0df8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2069 0dfc C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2070 0e00 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 934:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXRXACKPREPARE_OVERFLOWS,
 2071              		.loc 1 934 0
 2072 0e02 1A46     		mov	r2, r3
 2073 0e04 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2074 0e08 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2075 0e0c DB88     		ldrh	r3, [r3, #6]
 2076 0e0e 4FF00900 		mov	r0, #9
 2077 0e12 4FF02301 		mov	r1, #35
 2078 0e16 FFF7FEFF 		bl	openserial_printError
 936:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
 937:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 2079              		.loc 1 937 0
 2080 0e1a FFF7FEFF 		bl	endOps
 938:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2081              		.loc 1 938 0
 2082 0e1e 80BD     		pop	{r7, pc}
 2083              		.cfi_endproc
 2084              	.LFE23:
 2086              		.align	2
 2087              		.global	activity_csl_data_ti7
 2088              		.thumb
 2089              		.thumb_func
 2091              	activity_csl_data_ti7:
 2092              	.LFB24:
 939:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 940:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 941:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data ti7].
 942:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 943:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
 944:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The radio is configured and this interrupt gives it the "go" signal to start listening.
 945:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 946:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ti7() {
 2093              		.loc 1 946 0
 2094              		.cfi_startproc
 2095              		@ args = 0, pretend = 0, frame = 0
 2096              		@ frame_needed = 1, uses_anonymous_args = 0
 2097 0e20 80B5     		push	{r7, lr}
 2098              	.LCFI57:
 2099              		.cfi_def_cfa_offset 8
 2100              		.cfi_offset 7, -8
 2101              		.cfi_offset 14, -4
 2102 0e22 00AF     		add	r7, sp, #0
 2103              	.LCFI58:
 2104              		.cfi_def_cfa_register 7
 947:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 948:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXACKLISTEN);
 2105              		.loc 1 948 0
 2106 0e24 4FF02700 		mov	r0, #39
 2107 0e28 FFF7FEFF 		bl	changeState
 949:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 950:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // start listening
 951:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rxNow();
 2108              		.loc 1 951 0
 2109 0e2c FFF7FEFF 		bl	radio_rxNow
 952:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 953:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm tt7
 954:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_tt7);
 2110              		.loc 1 954 0
 2111 0e30 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2112 0e34 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2113 0e38 5B6A     		ldr	r3, [r3, #36]
 2114 0e3a 03F1A703 		add	r3, r3, #167
 2115 0e3e 1846     		mov	r0, r3
 2116 0e40 FFF7FEFF 		bl	radiotimer_schedule
 955:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2117              		.loc 1 955 0
 2118 0e44 80BD     		pop	{r7, pc}
 2119              		.cfi_endproc
 2120              	.LFE24:
 2122 0e46 00BF     		.align	2
 2123              		.global	activity_csl_data_tie5
 2124              		.thumb
 2125              		.thumb_func
 2127              	activity_csl_data_tie5:
 2128              	.LFB25:
 956:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 957:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 958:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data tie5].
 959:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 960:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
 961:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to notify upper level, updating the number of remaining retries of the packe
 962:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 963:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_tie5() {
 2129              		.loc 1 963 0
 2130              		.cfi_startproc
 2131              		@ args = 0, pretend = 0, frame = 0
 2132              		@ frame_needed = 1, uses_anonymous_args = 0
 2133 0e48 80B5     		push	{r7, lr}
 2134              	.LCFI59:
 2135              		.cfi_def_cfa_offset 8
 2136              		.cfi_offset 7, -8
 2137              		.cfi_offset 14, -4
 2138 0e4a 00AF     		add	r7, sp, #0
 2139              	.LCFI60:
 2140              		.cfi_def_cfa_register 7
 964:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // indicate transmit failed to schedule to keep stats
 965:openstack/02a-MAClow/IEEE802154Ecsl.c ****    schedule_indicateTx(&ieee154e_vars.asn,FALSE);
 2141              		.loc 1 965 0
 2142 0e4c 40F20000 		movw	r0, #:lower16:ieee154e_vars
 2143 0e50 C0F20000 		movt	r0, #:upper16:ieee154e_vars
 2144 0e54 4FF00001 		mov	r1, #0
 2145 0e58 FFF7FEFF 		bl	schedule_indicateTx
 966:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 967:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // decrement transmits left counter
 968:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.dataToSend->l2_retriesLeft--;
 2146              		.loc 1 968 0
 2147 0e5c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2148 0e60 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2149 0e64 5B69     		ldr	r3, [r3, #20]
 2150 0e66 93F84B20 		ldrb	r2, [r3, #75]	@ zero_extendqisi2
 2151 0e6a 02F1FF32 		add	r2, r2, #-1
 2152 0e6e D2B2     		uxtb	r2, r2
 2153 0e70 83F84B20 		strb	r2, [r3, #75]
 969:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 970:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.dataToSend->l2_retriesLeft==0) {
 2154              		.loc 1 970 0
 2155 0e74 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2156 0e78 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2157 0e7c 5B69     		ldr	r3, [r3, #20]
 2158 0e7e 93F84B30 		ldrb	r3, [r3, #75]	@ zero_extendqisi2
 2159 0e82 002B     		cmp	r3, #0
 2160 0e84 07D0     		beq	.L120
 971:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // indicate tx fail if no more retries left
 972:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // CSL testing commented
 973:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  // notif_sendDone(ieee154e_vars.dataToSend,E_FAIL);
 974:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } else {
 975:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // return packet to the virtual COMPONENT_SIXTOP_TO_IEEE802154E component
 976:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.dataToSend->owner = COMPONENT_SIXTOP_TO_IEEE802154E;
 2161              		.loc 1 976 0
 2162 0e86 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2163 0e8a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2164 0e8e 5B69     		ldr	r3, [r3, #20]
 2165 0e90 4FF00A02 		mov	r2, #10
 2166 0e94 5A70     		strb	r2, [r3, #1]
 2167              	.L120:
 977:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
 978:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 979:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // reset local variable
 980:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.dataToSend = NULL;
 2168              		.loc 1 980 0
 2169 0e96 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2170 0e9a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2171 0e9e 4FF00002 		mov	r2, #0
 2172 0ea2 5A61     		str	r2, [r3, #20]
 981:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 982:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
 983:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 2173              		.loc 1 983 0
 2174 0ea4 FFF7FEFF 		bl	endOps
 984:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2175              		.loc 1 984 0
 2176 0ea8 80BD     		pop	{r7, pc}
 2177              		.cfi_endproc
 2178              	.LFE25:
 2180 0eaa 00BF     		.align	2
 2181              		.global	activity_csl_data_ti8
 2182              		.thumb
 2183              		.thumb_func
 2185              	activity_csl_data_ti8:
 2186              	.LFB26:
 985:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 986:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
 987:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data ri8].
 988:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 989:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_startOfFrame" function when a start of frame ev
 990:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to change the state, cancel #tt7 and arm #tt8 (max time to receive the ack p
 991:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
 992:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ti8(PORT_RADIOTIMER_WIDTH capturedTime) {
 2187              		.loc 1 992 0
 2188              		.cfi_startproc
 2189              		@ args = 0, pretend = 0, frame = 8
 2190              		@ frame_needed = 1, uses_anonymous_args = 0
 2191 0eac 80B5     		push	{r7, lr}
 2192              	.LCFI61:
 2193              		.cfi_def_cfa_offset 8
 2194              		.cfi_offset 7, -8
 2195              		.cfi_offset 14, -4
 2196 0eae 82B0     		sub	sp, sp, #8
 2197              	.LCFI62:
 2198              		.cfi_def_cfa_offset 16
 2199 0eb0 00AF     		add	r7, sp, #0
 2200              	.LCFI63:
 2201              		.cfi_def_cfa_register 7
 2202 0eb2 7860     		str	r0, [r7, #4]
 993:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
 994:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXACK);
 2203              		.loc 1 994 0
 2204 0eb4 4FF02800 		mov	r0, #40
 2205 0eb8 FFF7FEFF 		bl	changeState
 995:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 996:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancel tt7
 997:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 2206              		.loc 1 997 0
 2207 0ebc FFF7FEFF 		bl	radiotimer_cancel
 998:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
 999:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time
1000:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.lastCapturedTime = capturedTime;
 2208              		.loc 1 1000 0
 2209 0ec0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2210 0ec4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2211 0ec8 7A68     		ldr	r2, [r7, #4]
 2212 0eca 5A62     		str	r2, [r3, #36]
1001:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1002:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm tt8
1003:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_tt8);
 2213              		.loc 1 1003 0
 2214 0ecc 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2215 0ed0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2216 0ed4 5B6A     		ldr	r3, [r3, #36]
 2217 0ed6 03F16203 		add	r3, r3, #98
 2218 0eda 1846     		mov	r0, r3
 2219 0edc FFF7FEFF 		bl	radiotimer_schedule
1004:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2220              		.loc 1 1004 0
 2221 0ee0 07F10807 		add	r7, r7, #8
 2222 0ee4 BD46     		mov	sp, r7
 2223 0ee6 80BD     		pop	{r7, pc}
 2224              		.cfi_endproc
 2225              	.LFE26:
 2227              		.align	2
 2228              		.global	activity_csl_data_tie6
 2229              		.thumb
 2230              		.thumb_func
 2232              	activity_csl_data_tie6:
 2233              	.LFB27:
1005:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1006:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1007:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data tie6].
1008:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1009:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
1010:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to finish and clean registers.
1011:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1012:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_tie6() {
 2234              		.loc 1 1012 0
 2235              		.cfi_startproc
 2236              		@ args = 0, pretend = 0, frame = 0
 2237              		@ frame_needed = 1, uses_anonymous_args = 0
 2238 0ee8 80B5     		push	{r7, lr}
 2239              	.LCFI64:
 2240              		.cfi_def_cfa_offset 8
 2241              		.cfi_offset 7, -8
 2242              		.cfi_offset 14, -4
 2243 0eea 00AF     		add	r7, sp, #0
 2244              	.LCFI65:
 2245              		.cfi_def_cfa_register 7
1013:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1014:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 2246              		.loc 1 1014 0
 2247 0eec FFF7FEFF 		bl	endOps
1015:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2248              		.loc 1 1015 0
 2249 0ef0 80BD     		pop	{r7, pc}
 2250              		.cfi_endproc
 2251              	.LFE27:
 2253 0ef2 00BF     		.align	2
 2254              		.global	activity_csl_data_ti9
 2255              		.thumb
 2256              		.thumb_func
 2258              	activity_csl_data_ti9:
 2259              	.LFB28:
1016:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1017:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1018:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1019:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL TX stage [data ti9].
1020:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1021:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_endOfFrame" function when a end of frame event 
1022:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to change the state, cancel #tt8, analyze ack packet and notify upper layer.
1023:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1024:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ti9(PORT_RADIOTIMER_WIDTH capturedTime) {
 2260              		.loc 1 1024 0
 2261              		.cfi_startproc
 2262              		@ args = 0, pretend = 0, frame = 80
 2263              		@ frame_needed = 1, uses_anonymous_args = 0
 2264 0ef4 B0B5     		push	{r4, r5, r7, lr}
 2265              	.LCFI66:
 2266              		.cfi_def_cfa_offset 16
 2267              		.cfi_offset 4, -16
 2268              		.cfi_offset 5, -12
 2269              		.cfi_offset 7, -8
 2270              		.cfi_offset 14, -4
 2271 0ef6 96B0     		sub	sp, sp, #88
 2272              	.LCFI67:
 2273              		.cfi_def_cfa_offset 104
 2274 0ef8 02AF     		add	r7, sp, #8
 2275              	.LCFI68:
 2276              		.cfi_def_cfa 7, 96
 2277 0efa 7860     		str	r0, [r7, #4]
1025:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802154_header_iht     ieee802514_header;
1026:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint16_t                  lenIE;
1027:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1028:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1029:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXPROC);
 2278              		.loc 1 1029 0
 2279 0efc 4FF02900 		mov	r0, #41
 2280 0f00 FFF7FEFF 		bl	changeState
1030:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1031:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancel tt8
1032:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 2281              		.loc 1 1032 0
 2282 0f04 FFF7FEFF 		bl	radiotimer_cancel
1033:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1034:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // turn off the radio
1035:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rfOff();
 2283              		.loc 1 1035 0
 2284 0f08 FFF7FEFF 		bl	radio_rfOff
1036:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //compute tics radio on.
1037:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnTics+=(radio_getTimerValue()-ieee154e_vars.radioOnInit);
 2285              		.loc 1 1037 0
 2286 0f0c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2287 0f10 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2288 0f14 5C6B     		ldr	r4, [r3, #52]
 2289 0f16 FFF7FEFF 		bl	radio_getTimerValue
 2290 0f1a 0246     		mov	r2, r0
 2291 0f1c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2292 0f20 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2293 0f24 1B6B     		ldr	r3, [r3, #48]
 2294 0f26 D31A     		subs	r3, r2, r3
 2295 0f28 E218     		adds	r2, r4, r3
 2296 0f2a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2297 0f2e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2298 0f32 5A63     		str	r2, [r3, #52]
1038:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1039:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time
1040:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.lastCapturedTime = capturedTime;
 2299              		.loc 1 1040 0
 2300 0f34 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2301 0f38 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2302 0f3c 7A68     		ldr	r2, [r7, #4]
 2303 0f3e 5A62     		str	r2, [r3, #36]
1041:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1042:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // get a buffer to put the (received) ACK in
1043:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackReceived = openqueue_getFreePacketBuffer(COMPONENT_IEEE802154E);
 2304              		.loc 1 1043 0
 2305 0f40 4FF00900 		mov	r0, #9
 2306 0f44 FFF7FEFF 		bl	openqueue_getFreePacketBuffer
 2307 0f48 0246     		mov	r2, r0
 2308 0f4a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2309 0f4e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2310 0f52 1A62     		str	r2, [r3, #32]
1044:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.ackReceived==NULL) {
 2311              		.loc 1 1044 0
 2312 0f54 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2313 0f58 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2314 0f5c 1B6A     		ldr	r3, [r3, #32]
 2315 0f5e 002B     		cmp	r3, #0
 2316 0f60 0CD1     		bne	.L124
1045:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // log the error
1046:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openserial_printError(COMPONENT_IEEE802154E,ERR_NO_FREE_PACKET_BUFFER,
 2317              		.loc 1 1046 0
 2318 0f62 4FF00900 		mov	r0, #9
 2319 0f66 4FF02C01 		mov	r1, #44
 2320 0f6a 4FF00002 		mov	r2, #0
 2321 0f6e 4FF00003 		mov	r3, #0
 2322 0f72 FFF7FEFF 		bl	openserial_printError
1047:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             (errorparameter_t)0,
1048:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             (errorparameter_t)0);
1049:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // abort
1050:openstack/02a-MAClow/IEEE802154Ecsl.c ****       endOps();
 2323              		.loc 1 1050 0
 2324 0f76 FFF7FEFF 		bl	endOps
 2325 0f7a 15E1     		b	.L123
 2326              	.L124:
1051:openstack/02a-MAClow/IEEE802154Ecsl.c ****       return;
1052:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
1053:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1054:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // declare ownership over that packet
1055:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackReceived->creator = COMPONENT_IEEE802154E;
 2327              		.loc 1 1055 0
 2328 0f7c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2329 0f80 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2330 0f84 1B6A     		ldr	r3, [r3, #32]
 2331 0f86 4FF00902 		mov	r2, #9
 2332 0f8a 1A70     		strb	r2, [r3, #0]
1056:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackReceived->owner   = COMPONENT_IEEE802154E;
 2333              		.loc 1 1056 0
 2334 0f8c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2335 0f90 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2336 0f94 1B6A     		ldr	r3, [r3, #32]
 2337 0f96 4FF00902 		mov	r2, #9
 2338 0f9a 5A70     		strb	r2, [r3, #1]
1057:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1058:openstack/02a-MAClow/IEEE802154Ecsl.c ****    /*
1059:openstack/02a-MAClow/IEEE802154Ecsl.c ****    The do-while loop that follows is a little parsing trick.
1060:openstack/02a-MAClow/IEEE802154Ecsl.c ****    Because it contains a while(0) condition, it gets executed only once.
1061:openstack/02a-MAClow/IEEE802154Ecsl.c ****    Below the do-while loop is some code to cleans up the ack variable.
1062:openstack/02a-MAClow/IEEE802154Ecsl.c ****    Anywhere in the do-while loop, a break statement can be called to jump to
1063:openstack/02a-MAClow/IEEE802154Ecsl.c ****    the clean up code early. If the loop ends without a break, the received
1064:openstack/02a-MAClow/IEEE802154Ecsl.c ****    packet was correct. If it got aborted early (through a break), the packet
1065:openstack/02a-MAClow/IEEE802154Ecsl.c ****    was faulty.
1066:openstack/02a-MAClow/IEEE802154Ecsl.c ****    */
1067:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1068:openstack/02a-MAClow/IEEE802154Ecsl.c ****    do { // this "loop" is only executed once
1069:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1070:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // retrieve the received ack frame from the radio's Rx buffer
1071:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.ackReceived->payload = &(ieee154e_vars.ackReceived->packet[FIRST_FRAME_BYTE]);
 2339              		.loc 1 1071 0
 2340 0f9c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2341 0fa0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2342 0fa4 1A6A     		ldr	r2, [r3, #32]
 2343 0fa6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2344 0faa C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2345 0fae 1B6A     		ldr	r3, [r3, #32]
 2346 0fb0 03F16C03 		add	r3, r3, #108
 2347 0fb4 5360     		str	r3, [r2, #4]
1072:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getReceivedFrame(       ieee154e_vars.ackReceived->payload,
 2348              		.loc 1 1072 0
 2349 0fb6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2350 0fba C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2351 0fbe 1B6A     		ldr	r3, [r3, #32]
 2352 0fc0 5968     		ldr	r1, [r3, #4]
1073:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.ackReceived->length,
 2353              		.loc 1 1073 0
 2354 0fc2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2355 0fc6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2356 0fca 1B6A     		ldr	r3, [r3, #32]
1072:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getReceivedFrame(       ieee154e_vars.ackReceived->payload,
 2357              		.loc 1 1072 0
 2358 0fcc 03F10802 		add	r2, r3, #8
1074:openstack/02a-MAClow/IEEE802154Ecsl.c ****                              sizeof(ieee154e_vars.ackReceived->packet),
1075:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.ackReceived->l1_rssi,
 2359              		.loc 1 1075 0
 2360 0fd0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2361 0fd4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2362 0fd8 1B6A     		ldr	r3, [r3, #32]
1072:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getReceivedFrame(       ieee154e_vars.ackReceived->payload,
 2363              		.loc 1 1072 0
 2364 0fda 03F16804 		add	r4, r3, #104
1076:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.ackReceived->l1_lqi,
 2365              		.loc 1 1076 0
 2366 0fde 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2367 0fe2 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2368 0fe6 1B6A     		ldr	r3, [r3, #32]
1072:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getReceivedFrame(       ieee154e_vars.ackReceived->payload,
 2369              		.loc 1 1072 0
 2370 0fe8 03F16900 		add	r0, r3, #105
1077:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.ackReceived->l1_crc);
 2371              		.loc 1 1077 0
 2372 0fec 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2373 0ff0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2374 0ff4 1B6A     		ldr	r3, [r3, #32]
1072:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getReceivedFrame(       ieee154e_vars.ackReceived->payload,
 2375              		.loc 1 1072 0
 2376 0ff6 03F16A03 		add	r3, r3, #106
 2377 0ffa 0090     		str	r0, [sp, #0]
 2378 0ffc 0193     		str	r3, [sp, #4]
 2379 0ffe 0846     		mov	r0, r1
 2380 1000 1146     		mov	r1, r2
 2381 1002 4FF08202 		mov	r2, #130
 2382 1006 2346     		mov	r3, r4
 2383 1008 FFF7FEFF 		bl	radio_getReceivedFrame
1078:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1079:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // break if wrong length
1080:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee154e_vars.ackReceived->length<LENGTH_CRC || ieee154e_vars.ackReceived->length>LENGTH_
 2384              		.loc 1 1080 0
 2385 100c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2386 1010 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2387 1014 1B6A     		ldr	r3, [r3, #32]
 2388 1016 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2389 1018 012B     		cmp	r3, #1
 2390 101a 07D9     		bls	.L126
 2391              		.loc 1 1080 0 is_stmt 0 discriminator 1
 2392 101c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2393 1020 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2394 1024 1B6A     		ldr	r3, [r3, #32]
 2395 1026 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2396 1028 802B     		cmp	r3, #128
 2397 102a 0ED9     		bls	.L127
 2398              	.L126:
1081:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // break from the do-while loop and execute the clean-up code below
1082:openstack/02a-MAClow/IEEE802154Ecsl.c ****         openserial_printError(COMPONENT_IEEE802154E,ERR_INVALIDPACKETFROMRADIO,
1083:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             (errorparameter_t)1,
1084:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             ieee154e_vars.ackReceived->length);
 2399              		.loc 1 1084 0 is_stmt 1
 2400 102c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2401 1030 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2402 1034 1B6A     		ldr	r3, [r3, #32]
 2403 1036 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
1082:openstack/02a-MAClow/IEEE802154Ecsl.c ****         openserial_printError(COMPONENT_IEEE802154E,ERR_INVALIDPACKETFROMRADIO,
 2404              		.loc 1 1082 0
 2405 1038 4FF00900 		mov	r0, #9
 2406 103c 4FF03701 		mov	r1, #55
 2407 1040 4FF00102 		mov	r2, #1
 2408 1044 FFF7FEFF 		bl	openserial_printError
1085:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1086:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 2409              		.loc 1 1086 0
 2410 1048 9DE0     		b	.L128
 2411              	.L127:
1087:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1088:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1089:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // toss CRC (2 last bytes)
1090:openstack/02a-MAClow/IEEE802154Ecsl.c ****       packetfunctions_tossFooter(   ieee154e_vars.ackReceived, LENGTH_CRC);
 2412              		.loc 1 1090 0
 2413 104a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2414 104e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2415 1052 1B6A     		ldr	r3, [r3, #32]
 2416 1054 1846     		mov	r0, r3
 2417 1056 4FF00201 		mov	r1, #2
 2418 105a FFF7FEFF 		bl	packetfunctions_tossFooter
1091:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1092:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // break if invalid CRC
1093:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee154e_vars.ackReceived->l1_crc==FALSE) {
 2419              		.loc 1 1093 0
 2420 105e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2421 1062 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2422 1066 1B6A     		ldr	r3, [r3, #32]
 2423 1068 93F86A30 		ldrb	r3, [r3, #106]	@ zero_extendqisi2
 2424 106c 83F00103 		eor	r3, r3, #1
 2425 1070 DBB2     		uxtb	r3, r3
 2426 1072 002B     		cmp	r3, #0
 2427 1074 7ED1     		bne	.L134
 2428              	.L129:
1094:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // break from the do-while loop and execute the clean-up code below
1095:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
1096:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1097:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1098:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // parse the IEEE802.15.4 header (RX ACK)
1099:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee802154_retrieveHeader(ieee154e_vars.ackReceived,&ieee802514_header);
 2429              		.loc 1 1099 0
 2430 1076 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2431 107a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2432 107e 1A6A     		ldr	r2, [r3, #32]
 2433 1080 07F11003 		add	r3, r7, #16
 2434 1084 1046     		mov	r0, r2
 2435 1086 1946     		mov	r1, r3
 2436 1088 FFF7FEFF 		bl	ieee802154_retrieveHeader
1100:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1101:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // break if invalid IEEE802.15.4 header
1102:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee802514_header.valid==FALSE) {
 2437              		.loc 1 1102 0
 2438 108c 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 2439 108e 83F00103 		eor	r3, r3, #1
 2440 1092 DBB2     		uxtb	r3, r3
 2441 1094 002B     		cmp	r3, #0
 2442 1096 6FD1     		bne	.L135
 2443              	.L130:
1103:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // break from the do-while loop and execute the clean-up code below
1104:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
1105:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1106:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1107:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // store header details in packet buffer
1108:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.ackReceived->l2_frameType  = ieee802514_header.frameType;
 2444              		.loc 1 1108 0
 2445 1098 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2446 109c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2447 10a0 1B6A     		ldr	r3, [r3, #32]
 2448 10a2 BA7C     		ldrb	r2, [r7, #18]	@ zero_extendqisi2
 2449 10a4 83F84920 		strb	r2, [r3, #73]
1109:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.ackReceived->l2_dsn        = ieee802514_header.dsn;
 2450              		.loc 1 1109 0
 2451 10a8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2452 10ac C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2453 10b0 1B6A     		ldr	r3, [r3, #32]
 2454 10b2 7A7E     		ldrb	r2, [r7, #25]	@ zero_extendqisi2
 2455 10b4 83F84A20 		strb	r2, [r3, #74]
1110:openstack/02a-MAClow/IEEE802154Ecsl.c ****       memcpy(&(ieee154e_vars.ackReceived->l2_nextORpreviousHop),&(ieee802514_header.src),sizeof(ope
 2456              		.loc 1 1110 0
 2457 10b8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2458 10bc C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2459 10c0 1B6A     		ldr	r3, [r3, #32]
 2460 10c2 03F13803 		add	r3, r3, #56
 2461 10c6 1D46     		mov	r5, r3
 2462 10c8 07F13C04 		add	r4, r7, #60
 2463 10cc 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2464 10ce 2860     		str	r0, [r5, #0]	@ unaligned
 2465 10d0 6960     		str	r1, [r5, #4]	@ unaligned
 2466 10d2 AA60     		str	r2, [r5, #8]	@ unaligned
 2467 10d4 EB60     		str	r3, [r5, #12]	@ unaligned
 2468 10d6 2378     		ldrb	r3, [r4, #0]
 2469 10d8 2B74     		strb	r3, [r5, #16]
1111:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1112:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // toss the IEEE802.15.4 header
1113:openstack/02a-MAClow/IEEE802154Ecsl.c ****       packetfunctions_tossHeader(ieee154e_vars.ackReceived,ieee802514_header.headerLength);
 2470              		.loc 1 1113 0
 2471 10da 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2472 10de C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2473 10e2 1A6A     		ldr	r2, [r3, #32]
 2474 10e4 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 2475 10e6 1046     		mov	r0, r2
 2476 10e8 1946     		mov	r1, r3
 2477 10ea FFF7FEFF 		bl	packetfunctions_tossHeader
1114:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1115:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // break if invalid ACK
1116:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (isValidAck(&ieee802514_header,ieee154e_vars.dataToSend)==FALSE) {
 2478              		.loc 1 1116 0
 2479 10ee 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2480 10f2 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2481 10f6 5B69     		ldr	r3, [r3, #20]
 2482 10f8 07F11002 		add	r2, r7, #16
 2483 10fc 1046     		mov	r0, r2
 2484 10fe 1946     		mov	r1, r3
 2485 1100 FFF7FEFF 		bl	isValidAck
 2486 1104 0346     		mov	r3, r0
 2487 1106 83F00103 		eor	r3, r3, #1
 2488 110a DBB2     		uxtb	r3, r3
 2489 110c 002B     		cmp	r3, #0
 2490 110e 35D1     		bne	.L136
 2491              	.L131:
1117:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // break from the do-while loop and execute the clean-up code below
1118:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
1119:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1120:openstack/02a-MAClow/IEEE802154Ecsl.c ****       //hanlde IEs --xv poipoi
1121:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee802514_header.ieListPresent==FALSE){
 2492              		.loc 1 1121 0
 2493 1110 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2494 1112 83F00103 		eor	r3, r3, #1
 2495 1116 DBB2     		uxtb	r3, r3
 2496 1118 002B     		cmp	r3, #0
 2497 111a 31D1     		bne	.L137
 2498              	.L132:
1122:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break; //ack should contain IEs.
1123:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1124:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1125:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee154e_processIEs(ieee154e_vars.ackReceived,&lenIE)==FALSE){
 2499              		.loc 1 1125 0
 2500 111c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2501 1120 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2502 1124 1A6A     		ldr	r2, [r3, #32]
 2503 1126 07F10E03 		add	r3, r7, #14
 2504 112a 1046     		mov	r0, r2
 2505 112c 1946     		mov	r1, r3
 2506 112e FFF7FEFF 		bl	ieee154e_processIEs
 2507 1132 0346     		mov	r3, r0
 2508 1134 83F00103 		eor	r3, r3, #1
 2509 1138 DBB2     		uxtb	r3, r3
 2510 113a 002B     		cmp	r3, #0
 2511 113c 22D1     		bne	.L138
 2512              	.L133:
1126:openstack/02a-MAClow/IEEE802154Ecsl.c ****         // invalid IEs in ACK
1127:openstack/02a-MAClow/IEEE802154Ecsl.c ****         break;
1128:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1129:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1130:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // toss the IEs
1131:openstack/02a-MAClow/IEEE802154Ecsl.c ****       packetfunctions_tossHeader(ieee154e_vars.ackReceived,lenIE);
 2513              		.loc 1 1131 0
 2514 113e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2515 1142 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2516 1146 1A6A     		ldr	r2, [r3, #32]
 2517 1148 FB89     		ldrh	r3, [r7, #14]
 2518 114a DBB2     		uxtb	r3, r3
 2519 114c 1046     		mov	r0, r2
 2520 114e 1946     		mov	r1, r3
 2521 1150 FFF7FEFF 		bl	packetfunctions_tossHeader
1132:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1133:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // inform schedule of successful transmission
1134:openstack/02a-MAClow/IEEE802154Ecsl.c ****       schedule_indicateTx(&ieee154e_vars.asn,TRUE);
 2522              		.loc 1 1134 0
 2523 1154 40F20000 		movw	r0, #:lower16:ieee154e_vars
 2524 1158 C0F20000 		movt	r0, #:upper16:ieee154e_vars
 2525 115c 4FF00101 		mov	r1, #1
 2526 1160 FFF7FEFF 		bl	schedule_indicateTx
1135:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1136:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // inform upper layer
1137:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // CSL testing commented
1138:openstack/02a-MAClow/IEEE802154Ecsl.c ****       //notif_sendDone(ieee154e_vars.dataToSend,E_SUCCESS);
1139:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.dataToSend = NULL;
 2527              		.loc 1 1139 0
 2528 1164 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2529 1168 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2530 116c 4FF00002 		mov	r2, #0
 2531 1170 5A61     		str	r2, [r3, #20]
 2532 1172 08E0     		b	.L128
 2533              	.L134:
1095:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 2534              		.loc 1 1095 0
 2535 1174 00BF     		nop
 2536 1176 06E0     		b	.L128
 2537              	.L135:
1104:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 2538              		.loc 1 1104 0
 2539 1178 00BF     		nop
 2540 117a 04E0     		b	.L128
 2541              	.L136:
1118:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 2542              		.loc 1 1118 0
 2543 117c 00BF     		nop
 2544 117e 02E0     		b	.L128
 2545              	.L137:
1122:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break; //ack should contain IEs.
 2546              		.loc 1 1122 0
 2547 1180 00BF     		nop
 2548 1182 00E0     		b	.L128
 2549              	.L138:
1127:openstack/02a-MAClow/IEEE802154Ecsl.c ****         break;
 2550              		.loc 1 1127 0
 2551 1184 00BF     		nop
 2552              	.L128:
1140:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1141:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // in any case, execute the clean-up code below (processing of ACK done)
1142:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } while (0);
1143:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1144:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // free the received ack so corresponding RAM memory can be recycled
1145:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openqueue_freePacketBuffer(ieee154e_vars.ackReceived);
 2553              		.loc 1 1145 0
 2554 1186 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2555 118a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2556 118e 1B6A     		ldr	r3, [r3, #32]
 2557 1190 1846     		mov	r0, r3
 2558 1192 FFF7FEFF 		bl	openqueue_freePacketBuffer
1146:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1147:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clear local variable
1148:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackReceived = NULL;
 2559              		.loc 1 1148 0
 2560 1196 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2561 119a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2562 119e 4FF00002 		mov	r2, #0
 2563 11a2 1A62     		str	r2, [r3, #32]
1149:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1150:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // official end of Tx
1151:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 2564              		.loc 1 1151 0
 2565 11a4 FFF7FEFF 		bl	endOps
 2566              	.L123:
1152:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2567              		.loc 1 1152 0
 2568 11a8 07F15007 		add	r7, r7, #80
 2569 11ac BD46     		mov	sp, r7
 2570 11ae B0BD     		pop	{r4, r5, r7, pc}
 2571              		.cfi_endproc
 2572              	.LFE28:
 2574              		.align	2
 2575              		.global	activity_csl_wakeup_ri1
 2576              		.thumb
 2577              		.thumb_func
 2579              	activity_csl_wakeup_ri1:
 2580              	.LFB29:
1153:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1154:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
1155:openstack/02a-MAClow/IEEE802154Ecsl.c **** //========================== CSL RX MODE ===============================
1156:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
1157:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1158:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1159:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1160:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [wake-up ri1].
1161:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1162:openstack/02a-MAClow/IEEE802154Ecsl.c ****  This method is invoked in ISR-mode from "isr_ieee154ecsl_newChannelSample" function when a new CSL
1163:openstack/02a-MAClow/IEEE802154Ecsl.c ****  
1164:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \note The FSM state should be S_SLEEP (initial state), raising an error in otherwise.
1165:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1166:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_ri1() { // Activity for stage [ri1] on CSL RX Sampling.
 2581              		.loc 1 1166 0
 2582              		.cfi_startproc
 2583              		@ args = 0, pretend = 0, frame = 0
 2584              		@ frame_needed = 1, uses_anonymous_args = 0
 2585 11b0 80B5     		push	{r7, lr}
 2586              	.LCFI69:
 2587              		.cfi_def_cfa_offset 8
 2588              		.cfi_offset 7, -8
 2589              		.cfi_offset 14, -4
 2590 11b2 00AF     		add	r7, sp, #0
 2591              	.LCFI70:
 2592              		.cfi_def_cfa_register 7
1167:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1168:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // if the previous sample took too long or the state is incorrect, we will not be in the right 
1169:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // we register an error indicating the number of CSL sample where the problem have been detecte
1170:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   if (ieee154e_vars.state!=S_SLEEP) {
 2593              		.loc 1 1170 0
 2594 11b4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2595 11b8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2596 11bc 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2597 11be 002B     		cmp	r3, #0
 2598 11c0 14D0     		beq	.L140
1171:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  // log the error
1172:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_START_CSL_SAMPLING,
1173:openstack/02a-MAClow/IEEE802154Ecsl.c **** 								(errorparameter_t)ieee154e_vars.state,
 2599              		.loc 1 1173 0
 2600 11c2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2601 11c6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2602 11ca 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
1172:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_START_CSL_SAMPLING,
 2603              		.loc 1 1172 0
 2604 11cc 1A46     		mov	r2, r3
1174:openstack/02a-MAClow/IEEE802154Ecsl.c **** 								(errorparameter_t)ieee154e_dbg.num_cslSamples);
 2605              		.loc 1 1174 0
 2606 11ce 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 2607 11d2 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 2608 11d6 1B69     		ldr	r3, [r3, #16]
1172:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  openserial_printError(COMPONENT_IEEE802154E,ERR_WRONG_STATE_IN_START_CSL_SAMPLING,
 2609              		.loc 1 1172 0
 2610 11d8 9BB2     		uxth	r3, r3
 2611 11da 4FF00900 		mov	r0, #9
 2612 11de 4FF03A01 		mov	r1, #58
 2613 11e2 FFF7FEFF 		bl	openserial_printError
1175:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1176:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  // Abort in case of error. The signature of the function has been changed (instead of endSlot()
1177:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  // functionality. However, this function is equal for CSL and not-CSL.
1178:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  endOps();
 2614              		.loc 1 1178 0
 2615 11e6 FFF7FEFF 		bl	endOps
1179:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		  return;
 2616              		.loc 1 1179 0
 2617 11ea 17E0     		b	.L139
 2618              	.L140:
1180:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   }
1181:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1182:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // stop using serial
1183:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   openserial_stop();
 2619              		.loc 1 1183 0
 2620 11ec FFF7FEFF 		bl	openserial_stop
1184:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1185:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // change state --> Next State will be S_CSLRXWAKEUPOFFSET in order to prepare for CSL Rx wake-
1186:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   changeState(S_CSLRXWAKEUPOFFSET);
 2621              		.loc 1 1186 0
 2622 11f0 4FF02A00 		mov	r0, #42
 2623 11f4 FFF7FEFF 		bl	changeState
1187:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1188:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // update CSL Mode to RX in order to avoid problems in FSM.
1189:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   ieee154e_vars.cslMode = CSL_RX_MODE;
 2624              		.loc 1 1189 0
 2625 11f8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2626 11fc C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2627 1200 4FF00102 		mov	r2, #1
 2628 1204 83F84520 		strb	r2, [r3, #69]
1190:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1191:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   // arm rt1
1192:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   radiotimer_schedule(DURATION_rt1);
 2629              		.loc 1 1192 0
 2630 1208 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2631 120c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2632 1210 5B6A     		ldr	r3, [r3, #36]
 2633 1212 03F13703 		add	r3, r3, #55
 2634 1216 1846     		mov	r0, r3
 2635 1218 FFF7FEFF 		bl	radiotimer_schedule
 2636              	.L139:
1193:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1194:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2637              		.loc 1 1194 0
 2638 121c 80BD     		pop	{r7, pc}
 2639              		.cfi_endproc
 2640              	.LFE29:
 2642 121e 00BF     		.align	2
 2643              		.global	activity_csl_wakeup_ri2
 2644              		.thumb
 2645              		.thumb_func
 2647              	activity_csl_wakeup_ri2:
 2648              	.LFB30:
1195:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1196:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1197:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1198:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [wake-up ri2].
1199:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1200:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
1201:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to prepare the radio for receiving packets.
1202:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1203:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_ri2() { // Activity for stage [ri2] on CSL RX Sampling.
 2649              		.loc 1 1203 0
 2650              		.cfi_startproc
 2651              		@ args = 0, pretend = 0, frame = 0
 2652              		@ frame_needed = 1, uses_anonymous_args = 0
 2653 1220 80B5     		push	{r7, lr}
 2654              	.LCFI71:
 2655              		.cfi_def_cfa_offset 8
 2656              		.cfi_offset 7, -8
 2657              		.cfi_offset 14, -4
 2658 1222 00AF     		add	r7, sp, #0
 2659              	.LCFI72:
 2660              		.cfi_def_cfa_register 7
1204:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1205:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXWAKEUPPREPARE);
 2661              		.loc 1 1205 0
 2662 1224 4FF02B00 		mov	r0, #43
 2663 1228 FFF7FEFF 		bl	changeState
1206:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1207:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // We use always the same frequency so it is not necessary to change it on radio.
1208:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Enable the radio in Rx mode. The radio does not actively listen yet.
1209:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rxEnable();
 2664              		.loc 1 1209 0
 2665 122c FFF7FEFF 		bl	radio_rxEnable
1210:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnInit=radio_getTimerValue();
 2666              		.loc 1 1210 0
 2667 1230 FFF7FEFF 		bl	radio_getTimerValue
 2668 1234 0246     		mov	r2, r0
 2669 1236 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2670 123a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2671 123e 1A63     		str	r2, [r3, #48]
1211:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnThisSlot=TRUE;
 2672              		.loc 1 1211 0
 2673 1240 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2674 1244 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2675 1248 4FF00102 		mov	r2, #1
 2676 124c 83F83820 		strb	r2, [r3, #56]
1212:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1213:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm rt2
1214:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_rt2);
 2677              		.loc 1 1214 0
 2678 1250 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2679 1254 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2680 1258 5B6A     		ldr	r3, [r3, #36]
 2681 125a 03F15803 		add	r3, r3, #88
 2682 125e 1846     		mov	r0, r3
 2683 1260 FFF7FEFF 		bl	radiotimer_schedule
1215:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1216:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Change state.
1217:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // If this action is not performed before rt2 has expired, we need to manage the error in activi
1218:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // prepare has exceeded the maximum allowed time (duration_rt2).
1219:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXWAKEUPREADY);
 2684              		.loc 1 1219 0
 2685 1264 4FF02C00 		mov	r0, #44
 2686 1268 FFF7FEFF 		bl	changeState
1220:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2687              		.loc 1 1220 0
 2688 126c 80BD     		pop	{r7, pc}
 2689              		.cfi_endproc
 2690              	.LFE30:
 2692 126e 00BF     		.align	2
 2693              		.global	activity_csl_wakeup_rie1
 2694              		.thumb
 2695              		.thumb_func
 2697              	activity_csl_wakeup_rie1:
 2698              	.LFB31:
1221:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1222:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1223:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1224:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling error [wake-up rie1].
1225:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1226:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #rt2 expiring, i.e. timer fires while state = S_CSLRXWAKEUPPREPARE. This is 
1227:openstack/02a-MAClow/IEEE802154Ecsl.c ****   did not have enough time to execute. Chances are to set maxRxDataPrepare too small. The implement
1228:openstack/02a-MAClow/IEEE802154Ecsl.c ****   next CSL sample.
1229:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1230:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_rie1() {  // Activity for error event [rie1] on CSL RX Samplin
 2699              		.loc 1 1230 0
 2700              		.cfi_startproc
 2701              		@ args = 0, pretend = 0, frame = 0
 2702              		@ frame_needed = 1, uses_anonymous_args = 0
 2703 1270 80B5     		push	{r7, lr}
 2704              	.LCFI73:
 2705              		.cfi_def_cfa_offset 8
 2706              		.cfi_offset 7, -8
 2707              		.cfi_offset 14, -4
 2708 1272 00AF     		add	r7, sp, #0
 2709              	.LCFI74:
 2710              		.cfi_def_cfa_register 7
1231:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
1232:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXRXWAKEUPPREPARE_OVERFLOWS,
1233:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state,
 2711              		.loc 1 1233 0
 2712 1274 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2713 1278 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2714 127c 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
1232:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXRXWAKEUPPREPARE_OVERFLOWS,
 2715              		.loc 1 1232 0
 2716 127e 1A46     		mov	r2, r3
1234:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_dbg.num_cslSamples);
 2717              		.loc 1 1234 0
 2718 1280 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 2719 1284 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 2720 1288 1B69     		ldr	r3, [r3, #16]
1232:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXRXWAKEUPPREPARE_OVERFLOWS,
 2721              		.loc 1 1232 0
 2722 128a 9BB2     		uxth	r3, r3
 2723 128c 4FF00900 		mov	r0, #9
 2724 1290 4FF03C01 		mov	r1, #60
 2725 1294 FFF7FEFF 		bl	openserial_printError
1235:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1236:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1237:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 2726              		.loc 1 1237 0
 2727 1298 FFF7FEFF 		bl	endOps
1238:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2728              		.loc 1 1238 0
 2729 129c 80BD     		pop	{r7, pc}
 2730              		.cfi_endproc
 2731              	.LFE31:
 2733 129e 00BF     		.align	2
 2734              		.global	activity_csl_wakeup_ri3
 2735              		.thumb
 2736              		.thumb_func
 2738              	activity_csl_wakeup_ri3:
 2739              	.LFB32:
1239:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1240:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1241:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1242:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [wake-up ri3].
1243:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1244:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
1245:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The radio is configured and this interrupt gives it the "go" signal to start listening.
1246:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1247:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_ri3() { // Activity for stage [ri3] on CSL RX Sampling.
 2740              		.loc 1 1247 0
 2741              		.cfi_startproc
 2742              		@ args = 0, pretend = 0, frame = 0
 2743              		@ frame_needed = 1, uses_anonymous_args = 0
 2744 12a0 80B5     		push	{r7, lr}
 2745              	.LCFI75:
 2746              		.cfi_def_cfa_offset 8
 2747              		.cfi_offset 7, -8
 2748              		.cfi_offset 14, -4
 2749 12a2 00AF     		add	r7, sp, #0
 2750              	.LCFI76:
 2751              		.cfi_def_cfa_register 7
1248:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1249:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXWAKEUPLISTEN);
 2752              		.loc 1 1249 0
 2753 12a4 4FF02D00 		mov	r0, #45
 2754 12a8 FFF7FEFF 		bl	changeState
1250:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1251:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // give the 'go' to receive
1252:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rxNow();
 2755              		.loc 1 1252 0
 2756 12ac FFF7FEFF 		bl	radio_rxNow
1253:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1254:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm rt3
1255:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_rt3);
 2757              		.loc 1 1255 0
 2758 12b0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2759 12b4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2760 12b8 5B6A     		ldr	r3, [r3, #36]
 2761 12ba 03F1AE03 		add	r3, r3, #174
 2762 12be 1846     		mov	r0, r3
 2763 12c0 FFF7FEFF 		bl	radiotimer_schedule
1256:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2764              		.loc 1 1256 0
 2765 12c4 80BD     		pop	{r7, pc}
 2766              		.cfi_endproc
 2767              	.LFE32:
 2769 12c6 00BF     		.align	2
 2770              		.global	activity_csl_wakeup_rie2
 2771              		.thumb
 2772              		.thumb_func
 2774              	activity_csl_wakeup_rie2:
 2775              	.LFB33:
1257:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1258:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1259:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1260:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling error [wake-up rie2].
1261:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1262:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #rt3 expiring, i.e. timer fires while state = S_CSLRXWAKEUPLISTEN. If no pac
1263:openstack/02a-MAClow/IEEE802154Ecsl.c ****   none will be received ever and it is safe to switch of the radio. This timer is set such that the
1264:openstack/02a-MAClow/IEEE802154Ecsl.c ****   duration (#TsLongGT).
1265:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1266:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_rie2() { // Activity for error event [rie2] on CSL RX Sampling
 2776              		.loc 1 1266 0
 2777              		.cfi_startproc
 2778              		@ args = 0, pretend = 0, frame = 0
 2779              		@ frame_needed = 1, uses_anonymous_args = 0
 2780 12c8 80B5     		push	{r7, lr}
 2781              	.LCFI77:
 2782              		.cfi_def_cfa_offset 8
 2783              		.cfi_offset 7, -8
 2784              		.cfi_offset 14, -4
 2785 12ca 00AF     		add	r7, sp, #0
 2786              	.LCFI78:
 2787              		.cfi_def_cfa_register 7
1267:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1268:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 2788              		.loc 1 1268 0
 2789 12cc FFF7FEFF 		bl	endOps
1269:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2790              		.loc 1 1269 0
 2791 12d0 80BD     		pop	{r7, pc}
 2792              		.cfi_endproc
 2793              	.LFE33:
 2795 12d2 00BF     		.align	2
 2796              		.global	activity_csl_wakeup_ri4
 2797              		.thumb
 2798              		.thumb_func
 2800              	activity_csl_wakeup_ri4:
 2801              	.LFB34:
1270:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1271:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1272:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1273:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [wake-up ri4].
1274:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1275:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_startOfFrame" function when a start of frame ev
1276:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to capture the time, cancel #rt3 and arm #rt4 (max time to receive all the p
1277:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1278:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_ri4(PORT_RADIOTIMER_WIDTH capturedTime) {  // Activity for sta
 2802              		.loc 1 1278 0
 2803              		.cfi_startproc
 2804              		@ args = 0, pretend = 0, frame = 8
 2805              		@ frame_needed = 1, uses_anonymous_args = 0
 2806 12d4 80B5     		push	{r7, lr}
 2807              	.LCFI79:
 2808              		.cfi_def_cfa_offset 8
 2809              		.cfi_offset 7, -8
 2810              		.cfi_offset 14, -4
 2811 12d6 82B0     		sub	sp, sp, #8
 2812              	.LCFI80:
 2813              		.cfi_def_cfa_offset 16
 2814 12d8 00AF     		add	r7, sp, #0
 2815              	.LCFI81:
 2816              		.cfi_def_cfa_register 7
 2817 12da 7860     		str	r0, [r7, #4]
1279:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1280:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1281:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXWAKEUP);
 2818              		.loc 1 1281 0
 2819 12dc 4FF02E00 		mov	r0, #46
 2820 12e0 FFF7FEFF 		bl	changeState
1282:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1283:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancel rt3
1284:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 2821              		.loc 1 1284 0
 2822 12e4 FFF7FEFF 		bl	radiotimer_cancel
1285:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1286:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time
1287:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.lastCapturedTime = capturedTime;
 2823              		.loc 1 1287 0
 2824 12e8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2825 12ec C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2826 12f0 7A68     		ldr	r2, [r7, #4]
 2827 12f2 5A62     		str	r2, [r3, #36]
1288:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1289:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time to sync
1290:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.syncCapturedTime = capturedTime;
 2828              		.loc 1 1290 0
 2829 12f4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2830 12f8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2831 12fc 7A68     		ldr	r2, [r7, #4]
 2832 12fe 9A62     		str	r2, [r3, #40]
1291:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1292:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_rt4);
 2833              		.loc 1 1292 0
 2834 1300 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2835 1304 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2836 1308 5B6A     		ldr	r3, [r3, #36]
 2837 130a 03F1A403 		add	r3, r3, #164
 2838 130e 1846     		mov	r0, r3
 2839 1310 FFF7FEFF 		bl	radiotimer_schedule
1293:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2840              		.loc 1 1293 0
 2841 1314 07F10807 		add	r7, r7, #8
 2842 1318 BD46     		mov	sp, r7
 2843 131a 80BD     		pop	{r7, pc}
 2844              		.cfi_endproc
 2845              	.LFE34:
 2847              		.align	2
 2848              		.global	activity_csl_wakeup_rie3
 2849              		.thumb
 2850              		.thumb_func
 2852              	activity_csl_wakeup_rie3:
 2853              	.LFB35:
1294:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1295:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1296:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1297:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling error [wake-up rie3].
1298:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1299:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #rt4 expiring, i.e. timer fires while state = S_CSLRXWAKEUP. This is an erro
1300:openstack/02a-MAClow/IEEE802154Ecsl.c ****   transmit the data packet. The implemented behaviour is to log the error and move on the next CSL 
1301:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1302:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_rie3() {
 2854              		.loc 1 1302 0
 2855              		.cfi_startproc
 2856              		@ args = 0, pretend = 0, frame = 0
 2857              		@ frame_needed = 1, uses_anonymous_args = 0
 2858 131c 80B5     		push	{r7, lr}
 2859              	.LCFI82:
 2860              		.cfi_def_cfa_offset 8
 2861              		.cfi_offset 7, -8
 2862              		.cfi_offset 14, -4
 2863 131e 00AF     		add	r7, sp, #0
 2864              	.LCFI83:
 2865              		.cfi_def_cfa_register 7
1303:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1304:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
1305:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDWAKEUPDURATION_OVERFLOWS,
1306:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state,
 2866              		.loc 1 1306 0
 2867 1320 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2868 1324 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2869 1328 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
1305:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDWAKEUPDURATION_OVERFLOWS,
 2870              		.loc 1 1305 0
 2871 132a 1A46     		mov	r2, r3
1307:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_dbg.num_cslSamples);
 2872              		.loc 1 1307 0
 2873 132c 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 2874 1330 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 2875 1334 1B69     		ldr	r3, [r3, #16]
1305:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDWAKEUPDURATION_OVERFLOWS,
 2876              		.loc 1 1305 0
 2877 1336 9BB2     		uxth	r3, r3
 2878 1338 4FF00900 		mov	r0, #9
 2879 133c 4FF03D01 		mov	r1, #61
 2880 1340 FFF7FEFF 		bl	openserial_printError
1308:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1309:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1310:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 2881              		.loc 1 1310 0
 2882 1344 FFF7FEFF 		bl	endOps
1311:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2883              		.loc 1 1311 0
 2884 1348 80BD     		pop	{r7, pc}
 2885              		.cfi_endproc
 2886              	.LFE35:
 2888 134a 00BF     		.align	2
 2889              		.global	activity_csl_wakeup_rie4
 2890              		.thumb
 2891              		.thumb_func
 2893              	activity_csl_wakeup_rie4:
 2894              	.LFB36:
1312:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1313:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1314:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling error [wake-up rie4].
1315:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1316:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by rztime+TsSlotDuration expiring, i.e. timer fires while state = S_CSLRXWAKEUP
1317:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The behaviour is to free mem used and restart CSL sampling.
1318:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1319:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_rie4() {
 2895              		.loc 1 1319 0
 2896              		.cfi_startproc
 2897              		@ args = 0, pretend = 0, frame = 0
 2898              		@ frame_needed = 1, uses_anonymous_args = 0
 2899 134c 80B5     		push	{r7, lr}
 2900              	.LCFI84:
 2901              		.cfi_def_cfa_offset 8
 2902              		.cfi_offset 7, -8
 2903              		.cfi_offset 14, -4
 2904 134e 00AF     		add	r7, sp, #0
 2905              	.LCFI85:
 2906              		.cfi_def_cfa_register 7
1320:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1321:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // free memory
1322:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openqueue_freePacketBuffer(ieee154e_vars.dataReceived);
 2907              		.loc 1 1322 0
 2908 1350 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2909 1354 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2910 1358 9B69     		ldr	r3, [r3, #24]
 2911 135a 1846     		mov	r0, r3
 2912 135c FFF7FEFF 		bl	openqueue_freePacketBuffer
1323:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1324:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clear local variable
1325:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.dataReceived = NULL;
 2913              		.loc 1 1325 0
 2914 1360 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2915 1364 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2916 1368 4FF00002 		mov	r2, #0
 2917 136c 9A61     		str	r2, [r3, #24]
1326:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1327:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1328:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 2918              		.loc 1 1328 0
 2919 136e FFF7FEFF 		bl	endOps
1329:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 2920              		.loc 1 1329 0
 2921 1372 80BD     		pop	{r7, pc}
 2922              		.cfi_endproc
 2923              	.LFE36:
 2925              		.align	2
 2926              		.global	activity_csl_wakeup_ri5
 2927              		.thumb
 2928              		.thumb_func
 2930              	activity_csl_wakeup_ri5:
 2931              	.LFB37:
1330:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1331:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1332:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1333:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [wake-up ri5].
1334:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1335:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_endOfFrame" function when a end of frame event 
1336:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to change state, cancel #rt4, validate wake-up frame and destination, and ar
1337:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1338:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_wakeup_ri5(PORT_RADIOTIMER_WIDTH capturedTime) {
 2932              		.loc 1 1338 0
 2933              		.cfi_startproc
 2934              		@ args = 0, pretend = 0, frame = 96
 2935              		@ frame_needed = 1, uses_anonymous_args = 0
 2936 1374 90B5     		push	{r4, r7, lr}
 2937              	.LCFI86:
 2938              		.cfi_def_cfa_offset 12
 2939              		.cfi_offset 4, -12
 2940              		.cfi_offset 7, -8
 2941              		.cfi_offset 14, -4
 2942 1376 9BB0     		sub	sp, sp, #108
 2943              	.LCFI87:
 2944              		.cfi_def_cfa_offset 120
 2945 1378 02AF     		add	r7, sp, #8
 2946              	.LCFI88:
 2947              		.cfi_def_cfa 7, 112
 2948 137a 7860     		str	r0, [r7, #4]
1339:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1340:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// Only for CSL Testing due to we are hard-coding destination (neighbor) address on schedule, pack
1341:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	open_addr_t myID;
1342:openstack/02a-MAClow/IEEE802154Ecsl.c ****     myID.addr_64b[0]=0x00;
 2949              		.loc 1 1342 0
 2950 137c 4FF00003 		mov	r3, #0
 2951 1380 87F84D30 		strb	r3, [r7, #77]
1343:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	myID.addr_64b[1]=0x11;
 2952              		.loc 1 1343 0
 2953 1384 4FF01103 		mov	r3, #17
 2954 1388 87F84E30 		strb	r3, [r7, #78]
1344:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	myID.addr_64b[2]=0x22;
 2955              		.loc 1 1344 0
 2956 138c 4FF02203 		mov	r3, #34
 2957 1390 87F84F30 		strb	r3, [r7, #79]
1345:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	myID.addr_64b[3]=0x33;
 2958              		.loc 1 1345 0
 2959 1394 4FF03303 		mov	r3, #51
 2960 1398 87F85030 		strb	r3, [r7, #80]
1346:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	myID.addr_64b[4]=0x44;
 2961              		.loc 1 1346 0
 2962 139c 4FF04403 		mov	r3, #68
 2963 13a0 87F85130 		strb	r3, [r7, #81]
1347:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	myID.addr_64b[5]=0x55;
 2964              		.loc 1 1347 0
 2965 13a4 4FF05503 		mov	r3, #85
 2966 13a8 87F85230 		strb	r3, [r7, #82]
1348:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	myID.addr_64b[6]=0x66;
 2967              		.loc 1 1348 0
 2968 13ac 4FF06603 		mov	r3, #102
 2969 13b0 87F85330 		strb	r3, [r7, #83]
1349:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	myID.addr_64b[7]=0x77;
 2970              		.loc 1 1349 0
 2971 13b4 4FF07703 		mov	r3, #119
 2972 13b8 87F85430 		strb	r3, [r7, #84]
1350:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1351:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	myID.type=ADDR_64B;
 2973              		.loc 1 1351 0
 2974 13bc 4FF00203 		mov	r3, #2
 2975 13c0 87F84C30 		strb	r3, [r7, #76]
1352:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1353:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// En este punto ya hemos recibido la trama por lo que hay que hacer las siguientes validaciones:
1354:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   1.- Cambiar el estado a S_CSLRXWAKEUPVALIDATE y cancelar el temporizador rt4.
1355:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   2.- Apagar la radio.
1356:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   3.- Analizar el mensaje recibido y parsear su cabecera.
1357:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   4.- Verificar que se trata de una trama de tipo wake-up.
1358:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   5.- Comprobar que el destinatario soy yo mismo.
1359:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//
1360:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// En caso afirmativo, utilizamos el Rendezvous time recibido para saber cuánto tiempo hay que do
1361:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// En caso negativo, desactivamos la radio e iniciamos de nuevo el proceso de channel sampling.
1362:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1363:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	ieee802154_header_iht ieee802514_header;
1364:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	uint16_t rztime;
1365:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1366:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // actualizamos el estado.
1367:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXWAKEUPVALIDATE);
 2976              		.loc 1 1367 0
 2977 13c4 4FF02F00 		mov	r0, #47
 2978 13c8 FFF7FEFF 		bl	changeState
1368:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1369:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancelamos el timer #rt4
1370:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 2979              		.loc 1 1370 0
 2980 13cc FFF7FEFF 		bl	radiotimer_cancel
1371:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1372:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // apagamos la radio
1373:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rfOff();
 2981              		.loc 1 1373 0
 2982 13d0 FFF7FEFF 		bl	radio_rfOff
1374:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1375:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // obtenemos un buffer en el cual poder guardar los datos recibidos.
1376:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.wakeupReceived = openqueue_getFreePacketBuffer(COMPONENT_IEEE802154E);
 2983              		.loc 1 1376 0
 2984 13d4 4FF00900 		mov	r0, #9
 2985 13d8 FFF7FEFF 		bl	openqueue_getFreePacketBuffer
 2986 13dc 0246     		mov	r2, r0
 2987 13de 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2988 13e2 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2989 13e6 1A64     		str	r2, [r3, #64]
1377:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.wakeupReceived==NULL) {
 2990              		.loc 1 1377 0
 2991 13e8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 2992 13ec C0F20003 		movt	r3, #:upper16:ieee154e_vars
 2993 13f0 1B6C     		ldr	r3, [r3, #64]
 2994 13f2 002B     		cmp	r3, #0
 2995 13f4 0CD1     		bne	.L150
1378:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // registro del error & fin de operaciones.
1379:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openserial_printError(COMPONENT_IEEE802154E,ERR_NO_FREE_PACKET_BUFFER, (errorparameter_t)0, (
 2996              		.loc 1 1379 0
 2997 13f6 4FF00900 		mov	r0, #9
 2998 13fa 4FF02C01 		mov	r1, #44
 2999 13fe 4FF00002 		mov	r2, #0
 3000 1402 4FF00003 		mov	r3, #0
 3001 1406 FFF7FEFF 		bl	openserial_printError
1380:openstack/02a-MAClow/IEEE802154Ecsl.c ****       endOps();
 3002              		.loc 1 1380 0
 3003 140a FFF7FEFF 		bl	endOps
 3004 140e 14E1     		b	.L149
 3005              	.L150:
1381:openstack/02a-MAClow/IEEE802154Ecsl.c ****       return;
1382:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
1383:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1384:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Declaración de propiedad sobre el paquete.
1385:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.wakeupReceived->creator = COMPONENT_IEEE802154E;
 3006              		.loc 1 1385 0
 3007 1410 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3008 1414 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3009 1418 1B6C     		ldr	r3, [r3, #64]
 3010 141a 4FF00902 		mov	r2, #9
 3011 141e 1A70     		strb	r2, [r3, #0]
1386:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.wakeupReceived->owner   = COMPONENT_IEEE802154E;
 3012              		.loc 1 1386 0
 3013 1420 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3014 1424 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3015 1428 1B6C     		ldr	r3, [r3, #64]
 3016 142a 4FF00902 		mov	r2, #9
 3017 142e 5A70     		strb	r2, [r3, #1]
1387:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1388:openstack/02a-MAClow/IEEE802154Ecsl.c ****    /*
1389:openstack/02a-MAClow/IEEE802154Ecsl.c ****    The do-while loop that follows is a little parsing trick.
1390:openstack/02a-MAClow/IEEE802154Ecsl.c ****    Because it contains a while(0) condition, it gets executed only once.
1391:openstack/02a-MAClow/IEEE802154Ecsl.c ****    The behavior is:
1392:openstack/02a-MAClow/IEEE802154Ecsl.c ****    - if a break occurs inside the do{} body, the error code below the loop gets executed. This indi
1393:openstack/02a-MAClow/IEEE802154Ecsl.c ****    - if a return occurs inside the do{} body, the error code below the loop does not get executed. 
1394:openstack/02a-MAClow/IEEE802154Ecsl.c ****    */
1395:openstack/02a-MAClow/IEEE802154Ecsl.c ****    do { // Este "loop" es ejecutado sólo en una ocasión.
1396:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1397:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // Obtenemos la trama con los datos recibidos desde el buffer de recepción de la radio.
1398:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.wakeupReceived->payload = &(ieee154e_vars.wakeupReceived->packet[FIRST_FRAME_BY
 3018              		.loc 1 1398 0
 3019 1430 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3020 1434 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3021 1438 1A6C     		ldr	r2, [r3, #64]
 3022 143a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3023 143e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3024 1442 1B6C     		ldr	r3, [r3, #64]
 3025 1444 03F16C03 		add	r3, r3, #108
 3026 1448 5360     		str	r3, [r2, #4]
1399:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getWakeUpFrame (       ieee154e_vars.wakeupReceived->payload,
 3027              		.loc 1 1399 0
 3028 144a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3029 144e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3030 1452 1B6C     		ldr	r3, [r3, #64]
 3031 1454 5968     		ldr	r1, [r3, #4]
1400:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.wakeupReceived->length,
 3032              		.loc 1 1400 0
 3033 1456 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3034 145a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3035 145e 1B6C     		ldr	r3, [r3, #64]
1399:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getWakeUpFrame (       ieee154e_vars.wakeupReceived->payload,
 3036              		.loc 1 1399 0
 3037 1460 03F10802 		add	r2, r3, #8
1401:openstack/02a-MAClow/IEEE802154Ecsl.c ****                              sizeof(ieee154e_vars.wakeupReceived->packet),
1402:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.wakeupReceived->l1_rssi,
 3038              		.loc 1 1402 0
 3039 1464 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3040 1468 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3041 146c 1B6C     		ldr	r3, [r3, #64]
1399:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getWakeUpFrame (       ieee154e_vars.wakeupReceived->payload,
 3042              		.loc 1 1399 0
 3043 146e 03F16804 		add	r4, r3, #104
1403:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.wakeupReceived->l1_lqi,
 3044              		.loc 1 1403 0
 3045 1472 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3046 1476 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3047 147a 1B6C     		ldr	r3, [r3, #64]
1399:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getWakeUpFrame (       ieee154e_vars.wakeupReceived->payload,
 3048              		.loc 1 1399 0
 3049 147c 03F16900 		add	r0, r3, #105
1404:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.wakeupReceived->l1_crc);
 3050              		.loc 1 1404 0
 3051 1480 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3052 1484 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3053 1488 1B6C     		ldr	r3, [r3, #64]
1399:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getWakeUpFrame (       ieee154e_vars.wakeupReceived->payload,
 3054              		.loc 1 1399 0
 3055 148a 03F16A03 		add	r3, r3, #106
 3056 148e 0090     		str	r0, [sp, #0]
 3057 1490 0193     		str	r3, [sp, #4]
 3058 1492 0846     		mov	r0, r1
 3059 1494 1146     		mov	r1, r2
 3060 1496 4FF08202 		mov	r2, #130
 3061 149a 2346     		mov	r3, r4
 3062 149c FFF7FEFF 		bl	radio_getWakeUpFrame
1405:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1406:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // Finalizamos si la longitud no es correcta.
1407:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee154e_vars.wakeupReceived->length<LENGTH_CRC || ieee154e_vars.wakeupReceived->length>L
 3063              		.loc 1 1407 0
 3064 14a0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3065 14a4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3066 14a8 1B6C     		ldr	r3, [r3, #64]
 3067 14aa 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3068 14ac 012B     		cmp	r3, #1
 3069 14ae 07D9     		bls	.L152
 3070              		.loc 1 1407 0 is_stmt 0 discriminator 1
 3071 14b0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3072 14b4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3073 14b8 1B6C     		ldr	r3, [r3, #64]
 3074 14ba 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3075 14bc 802B     		cmp	r3, #128
 3076 14be 0ED9     		bls	.L153
 3077              	.L152:
1408:openstack/02a-MAClow/IEEE802154Ecsl.c ****         openserial_printError(COMPONENT_IEEE802154E,ERR_INVALIDPACKETFROMRADIO, (errorparameter_t)2
 3078              		.loc 1 1408 0 is_stmt 1
 3079 14c0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3080 14c4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3081 14c8 1B6C     		ldr	r3, [r3, #64]
 3082 14ca 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3083 14cc 4FF00900 		mov	r0, #9
 3084 14d0 4FF03701 		mov	r1, #55
 3085 14d4 4FF00202 		mov	r2, #2
 3086 14d8 FFF7FEFF 		bl	openserial_printError
1409:openstack/02a-MAClow/IEEE802154Ecsl.c ****         break;
 3087              		.loc 1 1409 0
 3088 14dc 9CE0     		b	.L154
 3089              	.L153:
1410:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1411:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1412:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // toss CRC (2 últimos bytes)
1413:openstack/02a-MAClow/IEEE802154Ecsl.c ****       packetfunctions_tossFooter(ieee154e_vars.wakeupReceived, LENGTH_CRC);
 3090              		.loc 1 1413 0
 3091 14de 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3092 14e2 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3093 14e6 1B6C     		ldr	r3, [r3, #64]
 3094 14e8 1846     		mov	r0, r3
 3095 14ea 4FF00201 		mov	r1, #2
 3096 14ee FFF7FEFF 		bl	packetfunctions_tossFooter
1414:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1415:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // si CRC no es válido, finalizamos el proceso.
1416:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee154e_vars.wakeupReceived->l1_crc==FALSE) { break; }
 3097              		.loc 1 1416 0
 3098 14f2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3099 14f6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3100 14fa 1B6C     		ldr	r3, [r3, #64]
 3101 14fc 93F86A30 		ldrb	r3, [r3, #106]	@ zero_extendqisi2
 3102 1500 83F00103 		eor	r3, r3, #1
 3103 1504 DBB2     		uxtb	r3, r3
 3104 1506 002B     		cmp	r3, #0
 3105 1508 40F08380 		bne	.L161
 3106              	.L155:
1417:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1418:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // parseamos la trama IEEE802.15.4 WAKE-UP y su cabecera.
1419:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee802154_retrieveWakeUpFrame(ieee154e_vars.wakeupReceived,&ieee802514_header,&rztime);
 3107              		.loc 1 1419 0
 3108 150c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3109 1510 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3110 1514 196C     		ldr	r1, [r3, #64]
 3111 1516 07F10C02 		add	r2, r7, #12
 3112 151a 07F10A03 		add	r3, r7, #10
 3113 151e 0846     		mov	r0, r1
 3114 1520 1146     		mov	r1, r2
 3115 1522 1A46     		mov	r2, r3
 3116 1524 FFF7FEFF 		bl	ieee802154_retrieveWakeUpFrame
1420:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1421:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // En el caso de que no sea una cabecera IEEE802.15.4 válida, finalizamos el proceso.
1422:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee802514_header.valid==FALSE) { break; }
 3117              		.loc 1 1422 0
 3118 1528 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 3119 152a 83F00103 		eor	r3, r3, #1
 3120 152e DBB2     		uxtb	r3, r3
 3121 1530 002B     		cmp	r3, #0
 3122 1532 70D1     		bne	.L162
 3123              	.L156:
1423:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1424:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // Verificamos que se trata de una trama WAKE-UP, perteneciente a la misma PAN ID, y dirigida
1425:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if(ieee802514_header.frameType==IEEE154_TYPE_MULTIPURPOSE) {
 3124              		.loc 1 1425 0
 3125 1534 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3126 1536 052B     		cmp	r3, #5
 3127 1538 6ED1     		bne	.L154
1426:openstack/02a-MAClow/IEEE802154Ecsl.c ****      	  //if(packetfunctions_sameAddress(&ieee802514_header.dest,idmanager_getMyID(ADDR_16B)) && --
1427:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	  if(packetfunctions_sameAddress(&ieee802514_header.dest, &myID) &&
 3128              		.loc 1 1427 0
 3129 153a 07F10C03 		add	r3, r7, #12
 3130 153e 03F11B02 		add	r2, r3, #27
 3131 1542 07F14C03 		add	r3, r7, #76
 3132 1546 1046     		mov	r0, r2
 3133 1548 1946     		mov	r1, r3
 3134 154a FFF7FEFF 		bl	packetfunctions_sameAddress
 3135 154e 0346     		mov	r3, r0
 3136 1550 002B     		cmp	r3, #0
 3137 1552 34D0     		beq	.L157
1428:openstack/02a-MAClow/IEEE802154Ecsl.c ****    		    packetfunctions_sameAddress(&ieee802514_header.panid,idmanager_getMyID(ADDR_PANID))) {
 3138              		.loc 1 1428 0 discriminator 1
 3139 1554 4FF00400 		mov	r0, #4
 3140 1558 FFF7FEFF 		bl	idmanager_getMyID
 3141 155c 0346     		mov	r3, r0
 3142 155e 07F10C02 		add	r2, r7, #12
 3143 1562 02F10A02 		add	r2, r2, #10
 3144 1566 1046     		mov	r0, r2
 3145 1568 1946     		mov	r1, r3
 3146 156a FFF7FEFF 		bl	packetfunctions_sameAddress
 3147 156e 0346     		mov	r3, r0
1427:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	  if(packetfunctions_sameAddress(&ieee802514_header.dest, &myID) &&
 3148              		.loc 1 1427 0 discriminator 1
 3149 1570 002B     		cmp	r3, #0
 3150 1572 24D0     		beq	.L157
1429:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1430:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	   // En este caso, debemos dormir el tiempo indicado por RZ Time, estableciendo el estado a S
1431:openstack/02a-MAClow/IEEE802154Ecsl.c ****  	       changeState(S_CSLRXDATAOFFSET);
 3151              		.loc 1 1431 0
 3152 1574 4FF03000 		mov	r0, #48
 3153 1578 FFF7FEFF 		bl	changeState
1432:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1433:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	   // Tratamos el caso en el cual rztime_ie.time sea cero, es decir, sea la ultima trama wake-
1434:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	   if (rztime == 0) {
 3154              		.loc 1 1434 0
 3155 157c 7B89     		ldrh	r3, [r7, #10]
 3156 157e 002B     		cmp	r3, #0
 3157 1580 0AD1     		bne	.L158
1435:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	     // Establecemos el timer rt1 (consideramos el mismo tiempo de offset para la recepción d
1436:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	     radiotimer_schedule(DURATION_rt1);
 3158              		.loc 1 1436 0
 3159 1582 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3160 1586 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3161 158a 5B6A     		ldr	r3, [r3, #36]
 3162 158c 03F13703 		add	r3, r3, #55
 3163 1590 1846     		mov	r0, r3
 3164 1592 FFF7FEFF 		bl	radiotimer_schedule
 3165 1596 0BE0     		b	.L159
 3166              	.L158:
1437:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	   } else {
1438:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	     // Establecemos el timer al valor rt1 pero desplazado el tiempo indicado desde el rendezv
1439:openstack/02a-MAClow/IEEE802154Ecsl.c ****         	 radiotimer_schedule(DURATION_rt1 + rztime);
 3167              		.loc 1 1439 0
 3168 1598 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3169 159c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3170 15a0 5A6A     		ldr	r2, [r3, #36]
 3171 15a2 7B89     		ldrh	r3, [r7, #10]
 3172 15a4 D318     		adds	r3, r2, r3
 3173 15a6 03F13703 		add	r3, r3, #55
 3174 15aa 1846     		mov	r0, r3
 3175 15ac FFF7FEFF 		bl	radiotimer_schedule
 3176              	.L159:
1440:openstack/02a-MAClow/IEEE802154Ecsl.c ****            }
1441:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1442:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	   // registro del tiempo de captura
1443:openstack/02a-MAClow/IEEE802154Ecsl.c ****            ieee154e_vars.lastCapturedTime = capturedTime;
 3177              		.loc 1 1443 0
 3178 15b0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3179 15b4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3180 15b8 7A68     		ldr	r2, [r7, #4]
 3181 15ba 5A62     		str	r2, [r3, #36]
 3182 15bc 3DE0     		b	.L149
 3183              	.L157:
1444:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1445:openstack/02a-MAClow/IEEE802154Ecsl.c ****            // si hemos llegado aquí, retornamos para no ejecutar el codigo inferior.
1446:openstack/02a-MAClow/IEEE802154Ecsl.c ****            return;
1447:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	 }
1448:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	 // En el caso que sea una trama dentro de mi PANID pero no dirigida a mi, entonces dormimos u
1449:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	 //   - RZ time + Maximum length payload frame + secure ack frame (consideraremos un tiempo ig
1450:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	 // dado que TsSlotDuration es el tiempo utilizado en OpenWSN-TSCH para enviar y recibir una t
1451:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	 else if( ! packetfunctions_sameAddress(&ieee802514_header.dest,idmanager_getMyID(ADDR_16B)) &
 3184              		.loc 1 1451 0
 3185 15be 4FF00100 		mov	r0, #1
 3186 15c2 FFF7FEFF 		bl	idmanager_getMyID
 3187 15c6 0346     		mov	r3, r0
 3188 15c8 07F10C02 		add	r2, r7, #12
 3189 15cc 02F11B02 		add	r2, r2, #27
 3190 15d0 1046     		mov	r0, r2
 3191 15d2 1946     		mov	r1, r3
 3192 15d4 FFF7FEFF 		bl	packetfunctions_sameAddress
 3193 15d8 0346     		mov	r3, r0
 3194 15da 83F00103 		eor	r3, r3, #1
 3195 15de DBB2     		uxtb	r3, r3
 3196 15e0 002B     		cmp	r3, #0
 3197 15e2 19D0     		beq	.L154
1452:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	   		    packetfunctions_sameAddress(&ieee802514_header.panid,idmanager_getMyID(ADDR_PANID))) 
 3198              		.loc 1 1452 0 discriminator 1
 3199 15e4 4FF00400 		mov	r0, #4
 3200 15e8 FFF7FEFF 		bl	idmanager_getMyID
 3201 15ec 0346     		mov	r3, r0
 3202 15ee 07F10C02 		add	r2, r7, #12
 3203 15f2 02F10A02 		add	r2, r2, #10
 3204 15f6 1046     		mov	r0, r2
 3205 15f8 1946     		mov	r1, r3
 3206 15fa FFF7FEFF 		bl	packetfunctions_sameAddress
 3207 15fe 0346     		mov	r3, r0
1451:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	 else if( ! packetfunctions_sameAddress(&ieee802514_header.dest,idmanager_getMyID(ADDR_16B)) &
 3208              		.loc 1 1451 0 discriminator 1
 3209 1600 002B     		cmp	r3, #0
 3210 1602 09D0     		beq	.L154
1453:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1454:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	     // La limpieza del paquete y los datos recibidos será realizada en el metodo activity_cs
1455:openstack/02a-MAClow/IEEE802154Ecsl.c ****     		 radiotimer_schedule(rztime + TsSlotDuration);
 3211              		.loc 1 1455 0
 3212 1604 7B89     		ldrh	r3, [r7, #10]
 3213 1606 03F5F673 		add	r3, r3, #492
 3214 160a 1846     		mov	r0, r3
 3215 160c FFF7FEFF 		bl	radiotimer_schedule
 3216 1610 13E0     		b	.L149
 3217              	.L161:
1416:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee154e_vars.wakeupReceived->l1_crc==FALSE) { break; }
 3218              		.loc 1 1416 0
 3219 1612 00BF     		nop
 3220 1614 00E0     		b	.L154
 3221              	.L162:
1422:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee802514_header.valid==FALSE) { break; }
 3222              		.loc 1 1422 0
 3223 1616 00BF     		nop
 3224              	.L154:
1456:openstack/02a-MAClow/IEEE802154Ecsl.c ****     		 return;
1457:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	 }
1458:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1459:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1460:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } while(0);
1461:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1462:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // En cualquier otro caso, descartamos el paquete e iniciamos de nuevo el proceso de channel sam
1463:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1464:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openqueue_freePacketBuffer(ieee154e_vars.wakeupReceived);
 3225              		.loc 1 1464 0
 3226 1618 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3227 161c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3228 1620 1B6C     		ldr	r3, [r3, #64]
 3229 1622 1846     		mov	r0, r3
 3230 1624 FFF7FEFF 		bl	openqueue_freePacketBuffer
1465:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1466:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clear local variable
1467:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.wakeupReceived = NULL;
 3231              		.loc 1 1467 0
 3232 1628 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3233 162c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3234 1630 4FF00002 		mov	r2, #0
 3235 1634 1A64     		str	r2, [r3, #64]
1468:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1469:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1470:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 3236              		.loc 1 1470 0
 3237 1636 FFF7FEFF 		bl	endOps
 3238              	.L149:
1471:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 3239              		.loc 1 1471 0
 3240 163a 07F16407 		add	r7, r7, #100
 3241 163e BD46     		mov	sp, r7
 3242 1640 90BD     		pop	{r4, r7, pc}
 3243              		.cfi_endproc
 3244              	.LFE37:
 3246 1642 00BF     		.align	2
 3247              		.global	activity_csl_data_ri2
 3248              		.thumb
 3249              		.thumb_func
 3251              	activity_csl_data_ri2:
 3252              	.LFB38:
1472:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1473:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1474:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1475:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data ri2].
1476:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1477:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
1478:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to prepare the radio for receiving packets.
1479:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1480:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1481:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ri2() {
 3253              		.loc 1 1481 0
 3254              		.cfi_startproc
 3255              		@ args = 0, pretend = 0, frame = 0
 3256              		@ frame_needed = 1, uses_anonymous_args = 0
 3257 1644 80B5     		push	{r7, lr}
 3258              	.LCFI89:
 3259              		.cfi_def_cfa_offset 8
 3260              		.cfi_offset 7, -8
 3261              		.cfi_offset 14, -4
 3262 1646 00AF     		add	r7, sp, #0
 3263              	.LCFI90:
 3264              		.cfi_def_cfa_register 7
1482:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1483:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXDATAPREPARE);
 3265              		.loc 1 1483 0
 3266 1648 4FF03100 		mov	r0, #49
 3267 164c FFF7FEFF 		bl	changeState
1484:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1485:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // We use always the same frequency so it is not necessary to change it on radio.
1486:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Enable the radio in Rx mode. The radio does not actively listen yet.
1487:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rxEnable();
 3268              		.loc 1 1487 0
 3269 1650 FFF7FEFF 		bl	radio_rxEnable
1488:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnInit=radio_getTimerValue();
 3270              		.loc 1 1488 0
 3271 1654 FFF7FEFF 		bl	radio_getTimerValue
 3272 1658 0246     		mov	r2, r0
 3273 165a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3274 165e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3275 1662 1A63     		str	r2, [r3, #48]
1489:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnThisSlot=TRUE;
 3276              		.loc 1 1489 0
 3277 1664 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3278 1668 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3279 166c 4FF00102 		mov	r2, #1
 3280 1670 83F83820 		strb	r2, [r3, #56]
1490:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1491:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm rt2
1492:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_rt2);
 3281              		.loc 1 1492 0
 3282 1674 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3283 1678 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3284 167c 5B6A     		ldr	r3, [r3, #36]
 3285 167e 03F15803 		add	r3, r3, #88
 3286 1682 1846     		mov	r0, r3
 3287 1684 FFF7FEFF 		bl	radiotimer_schedule
1493:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1494:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1495:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // If this action is not performed before rt2 has expired, we need to manage the error in activi
1496:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // prepare has exceeded the maximum allowed time (duration_rt2).
1497:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXDATAREADY);
 3288              		.loc 1 1497 0
 3289 1688 4FF03200 		mov	r0, #50
 3290 168c FFF7FEFF 		bl	changeState
1498:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 3291              		.loc 1 1498 0
 3292 1690 80BD     		pop	{r7, pc}
 3293              		.cfi_endproc
 3294              	.LFE38:
 3296 1692 00BF     		.align	2
 3297              		.global	activity_csl_data_rie1
 3298              		.thumb
 3299              		.thumb_func
 3301              	activity_csl_data_rie1:
 3302              	.LFB39:
1499:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1500:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1501:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1502:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling error [data_rie1].
1503:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1504:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #rt2 expiring, i.e. timer fires while state = S_CSLRXDATAPREPARE. This is re
1505:openstack/02a-MAClow/IEEE802154Ecsl.c ****   did not have enough time to execute. Chances are to set maxRxDataPrepare too small. The implement
1506:openstack/02a-MAClow/IEEE802154Ecsl.c ****   next CSL sample.
1507:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1508:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_rie1() {  // Activity for error event [rie1] on CSL RX Sampling.
 3303              		.loc 1 1508 0
 3304              		.cfi_startproc
 3305              		@ args = 0, pretend = 0, frame = 0
 3306              		@ frame_needed = 1, uses_anonymous_args = 0
 3307 1694 80B5     		push	{r7, lr}
 3308              	.LCFI91:
 3309              		.cfi_def_cfa_offset 8
 3310              		.cfi_offset 7, -8
 3311              		.cfi_offset 14, -4
 3312 1696 00AF     		add	r7, sp, #0
 3313              	.LCFI92:
 3314              		.cfi_def_cfa_register 7
1509:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
1510:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXRXDATAPREPARE_OVERFLOWS,
1511:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state,
 3315              		.loc 1 1511 0
 3316 1698 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3317 169c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3318 16a0 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
1510:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXRXDATAPREPARE_OVERFLOWS,
 3319              		.loc 1 1510 0
 3320 16a2 1A46     		mov	r2, r3
1512:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_dbg.num_cslSamples);
 3321              		.loc 1 1512 0
 3322 16a4 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 3323 16a8 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 3324 16ac 1B69     		ldr	r3, [r3, #16]
1510:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXRXDATAPREPARE_OVERFLOWS,
 3325              		.loc 1 1510 0
 3326 16ae 9BB2     		uxth	r3, r3
 3327 16b0 4FF00900 		mov	r0, #9
 3328 16b4 4FF02401 		mov	r1, #36
 3329 16b8 FFF7FEFF 		bl	openserial_printError
1513:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1514:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 3330              		.loc 1 1514 0
 3331 16bc FFF7FEFF 		bl	endOps
1515:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 3332              		.loc 1 1515 0
 3333 16c0 80BD     		pop	{r7, pc}
 3334              		.cfi_endproc
 3335              	.LFE39:
 3337 16c2 00BF     		.align	2
 3338              		.global	activity_csl_data_ri3
 3339              		.thumb
 3340              		.thumb_func
 3342              	activity_csl_data_ri3:
 3343              	.LFB40:
1516:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1517:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1518:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1519:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data ri3].
1520:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1521:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
1522:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The radio is configured and this interrupt gives it the "go" signal to start listening.
1523:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1524:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ri3() { // Activity for stage [data ri3] on CSL RX Sampling.
 3344              		.loc 1 1524 0
 3345              		.cfi_startproc
 3346              		@ args = 0, pretend = 0, frame = 0
 3347              		@ frame_needed = 1, uses_anonymous_args = 0
 3348 16c4 80B5     		push	{r7, lr}
 3349              	.LCFI93:
 3350              		.cfi_def_cfa_offset 8
 3351              		.cfi_offset 7, -8
 3352              		.cfi_offset 14, -4
 3353 16c6 00AF     		add	r7, sp, #0
 3354              	.LCFI94:
 3355              		.cfi_def_cfa_register 7
1525:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1526:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXDATALISTEN);
 3356              		.loc 1 1526 0
 3357 16c8 4FF03300 		mov	r0, #51
 3358 16cc FFF7FEFF 		bl	changeState
1527:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1528:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // give the 'go' to receive
1529:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rxNow();
 3359              		.loc 1 1529 0
 3360 16d0 FFF7FEFF 		bl	radio_rxNow
1530:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1531:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm rt3
1532:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_rt3);
 3361              		.loc 1 1532 0
 3362 16d4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3363 16d8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3364 16dc 5B6A     		ldr	r3, [r3, #36]
 3365 16de 03F1AE03 		add	r3, r3, #174
 3366 16e2 1846     		mov	r0, r3
 3367 16e4 FFF7FEFF 		bl	radiotimer_schedule
1533:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 3368              		.loc 1 1533 0
 3369 16e8 80BD     		pop	{r7, pc}
 3370              		.cfi_endproc
 3371              	.LFE40:
 3373 16ea 00BF     		.align	2
 3374              		.global	activity_csl_data_rie2
 3375              		.thumb
 3376              		.thumb_func
 3378              	activity_csl_data_rie2:
 3379              	.LFB41:
1534:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1535:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1536:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1537:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling error [data rie2].
1538:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1539:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #rt3 expiring, i.e. timer fires while state = S_CSLRXDATALISTEN. If no packe
1540:openstack/02a-MAClow/IEEE802154Ecsl.c ****   none will be received ever and it is safe to switch of the radio. This timer is set such that the
1541:openstack/02a-MAClow/IEEE802154Ecsl.c ****   duration (#TsLongGT).
1542:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1543:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_rie2() { // Activity for error event [data rie2] on CSL RX Sampl
 3380              		.loc 1 1543 0
 3381              		.cfi_startproc
 3382              		@ args = 0, pretend = 0, frame = 0
 3383              		@ frame_needed = 1, uses_anonymous_args = 0
 3384 16ec 80B5     		push	{r7, lr}
 3385              	.LCFI95:
 3386              		.cfi_def_cfa_offset 8
 3387              		.cfi_offset 7, -8
 3388              		.cfi_offset 14, -4
 3389 16ee 00AF     		add	r7, sp, #0
 3390              	.LCFI96:
 3391              		.cfi_def_cfa_register 7
1544:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1545:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 3392              		.loc 1 1545 0
 3393 16f0 FFF7FEFF 		bl	endOps
1546:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 3394              		.loc 1 1546 0
 3395 16f4 80BD     		pop	{r7, pc}
 3396              		.cfi_endproc
 3397              	.LFE41:
 3399 16f6 00BF     		.align	2
 3400              		.global	activity_csl_data_ri4
 3401              		.thumb
 3402              		.thumb_func
 3404              	activity_csl_data_ri4:
 3405              	.LFB42:
1547:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1548:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1549:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data ri4].
1550:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1551:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_startOfFrame" function when a start of frame ev
1552:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to capture the time, cancel #rt3 and arm #rt4 (max time to receive all the p
1553:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1554:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ri4(PORT_RADIOTIMER_WIDTH capturedTime) {  // Activity for stage
 3406              		.loc 1 1554 0
 3407              		.cfi_startproc
 3408              		@ args = 0, pretend = 0, frame = 8
 3409              		@ frame_needed = 1, uses_anonymous_args = 0
 3410 16f8 80B5     		push	{r7, lr}
 3411              	.LCFI97:
 3412              		.cfi_def_cfa_offset 8
 3413              		.cfi_offset 7, -8
 3414              		.cfi_offset 14, -4
 3415 16fa 82B0     		sub	sp, sp, #8
 3416              	.LCFI98:
 3417              		.cfi_def_cfa_offset 16
 3418 16fc 00AF     		add	r7, sp, #0
 3419              	.LCFI99:
 3420              		.cfi_def_cfa_register 7
 3421 16fe 7860     		str	r0, [r7, #4]
1555:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1556:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1557:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXDATA);
 3422              		.loc 1 1557 0
 3423 1700 4FF03400 		mov	r0, #52
 3424 1704 FFF7FEFF 		bl	changeState
1558:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1559:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancel rt3
1560:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 3425              		.loc 1 1560 0
 3426 1708 FFF7FEFF 		bl	radiotimer_cancel
1561:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1562:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time
1563:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.lastCapturedTime = capturedTime;
 3427              		.loc 1 1563 0
 3428 170c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3429 1710 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3430 1714 7A68     		ldr	r2, [r7, #4]
 3431 1716 5A62     		str	r2, [r3, #36]
1564:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1565:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time to sync
1566:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.syncCapturedTime = capturedTime;
 3432              		.loc 1 1566 0
 3433 1718 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3434 171c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3435 1720 7A68     		ldr	r2, [r7, #4]
 3436 1722 9A62     		str	r2, [r3, #40]
1567:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1568:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_rt4);
 3437              		.loc 1 1568 0
 3438 1724 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3439 1728 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3440 172c 5B6A     		ldr	r3, [r3, #36]
 3441 172e 03F1A403 		add	r3, r3, #164
 3442 1732 1846     		mov	r0, r3
 3443 1734 FFF7FEFF 		bl	radiotimer_schedule
1569:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 3444              		.loc 1 1569 0
 3445 1738 07F10807 		add	r7, r7, #8
 3446 173c BD46     		mov	sp, r7
 3447 173e 80BD     		pop	{r7, pc}
 3448              		.cfi_endproc
 3449              	.LFE42:
 3451              		.align	2
 3452              		.global	activity_csl_data_rie3
 3453              		.thumb
 3454              		.thumb_func
 3456              	activity_csl_data_rie3:
 3457              	.LFB43:
1570:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1571:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1572:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1573:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling error [data rie3].
1574:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1575:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This is triggered by #rt4 expiring, i.e. timer fires while state = S_CSLRXDATA. This is an error 
1576:openstack/02a-MAClow/IEEE802154Ecsl.c ****   transmit the data packet. The implemented behaviour is to log the error and move on the next CSL 
1577:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1578:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_rie3() {
 3458              		.loc 1 1578 0
 3459              		.cfi_startproc
 3460              		@ args = 0, pretend = 0, frame = 0
 3461              		@ frame_needed = 1, uses_anonymous_args = 0
 3462 1740 80B5     		push	{r7, lr}
 3463              	.LCFI100:
 3464              		.cfi_def_cfa_offset 8
 3465              		.cfi_offset 7, -8
 3466              		.cfi_offset 14, -4
 3467 1742 00AF     		add	r7, sp, #0
 3468              	.LCFI101:
 3469              		.cfi_def_cfa_register 7
1579:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1580:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
1581:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDDATADURATION_OVERFLOWS,
1582:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state,
 3470              		.loc 1 1582 0
 3471 1744 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3472 1748 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3473 174c 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
1581:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDDATADURATION_OVERFLOWS,
 3474              		.loc 1 1581 0
 3475 174e 1A46     		mov	r2, r3
1583:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_dbg.num_cslSamples);
 3476              		.loc 1 1583 0
 3477 1750 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 3478 1754 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 3479 1758 1B69     		ldr	r3, [r3, #16]
1581:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDDATADURATION_OVERFLOWS,
 3480              		.loc 1 1581 0
 3481 175a 9BB2     		uxth	r3, r3
 3482 175c 4FF00900 		mov	r0, #9
 3483 1760 4FF02601 		mov	r1, #38
 3484 1764 FFF7FEFF 		bl	openserial_printError
1584:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1585:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1586:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 3485              		.loc 1 1586 0
 3486 1768 FFF7FEFF 		bl	endOps
1587:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 3487              		.loc 1 1587 0
 3488 176c 80BD     		pop	{r7, pc}
 3489              		.cfi_endproc
 3490              	.LFE43:
 3492 176e 00BF     		.align	2
 3493              		.global	activity_csl_data_ri5
 3494              		.thumb
 3495              		.thumb_func
 3497              	activity_csl_data_ri5:
 3498              	.LFB44:
1588:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1589:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1590:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data ri5].
1591:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1592:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_endOfFrame" function when a end of frame event 
1593:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to change state, cancel #rt4, validate data frame, and transmit ACK.
1594:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1595:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ri5(PORT_RADIOTIMER_WIDTH capturedTime) {
 3499              		.loc 1 1595 0
 3500              		.cfi_startproc
 3501              		@ args = 0, pretend = 0, frame = 80
 3502              		@ frame_needed = 1, uses_anonymous_args = 0
 3503 1770 B0B5     		push	{r4, r5, r7, lr}
 3504              	.LCFI102:
 3505              		.cfi_def_cfa_offset 16
 3506              		.cfi_offset 4, -16
 3507              		.cfi_offset 5, -12
 3508              		.cfi_offset 7, -8
 3509              		.cfi_offset 14, -4
 3510 1772 96B0     		sub	sp, sp, #88
 3511              	.LCFI103:
 3512              		.cfi_def_cfa_offset 104
 3513 1774 02AF     		add	r7, sp, #8
 3514              	.LCFI104:
 3515              		.cfi_def_cfa 7, 96
 3516 1776 7860     		str	r0, [r7, #4]
1596:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802154_header_iht ieee802514_header;
1597:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint16_t lenIE=0;
 3517              		.loc 1 1597 0
 3518 1778 4FF00003 		mov	r3, #0
 3519 177c FB81     		strh	r3, [r7, #14]	@ movhi
1598:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1599:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1600:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXACKOFFSET);
 3520              		.loc 1 1600 0
 3521 177e 4FF03500 		mov	r0, #53
 3522 1782 FFF7FEFF 		bl	changeState
1601:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1602:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancel rt4
1603:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 3523              		.loc 1 1603 0
 3524 1786 FFF7FEFF 		bl	radiotimer_cancel
1604:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1605:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // turn off the radio
1606:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rfOff();
 3525              		.loc 1 1606 0
 3526 178a FFF7FEFF 		bl	radio_rfOff
1607:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnTics+=radio_getTimerValue()-ieee154e_vars.radioOnInit;
 3527              		.loc 1 1607 0
 3528 178e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3529 1792 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3530 1796 5C6B     		ldr	r4, [r3, #52]
 3531 1798 FFF7FEFF 		bl	radio_getTimerValue
 3532 179c 0246     		mov	r2, r0
 3533 179e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3534 17a2 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3535 17a6 1B6B     		ldr	r3, [r3, #48]
 3536 17a8 D31A     		subs	r3, r2, r3
 3537 17aa E218     		adds	r2, r4, r3
 3538 17ac 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3539 17b0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3540 17b4 5A63     		str	r2, [r3, #52]
1608:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // get a buffer to put the (received) data in
1609:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.dataReceived = openqueue_getFreePacketBuffer(COMPONENT_IEEE802154E);
 3541              		.loc 1 1609 0
 3542 17b6 4FF00900 		mov	r0, #9
 3543 17ba FFF7FEFF 		bl	openqueue_getFreePacketBuffer
 3544 17be 0246     		mov	r2, r0
 3545 17c0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3546 17c4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3547 17c8 9A61     		str	r2, [r3, #24]
1610:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.dataReceived==NULL) {
 3548              		.loc 1 1610 0
 3549 17ca 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3550 17ce C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3551 17d2 9B69     		ldr	r3, [r3, #24]
 3552 17d4 002B     		cmp	r3, #0
 3553 17d6 0CD1     		bne	.L170
1611:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // log the error
1612:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openserial_printError(COMPONENT_IEEE802154E,ERR_NO_FREE_PACKET_BUFFER,
 3554              		.loc 1 1612 0
 3555 17d8 4FF00900 		mov	r0, #9
 3556 17dc 4FF02C01 		mov	r1, #44
 3557 17e0 4FF00002 		mov	r2, #0
 3558 17e4 4FF00003 		mov	r3, #0
 3559 17e8 FFF7FEFF 		bl	openserial_printError
1613:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             (errorparameter_t)0,
1614:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             (errorparameter_t)0);
1615:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // abort
1616:openstack/02a-MAClow/IEEE802154Ecsl.c ****       endOps();
 3560              		.loc 1 1616 0
 3561 17ec FFF7FEFF 		bl	endOps
 3562 17f0 3CE1     		b	.L169
 3563              	.L170:
1617:openstack/02a-MAClow/IEEE802154Ecsl.c ****       return;
1618:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
1619:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1620:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // declare ownership over that packet
1621:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.dataReceived->creator = COMPONENT_IEEE802154E;
 3564              		.loc 1 1621 0
 3565 17f2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3566 17f6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3567 17fa 9B69     		ldr	r3, [r3, #24]
 3568 17fc 4FF00902 		mov	r2, #9
 3569 1800 1A70     		strb	r2, [r3, #0]
1622:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.dataReceived->owner   = COMPONENT_IEEE802154E;
 3570              		.loc 1 1622 0
 3571 1802 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3572 1806 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3573 180a 9B69     		ldr	r3, [r3, #24]
 3574 180c 4FF00902 		mov	r2, #9
 3575 1810 5A70     		strb	r2, [r3, #1]
1623:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1624:openstack/02a-MAClow/IEEE802154Ecsl.c ****    /*
1625:openstack/02a-MAClow/IEEE802154Ecsl.c ****    The do-while loop that follows is a little parsing trick.
1626:openstack/02a-MAClow/IEEE802154Ecsl.c ****    Because it contains a while(0) condition, it gets executed only once.
1627:openstack/02a-MAClow/IEEE802154Ecsl.c ****    The behavior is:
1628:openstack/02a-MAClow/IEEE802154Ecsl.c ****    - if a break occurs inside the do{} body, the error code below the loop
1629:openstack/02a-MAClow/IEEE802154Ecsl.c ****      gets executed. This indicates something is wrong with the packet being
1630:openstack/02a-MAClow/IEEE802154Ecsl.c ****      parsed.
1631:openstack/02a-MAClow/IEEE802154Ecsl.c ****    - if a return occurs inside the do{} body, the error code below the loop
1632:openstack/02a-MAClow/IEEE802154Ecsl.c ****      does not get executed. This indicates the received packet is correct.
1633:openstack/02a-MAClow/IEEE802154Ecsl.c ****    */
1634:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1635:openstack/02a-MAClow/IEEE802154Ecsl.c ****    do { // this "loop" is only executed once
1636:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1637:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // retrieve the received data frame from the radio's Rx buffer
1638:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.dataReceived->payload = &(ieee154e_vars.dataReceived->packet[FIRST_FRAME_BYTE])
 3576              		.loc 1 1638 0
 3577 1812 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3578 1816 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3579 181a 9A69     		ldr	r2, [r3, #24]
 3580 181c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3581 1820 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3582 1824 9B69     		ldr	r3, [r3, #24]
 3583 1826 03F16C03 		add	r3, r3, #108
 3584 182a 5360     		str	r3, [r2, #4]
1639:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getReceivedFrame(       ieee154e_vars.dataReceived->payload,
 3585              		.loc 1 1639 0
 3586 182c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3587 1830 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3588 1834 9B69     		ldr	r3, [r3, #24]
 3589 1836 5968     		ldr	r1, [r3, #4]
1640:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.dataReceived->length,
 3590              		.loc 1 1640 0
 3591 1838 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3592 183c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3593 1840 9B69     		ldr	r3, [r3, #24]
1639:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getReceivedFrame(       ieee154e_vars.dataReceived->payload,
 3594              		.loc 1 1639 0
 3595 1842 03F10802 		add	r2, r3, #8
1641:openstack/02a-MAClow/IEEE802154Ecsl.c ****                              sizeof(ieee154e_vars.dataReceived->packet),
1642:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.dataReceived->l1_rssi,
 3596              		.loc 1 1642 0
 3597 1846 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3598 184a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3599 184e 9B69     		ldr	r3, [r3, #24]
1639:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getReceivedFrame(       ieee154e_vars.dataReceived->payload,
 3600              		.loc 1 1639 0
 3601 1850 03F16804 		add	r4, r3, #104
1643:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.dataReceived->l1_lqi,
 3602              		.loc 1 1643 0
 3603 1854 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3604 1858 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3605 185c 9B69     		ldr	r3, [r3, #24]
1639:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getReceivedFrame(       ieee154e_vars.dataReceived->payload,
 3606              		.loc 1 1639 0
 3607 185e 03F16900 		add	r0, r3, #105
1644:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                    &ieee154e_vars.dataReceived->l1_crc);
 3608              		.loc 1 1644 0
 3609 1862 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3610 1866 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3611 186a 9B69     		ldr	r3, [r3, #24]
1639:openstack/02a-MAClow/IEEE802154Ecsl.c ****       radio_getReceivedFrame(       ieee154e_vars.dataReceived->payload,
 3612              		.loc 1 1639 0
 3613 186c 03F16A03 		add	r3, r3, #106
 3614 1870 0090     		str	r0, [sp, #0]
 3615 1872 0193     		str	r3, [sp, #4]
 3616 1874 0846     		mov	r0, r1
 3617 1876 1146     		mov	r1, r2
 3618 1878 4FF08202 		mov	r2, #130
 3619 187c 2346     		mov	r3, r4
 3620 187e FFF7FEFF 		bl	radio_getReceivedFrame
1645:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1646:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // break if wrong length
1647:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee154e_vars.dataReceived->length<LENGTH_CRC || ieee154e_vars.dataReceived->length>LENGT
 3621              		.loc 1 1647 0
 3622 1882 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3623 1886 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3624 188a 9B69     		ldr	r3, [r3, #24]
 3625 188c 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3626 188e 012B     		cmp	r3, #1
 3627 1890 07D9     		bls	.L172
 3628              		.loc 1 1647 0 is_stmt 0 discriminator 1
 3629 1892 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3630 1896 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3631 189a 9B69     		ldr	r3, [r3, #24]
 3632 189c 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3633 189e 802B     		cmp	r3, #128
 3634 18a0 0ED9     		bls	.L173
 3635              	.L172:
1648:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // jump to the error code below this do-while loop
1649:openstack/02a-MAClow/IEEE802154Ecsl.c ****         openserial_printError(COMPONENT_IEEE802154E,ERR_INVALIDPACKETFROMRADIO,
1650:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             (errorparameter_t)2,
1651:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             ieee154e_vars.dataReceived->length);
 3636              		.loc 1 1651 0 is_stmt 1
 3637 18a2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3638 18a6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3639 18aa 9B69     		ldr	r3, [r3, #24]
 3640 18ac 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
1649:openstack/02a-MAClow/IEEE802154Ecsl.c ****         openserial_printError(COMPONENT_IEEE802154E,ERR_INVALIDPACKETFROMRADIO,
 3641              		.loc 1 1649 0
 3642 18ae 4FF00900 		mov	r0, #9
 3643 18b2 4FF03701 		mov	r1, #55
 3644 18b6 4FF00202 		mov	r2, #2
 3645 18ba FFF7FEFF 		bl	openserial_printError
1652:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 3646              		.loc 1 1652 0
 3647 18be C4E0     		b	.L174
 3648              	.L173:
1653:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1654:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1655:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // toss CRC (2 last bytes)
1656:openstack/02a-MAClow/IEEE802154Ecsl.c ****       packetfunctions_tossFooter(   ieee154e_vars.dataReceived, LENGTH_CRC);
 3649              		.loc 1 1656 0
 3650 18c0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3651 18c4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3652 18c8 9B69     		ldr	r3, [r3, #24]
 3653 18ca 1846     		mov	r0, r3
 3654 18cc 4FF00201 		mov	r1, #2
 3655 18d0 FFF7FEFF 		bl	packetfunctions_tossFooter
1657:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1658:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // if CRC doesn't check, stop
1659:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee154e_vars.dataReceived->l1_crc==FALSE) {
 3656              		.loc 1 1659 0
 3657 18d4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3658 18d8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3659 18dc 9B69     		ldr	r3, [r3, #24]
 3660 18de 93F86A30 		ldrb	r3, [r3, #106]	@ zero_extendqisi2
 3661 18e2 83F00103 		eor	r3, r3, #1
 3662 18e6 DBB2     		uxtb	r3, r3
 3663 18e8 002B     		cmp	r3, #0
 3664 18ea 40F0A980 		bne	.L182
 3665              	.L175:
1660:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // jump to the error code below this do-while loop
1661:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
1662:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1663:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1664:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // parse the IEEE802.15.4 header (RX DATA)
1665:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee802154_retrieveHeader(ieee154e_vars.dataReceived,&ieee802514_header);
 3666              		.loc 1 1665 0
 3667 18ee 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3668 18f2 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3669 18f6 9A69     		ldr	r2, [r3, #24]
 3670 18f8 07F11003 		add	r3, r7, #16
 3671 18fc 1046     		mov	r0, r2
 3672 18fe 1946     		mov	r1, r3
 3673 1900 FFF7FEFF 		bl	ieee802154_retrieveHeader
1666:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1667:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // break if invalid IEEE802.15.4 header
1668:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee802514_header.valid==FALSE) {
 3674              		.loc 1 1668 0
 3675 1904 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 3676 1906 83F00103 		eor	r3, r3, #1
 3677 190a DBB2     		uxtb	r3, r3
 3678 190c 002B     		cmp	r3, #0
 3679 190e 40F09980 		bne	.L183
 3680              	.L176:
1669:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // break from the do-while loop and execute the clean-up code below
1670:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
1671:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1672:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1673:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // store header details in packet buffer
1674:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.dataReceived->l2_frameType      = ieee802514_header.frameType;
 3681              		.loc 1 1674 0
 3682 1912 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3683 1916 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3684 191a 9B69     		ldr	r3, [r3, #24]
 3685 191c BA7C     		ldrb	r2, [r7, #18]	@ zero_extendqisi2
 3686 191e 83F84920 		strb	r2, [r3, #73]
1675:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.dataReceived->l2_dsn            = ieee802514_header.dsn;
 3687              		.loc 1 1675 0
 3688 1922 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3689 1926 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3690 192a 9B69     		ldr	r3, [r3, #24]
 3691 192c 7A7E     		ldrb	r2, [r7, #25]	@ zero_extendqisi2
 3692 192e 83F84A20 		strb	r2, [r3, #74]
1676:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.dataReceived->l2_IEListPresent  = ieee802514_header.ieListPresent;
 3693              		.loc 1 1676 0
 3694 1932 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3695 1936 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3696 193a 9B69     		ldr	r3, [r3, #24]
 3697 193c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 3698 193e 83F86520 		strb	r2, [r3, #101]
1677:openstack/02a-MAClow/IEEE802154Ecsl.c ****       memcpy(&(ieee154e_vars.dataReceived->l2_nextORpreviousHop),&(ieee802514_header.src),sizeof(op
 3699              		.loc 1 1677 0
 3700 1942 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3701 1946 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3702 194a 9B69     		ldr	r3, [r3, #24]
 3703 194c 03F13803 		add	r3, r3, #56
 3704 1950 1D46     		mov	r5, r3
 3705 1952 07F13C04 		add	r4, r7, #60
 3706 1956 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3707 1958 2860     		str	r0, [r5, #0]	@ unaligned
 3708 195a 6960     		str	r1, [r5, #4]	@ unaligned
 3709 195c AA60     		str	r2, [r5, #8]	@ unaligned
 3710 195e EB60     		str	r3, [r5, #12]	@ unaligned
 3711 1960 2378     		ldrb	r3, [r4, #0]
 3712 1962 2B74     		strb	r3, [r5, #16]
1678:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1679:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // toss the IEEE802.15.4 header
1680:openstack/02a-MAClow/IEEE802154Ecsl.c ****       packetfunctions_tossHeader(ieee154e_vars.dataReceived,ieee802514_header.headerLength);
 3713              		.loc 1 1680 0
 3714 1964 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3715 1968 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3716 196c 9A69     		ldr	r2, [r3, #24]
 3717 196e 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 3718 1970 1046     		mov	r0, r2
 3719 1972 1946     		mov	r1, r3
 3720 1974 FFF7FEFF 		bl	packetfunctions_tossHeader
1681:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1682:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // handle IEs xv poipoi
1683:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // reset join priority
1684:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // retrieve IE in sixtop
1685:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if ((ieee802514_header.valid==TRUE &&
 3721              		.loc 1 1685 0
 3722 1978 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
1686:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header.ieListPresent==TRUE &&
1687:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header.frameType==IEEE154_TYPE_BEACON && // if it is not a beacon and have ie,
1688:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header.panid,idmanager_getMyID(ADDR_PANID)) &&
 3723              		.loc 1 1688 0
 3724 197a 002B     		cmp	r3, #0
 3725 197c 22D0     		beq	.L178
1686:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header.ieListPresent==TRUE &&
 3726              		.loc 1 1686 0
 3727 197e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1685:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if ((ieee802514_header.valid==TRUE &&
 3728              		.loc 1 1685 0
 3729 1980 002B     		cmp	r3, #0
 3730 1982 1FD0     		beq	.L178
1687:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header.frameType==IEEE154_TYPE_BEACON && // if it is not a beacon and have ie,
 3731              		.loc 1 1687 0
 3732 1984 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
1686:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header.ieListPresent==TRUE &&
 3733              		.loc 1 1686 0
 3734 1986 002B     		cmp	r3, #0
 3735 1988 1CD1     		bne	.L178
 3736              		.loc 1 1688 0
 3737 198a 4FF00400 		mov	r0, #4
 3738 198e FFF7FEFF 		bl	idmanager_getMyID
 3739 1992 0346     		mov	r3, r0
 3740 1994 07F11002 		add	r2, r7, #16
 3741 1998 02F10A02 		add	r2, r2, #10
 3742 199c 1046     		mov	r0, r2
 3743 199e 1946     		mov	r1, r3
 3744 19a0 FFF7FEFF 		bl	packetfunctions_sameAddress
 3745 19a4 0346     		mov	r3, r0
1687:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header.frameType==IEEE154_TYPE_BEACON && // if it is not a beacon and have ie,
 3746              		.loc 1 1687 0
 3747 19a6 002B     		cmp	r3, #0
 3748 19a8 0CD0     		beq	.L178
1689:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee154e_processIEs(ieee154e_vars.dataReceived,&lenIE))==FALSE) {
 3749              		.loc 1 1689 0
 3750 19aa 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3751 19ae C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3752 19b2 9A69     		ldr	r2, [r3, #24]
 3753 19b4 07F10E03 		add	r3, r7, #14
 3754 19b8 1046     		mov	r0, r2
 3755 19ba 1946     		mov	r1, r3
 3756 19bc FFF7FEFF 		bl	ieee154e_processIEs
 3757 19c0 0346     		mov	r3, r0
1688:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header.panid,idmanager_getMyID(ADDR_PANID)) &&
 3758              		.loc 1 1688 0
 3759 19c2 002B     		cmp	r3, #0
 3760              	.L178:
1690:openstack/02a-MAClow/IEEE802154Ecsl.c ****           //log  that the packet is not carrying IEs
1691:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1692:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1693:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // toss the IEs including Synch
1694:openstack/02a-MAClow/IEEE802154Ecsl.c ****       packetfunctions_tossHeader(ieee154e_vars.dataReceived,lenIE);
 3761              		.loc 1 1694 0
 3762 19c4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3763 19c8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3764 19cc 9A69     		ldr	r2, [r3, #24]
 3765 19ce FB89     		ldrh	r3, [r7, #14]
 3766 19d0 DBB2     		uxtb	r3, r3
 3767 19d2 1046     		mov	r0, r2
 3768 19d4 1946     		mov	r1, r3
 3769 19d6 FFF7FEFF 		bl	packetfunctions_tossHeader
1695:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1696:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // record the captured time
1697:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.lastCapturedTime = capturedTime;
 3770              		.loc 1 1697 0
 3771 19da 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3772 19de C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3773 19e2 7A68     		ldr	r2, [r7, #4]
 3774 19e4 5A62     		str	r2, [r3, #36]
1698:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1699:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // if I just received an invalid frame, stop
1700:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (isValidRxFrame(&ieee802514_header)==FALSE) {
 3775              		.loc 1 1700 0
 3776 19e6 07F11003 		add	r3, r7, #16
 3777 19ea 1846     		mov	r0, r3
 3778 19ec FFF7FEFF 		bl	isValidRxFrame
 3779 19f0 0346     		mov	r3, r0
 3780 19f2 83F00103 		eor	r3, r3, #1
 3781 19f6 DBB2     		uxtb	r3, r3
 3782 19f8 002B     		cmp	r3, #0
 3783 19fa 25D1     		bne	.L184
 3784              	.L179:
1701:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // jump to the error code below this do-while loop
1702:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
1703:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1704:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1705:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // check if ack requested
1706:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee802514_header.ackRequested==1) {
 3785              		.loc 1 1706 0
 3786 19fc 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 3787 19fe 002B     		cmp	r3, #0
 3788 1a00 0AD0     		beq	.L180
1707:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // arm rt5
1708:openstack/02a-MAClow/IEEE802154Ecsl.c ****          radiotimer_schedule(DURATION_rt5);
 3789              		.loc 1 1708 0
 3790 1a02 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3791 1a06 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3792 1a0a 5B6A     		ldr	r3, [r3, #36]
 3793 1a0c 03F17A03 		add	r3, r3, #122
 3794 1a10 1846     		mov	r0, r3
 3795 1a12 FFF7FEFF 		bl	radiotimer_schedule
 3796 1a16 29E0     		b	.L169
 3797              	.L180:
1709:openstack/02a-MAClow/IEEE802154Ecsl.c ****       } else {
1710:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // synchronize to the received packet if I'm not a DAGroot and this is my preferred parent
1711:openstack/02a-MAClow/IEEE802154Ecsl.c ****          //if (idmanager_getIsDAGroot()==FALSE && neighbors_isPreferredParent(&(ieee154e_vars.dataR
1712:openstack/02a-MAClow/IEEE802154Ecsl.c ****          //   synchronizePacket(ieee154e_vars.syncCapturedTime);
1713:openstack/02a-MAClow/IEEE802154Ecsl.c ****          //}
1714:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // indicate reception to upper layer (no ACK asked)
1715:openstack/02a-MAClow/IEEE802154Ecsl.c ****          notif_receive(ieee154e_vars.dataReceived, 1);
 3798              		.loc 1 1715 0
 3799 1a18 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3800 1a1c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3801 1a20 9B69     		ldr	r3, [r3, #24]
 3802 1a22 1846     		mov	r0, r3
 3803 1a24 4FF00101 		mov	r1, #1
 3804 1a28 FFF7FEFF 		bl	notif_receive
1716:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // reset local variable
1717:openstack/02a-MAClow/IEEE802154Ecsl.c ****          ieee154e_vars.dataReceived = NULL;
 3805              		.loc 1 1717 0
 3806 1a2c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3807 1a30 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3808 1a34 4FF00002 		mov	r2, #0
 3809 1a38 9A61     		str	r2, [r3, #24]
1718:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // abort
1719:openstack/02a-MAClow/IEEE802154Ecsl.c ****          endOps();
 3810              		.loc 1 1719 0
 3811 1a3a FFF7FEFF 		bl	endOps
 3812 1a3e 15E0     		b	.L169
 3813              	.L182:
1661:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 3814              		.loc 1 1661 0
 3815 1a40 00BF     		nop
 3816 1a42 02E0     		b	.L174
 3817              	.L183:
1670:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 3818              		.loc 1 1670 0
 3819 1a44 00BF     		nop
 3820 1a46 00E0     		b	.L174
 3821              	.L184:
1702:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 3822              		.loc 1 1702 0
 3823 1a48 00BF     		nop
 3824              	.L174:
1720:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
1721:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1722:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // everything went well, return here not to execute the error code below
1723:openstack/02a-MAClow/IEEE802154Ecsl.c ****       return;
1724:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1725:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } while(0);
1726:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1727:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // free the (invalid) received data so RAM memory can be recycled
1728:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openqueue_freePacketBuffer(ieee154e_vars.dataReceived);
 3825              		.loc 1 1728 0
 3826 1a4a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3827 1a4e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3828 1a52 9B69     		ldr	r3, [r3, #24]
 3829 1a54 1846     		mov	r0, r3
 3830 1a56 FFF7FEFF 		bl	openqueue_freePacketBuffer
1729:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1730:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clear local variable
1731:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.dataReceived = NULL;
 3831              		.loc 1 1731 0
 3832 1a5a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3833 1a5e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3834 1a62 4FF00002 		mov	r2, #0
 3835 1a66 9A61     		str	r2, [r3, #24]
1732:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1733:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1734:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 3836              		.loc 1 1734 0
 3837 1a68 FFF7FEFF 		bl	endOps
 3838              	.L169:
1735:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 3839              		.loc 1 1735 0
 3840 1a6c 07F15007 		add	r7, r7, #80
 3841 1a70 BD46     		mov	sp, r7
 3842 1a72 B0BD     		pop	{r4, r5, r7, pc}
 3843              		.cfi_endproc
 3844              	.LFE44:
 3846              		.align	2
 3847              		.global	activity_csl_data_ri6
 3848              		.thumb
 3849              		.thumb_func
 3851              	activity_csl_data_ri6:
 3852              	.LFB45:
1736:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1737:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1738:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data ri6].
1739:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1740:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
1741:openstack/02a-MAClow/IEEE802154Ecsl.c ****    The functionality is to prepare the radio for ACK sending.
1742:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1743:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ri6() {
 3853              		.loc 1 1743 0
 3854              		.cfi_startproc
 3855              		@ args = 0, pretend = 0, frame = 8
 3856              		@ frame_needed = 1, uses_anonymous_args = 0
 3857 1a74 90B5     		push	{r4, r7, lr}
 3858              	.LCFI105:
 3859              		.cfi_def_cfa_offset 12
 3860              		.cfi_offset 4, -12
 3861              		.cfi_offset 7, -8
 3862              		.cfi_offset 14, -4
 3863 1a76 87B0     		sub	sp, sp, #28
 3864              	.LCFI106:
 3865              		.cfi_def_cfa_offset 40
 3866 1a78 04AF     		add	r7, sp, #16
 3867              	.LCFI107:
 3868              		.cfi_def_cfa 7, 24
1744:openstack/02a-MAClow/IEEE802154Ecsl.c ****    PORT_SIGNED_INT_WIDTH timeCorrection;
1745:openstack/02a-MAClow/IEEE802154Ecsl.c ****    header_IE_ht header_desc;
1746:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1747:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1748:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXACKPREPARE);
 3869              		.loc 1 1748 0
 3870 1a7a 4FF03600 		mov	r0, #54
 3871 1a7e FFF7FEFF 		bl	changeState
1749:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1750:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // get a buffer to put the ack to send in
1751:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackToSend = openqueue_getFreePacketBuffer(COMPONENT_IEEE802154E);
 3872              		.loc 1 1751 0
 3873 1a82 4FF00900 		mov	r0, #9
 3874 1a86 FFF7FEFF 		bl	openqueue_getFreePacketBuffer
 3875 1a8a 0246     		mov	r2, r0
 3876 1a8c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3877 1a90 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3878 1a94 DA61     		str	r2, [r3, #28]
1752:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.ackToSend==NULL) {
 3879              		.loc 1 1752 0
 3880 1a96 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3881 1a9a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3882 1a9e DB69     		ldr	r3, [r3, #28]
 3883 1aa0 002B     		cmp	r3, #0
 3884 1aa2 1DD1     		bne	.L186
1753:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // log the error
1754:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openserial_printError(COMPONENT_IEEE802154E,ERR_NO_FREE_PACKET_BUFFER, (errorparameter_t)0, (
 3885              		.loc 1 1754 0
 3886 1aa4 4FF00900 		mov	r0, #9
 3887 1aa8 4FF02C01 		mov	r1, #44
 3888 1aac 4FF00002 		mov	r2, #0
 3889 1ab0 4FF00003 		mov	r3, #0
 3890 1ab4 FFF7FEFF 		bl	openserial_printError
1755:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // indicate we received a packet anyway (we don't want to loose any)
1756:openstack/02a-MAClow/IEEE802154Ecsl.c ****       notif_receive(ieee154e_vars.dataReceived,2);
 3891              		.loc 1 1756 0
 3892 1ab8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3893 1abc C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3894 1ac0 9B69     		ldr	r3, [r3, #24]
 3895 1ac2 1846     		mov	r0, r3
 3896 1ac4 4FF00201 		mov	r1, #2
 3897 1ac8 FFF7FEFF 		bl	notif_receive
1757:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // free local variable
1758:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.dataReceived = NULL;
 3898              		.loc 1 1758 0
 3899 1acc 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3900 1ad0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3901 1ad4 4FF00002 		mov	r2, #0
 3902 1ad8 9A61     		str	r2, [r3, #24]
1759:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // abort
1760:openstack/02a-MAClow/IEEE802154Ecsl.c ****       endOps();
 3903              		.loc 1 1760 0
 3904 1ada FFF7FEFF 		bl	endOps
 3905 1ade D3E0     		b	.L185
 3906              	.L186:
1761:openstack/02a-MAClow/IEEE802154Ecsl.c ****       return;
1762:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
1763:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1764:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // declare ownership over that packet
1765:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackToSend->creator = COMPONENT_IEEE802154E;
 3907              		.loc 1 1765 0
 3908 1ae0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3909 1ae4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3910 1ae8 DB69     		ldr	r3, [r3, #28]
 3911 1aea 4FF00902 		mov	r2, #9
 3912 1aee 1A70     		strb	r2, [r3, #0]
1766:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackToSend->owner   = COMPONENT_IEEE802154E;
 3913              		.loc 1 1766 0
 3914 1af0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3915 1af4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3916 1af8 DB69     		ldr	r3, [r3, #28]
 3917 1afa 4FF00902 		mov	r2, #9
 3918 1afe 5A70     		strb	r2, [r3, #1]
1767:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1768:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // calculate the time timeCorrection (this is the time when the packet arrive w.r.t the time it 
1769:openstack/02a-MAClow/IEEE802154Ecsl.c ****    timeCorrection = (PORT_SIGNED_INT_WIDTH)((PORT_SIGNED_INT_WIDTH)ieee154e_vars.syncCapturedTime-(
 3919              		.loc 1 1769 0
 3920 1b00 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3921 1b04 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3922 1b08 9B6A     		ldr	r3, [r3, #40]
 3923 1b0a A3F18303 		sub	r3, r3, #131
 3924 1b0e 7B60     		str	r3, [r7, #4]
1770:openstack/02a-MAClow/IEEE802154Ecsl.c ****     
1771:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // add the payload to the ACK (i.e. the timeCorrection)
1772:openstack/02a-MAClow/IEEE802154Ecsl.c ****    packetfunctions_reserveHeaderSize(ieee154e_vars.ackToSend,sizeof(timecorrection_IE_ht));
 3925              		.loc 1 1772 0
 3926 1b10 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3927 1b14 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3928 1b18 DB69     		ldr	r3, [r3, #28]
 3929 1b1a 1846     		mov	r0, r3
 3930 1b1c 4FF00201 		mov	r1, #2
 3931 1b20 FFF7FEFF 		bl	packetfunctions_reserveHeaderSize
1773:openstack/02a-MAClow/IEEE802154Ecsl.c ****    timeCorrection  = -timeCorrection;
 3932              		.loc 1 1773 0
 3933 1b24 7B68     		ldr	r3, [r7, #4]
 3934 1b26 C3F10003 		rsb	r3, r3, #0
 3935 1b2a 7B60     		str	r3, [r7, #4]
1774:openstack/02a-MAClow/IEEE802154Ecsl.c ****    timeCorrection *= US_PER_TICK;
 3936              		.loc 1 1774 0
 3937 1b2c 7A68     		ldr	r2, [r7, #4]
 3938 1b2e 1346     		mov	r3, r2
 3939 1b30 4FEA0313 		lsl	r3, r3, #4
 3940 1b34 9B1A     		subs	r3, r3, r2
 3941 1b36 4FEA4303 		lsl	r3, r3, #1
 3942 1b3a 7B60     		str	r3, [r7, #4]
1775:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackToSend->payload[0] = (uint8_t)((((uint16_t)timeCorrection)   ) & 0xff);
 3943              		.loc 1 1775 0
 3944 1b3c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3945 1b40 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3946 1b44 DB69     		ldr	r3, [r3, #28]
 3947 1b46 5B68     		ldr	r3, [r3, #4]
 3948 1b48 7A68     		ldr	r2, [r7, #4]
 3949 1b4a D2B2     		uxtb	r2, r2
 3950 1b4c 1A70     		strb	r2, [r3, #0]
1776:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackToSend->payload[1] = (uint8_t)((((uint16_t)timeCorrection)>>8) & 0xff);
 3951              		.loc 1 1776 0
 3952 1b4e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3953 1b52 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3954 1b56 DB69     		ldr	r3, [r3, #28]
 3955 1b58 5B68     		ldr	r3, [r3, #4]
 3956 1b5a 03F10103 		add	r3, r3, #1
 3957 1b5e 7A68     		ldr	r2, [r7, #4]
 3958 1b60 92B2     		uxth	r2, r2
 3959 1b62 4FEA1222 		lsr	r2, r2, #8
 3960 1b66 92B2     		uxth	r2, r2
 3961 1b68 D2B2     		uxtb	r2, r2
 3962 1b6a 1A70     		strb	r2, [r3, #0]
1777:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1778:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // add header IE header -- xv poipoi -- pkt is filled in reverse order..
1779:openstack/02a-MAClow/IEEE802154Ecsl.c ****    packetfunctions_reserveHeaderSize(ieee154e_vars.ackToSend,sizeof(header_IE_ht));
 3963              		.loc 1 1779 0
 3964 1b6c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3965 1b70 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3966 1b74 DB69     		ldr	r3, [r3, #28]
 3967 1b76 1846     		mov	r0, r3
 3968 1b78 4FF00201 		mov	r1, #2
 3969 1b7c FFF7FEFF 		bl	packetfunctions_reserveHeaderSize
1780:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //create the header for ack IE
1781:openstack/02a-MAClow/IEEE802154Ecsl.c ****    header_desc.length_elementid_type=(sizeof(timecorrection_IE_ht)<< IEEE802154E_DESC_LEN_HEADER_IE
 3970              		.loc 1 1781 0
 3971 1b80 40F23C43 		movw	r3, #1084
 3972 1b84 3B80     		strh	r3, [r7, #0]	@ movhi
1782:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                      (IEEE802154E_ACK_NACK_TIMECORRECTION_ELEMENTID << IEEE802154E_
1783:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                      IEEE802154E_DESC_TYPE_SHORT; 
1784:openstack/02a-MAClow/IEEE802154Ecsl.c ****    memcpy(ieee154e_vars.ackToSend->payload,&header_desc,sizeof(header_IE_ht));
 3973              		.loc 1 1784 0
 3974 1b86 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3975 1b8a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3976 1b8e DB69     		ldr	r3, [r3, #28]
 3977 1b90 5B68     		ldr	r3, [r3, #4]
 3978 1b92 3A46     		mov	r2, r7
 3979 1b94 1288     		ldrh	r2, [r2, #0]	@ unaligned
 3980 1b96 1A80     		strh	r2, [r3, #0]	@ unaligned
1785:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1786:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // prepend the IEEE802.15.4 header to the ACK
1787:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackToSend->l2_frameType = IEEE154_TYPE_ACK;
 3981              		.loc 1 1787 0
 3982 1b98 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3983 1b9c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3984 1ba0 DB69     		ldr	r3, [r3, #28]
 3985 1ba2 4FF00202 		mov	r2, #2
 3986 1ba6 83F84920 		strb	r2, [r3, #73]
1788:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackToSend->l2_dsn       = ieee154e_vars.dataReceived->l2_dsn;
 3987              		.loc 1 1788 0
 3988 1baa 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3989 1bae C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3990 1bb2 DA69     		ldr	r2, [r3, #28]
 3991 1bb4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3992 1bb8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3993 1bbc 9B69     		ldr	r3, [r3, #24]
 3994 1bbe 93F84A30 		ldrb	r3, [r3, #74]	@ zero_extendqisi2
 3995 1bc2 82F84A30 		strb	r3, [r2, #74]
1789:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802154_prependHeader(ieee154e_vars.ackToSend,
 3996              		.loc 1 1789 0
 3997 1bc6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 3998 1bca C0F20003 		movt	r3, #:upper16:ieee154e_vars
 3999 1bce D969     		ldr	r1, [r3, #28]
1790:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             ieee154e_vars.ackToSend->l2_frameType,
 4000              		.loc 1 1790 0
 4001 1bd0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4002 1bd4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4003 1bd8 DB69     		ldr	r3, [r3, #28]
1789:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802154_prependHeader(ieee154e_vars.ackToSend,
 4004              		.loc 1 1789 0
 4005 1bda 93F84920 		ldrb	r2, [r3, #73]	@ zero_extendqisi2
1791:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             IEEE154_IELIST_YES,//ie in ack
1792:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             IEEE154_FRAMEVERSION,//enhanced ack
1793:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             IEEE154_SEC_NO_SECURITY,
1794:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             ieee154e_vars.dataReceived->l2_dsn,
 4006              		.loc 1 1794 0
 4007 1bde 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4008 1be2 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4009 1be6 9B69     		ldr	r3, [r3, #24]
1789:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802154_prependHeader(ieee154e_vars.ackToSend,
 4010              		.loc 1 1789 0
 4011 1be8 93F84A00 		ldrb	r0, [r3, #74]	@ zero_extendqisi2
1795:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             &(ieee154e_vars.dataReceived->l2_nextORpreviousHop)
 4012              		.loc 1 1795 0
 4013 1bec 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4014 1bf0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4015 1bf4 9B69     		ldr	r3, [r3, #24]
1789:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802154_prependHeader(ieee154e_vars.ackToSend,
 4016              		.loc 1 1789 0
 4017 1bf6 03F13803 		add	r3, r3, #56
 4018 1bfa 4FF00004 		mov	r4, #0
 4019 1bfe 0094     		str	r4, [sp, #0]
 4020 1c00 0190     		str	r0, [sp, #4]
 4021 1c02 0293     		str	r3, [sp, #8]
 4022 1c04 0846     		mov	r0, r1
 4023 1c06 1146     		mov	r1, r2
 4024 1c08 4FF00102 		mov	r2, #1
 4025 1c0c 4FF00203 		mov	r3, #2
 4026 1c10 FFF7FEFF 		bl	ieee802154_prependHeader
1796:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             );
1797:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1798:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // space for 2-byte CRC
1799:openstack/02a-MAClow/IEEE802154Ecsl.c ****    packetfunctions_reserveFooterSize(ieee154e_vars.ackToSend,2);
 4027              		.loc 1 1799 0
 4028 1c14 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4029 1c18 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4030 1c1c DB69     		ldr	r3, [r3, #28]
 4031 1c1e 1846     		mov	r0, r3
 4032 1c20 4FF00201 		mov	r1, #2
 4033 1c24 FFF7FEFF 		bl	packetfunctions_reserveFooterSize
1800:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1801:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // load the packet in the radio's Tx buffer
1802:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_loadPacket(ieee154e_vars.ackToSend->payload,
 4034              		.loc 1 1802 0
 4035 1c28 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4036 1c2c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4037 1c30 DB69     		ldr	r3, [r3, #28]
 4038 1c32 5A68     		ldr	r2, [r3, #4]
1803:openstack/02a-MAClow/IEEE802154Ecsl.c ****                     ieee154e_vars.ackToSend->length);
 4039              		.loc 1 1803 0
 4040 1c34 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4041 1c38 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4042 1c3c DB69     		ldr	r3, [r3, #28]
1802:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_loadPacket(ieee154e_vars.ackToSend->payload,
 4043              		.loc 1 1802 0
 4044 1c3e 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 4045 1c40 1046     		mov	r0, r2
 4046 1c42 1946     		mov	r1, r3
 4047 1c44 FFF7FEFF 		bl	radio_loadPacket
1804:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1805:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // enable the radio in Tx mode. This does not send that packet.
1806:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_txEnable();
 4048              		.loc 1 1806 0
 4049 1c48 FFF7FEFF 		bl	radio_txEnable
1807:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnInit=radio_getTimerValue();
 4050              		.loc 1 1807 0
 4051 1c4c FFF7FEFF 		bl	radio_getTimerValue
 4052 1c50 0246     		mov	r2, r0
 4053 1c52 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4054 1c56 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4055 1c5a 1A63     		str	r2, [r3, #48]
1808:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnThisSlot=TRUE;
 4056              		.loc 1 1808 0
 4057 1c5c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4058 1c60 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4059 1c64 4FF00102 		mov	r2, #1
 4060 1c68 83F83820 		strb	r2, [r3, #56]
1809:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm rt6
1810:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_rt6);
 4061              		.loc 1 1810 0
 4062 1c6c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4063 1c70 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4064 1c74 5B6A     		ldr	r3, [r3, #36]
 4065 1c76 03F19003 		add	r3, r3, #144
 4066 1c7a 1846     		mov	r0, r3
 4067 1c7c FFF7FEFF 		bl	radiotimer_schedule
1811:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1812:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1813:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXACKREADY);
 4068              		.loc 1 1813 0
 4069 1c80 4FF03700 		mov	r0, #55
 4070 1c84 FFF7FEFF 		bl	changeState
 4071              	.L185:
1814:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 4072              		.loc 1 1814 0
 4073 1c88 07F10C07 		add	r7, r7, #12
 4074 1c8c BD46     		mov	sp, r7
 4075 1c8e 90BD     		pop	{r4, r7, pc}
 4076              		.cfi_endproc
 4077              	.LFE45:
 4079              		.align	2
 4080              		.global	activity_csl_data_rie4
 4081              		.thumb
 4082              		.thumb_func
 4084              	activity_csl_data_rie4:
 4085              	.LFB46:
1815:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1816:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1817:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data rie4].
1818:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1819:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
1820:openstack/02a-MAClow/IEEE802154Ecsl.c ****    The functionality is to prepare the radio for ACK sending.
1821:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1822:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_rie4() {
 4086              		.loc 1 1822 0
 4087              		.cfi_startproc
 4088              		@ args = 0, pretend = 0, frame = 0
 4089              		@ frame_needed = 1, uses_anonymous_args = 0
 4090 1c90 80B5     		push	{r7, lr}
 4091              	.LCFI108:
 4092              		.cfi_def_cfa_offset 8
 4093              		.cfi_offset 7, -8
 4094              		.cfi_offset 14, -4
 4095 1c92 00AF     		add	r7, sp, #0
 4096              	.LCFI109:
 4097              		.cfi_def_cfa_register 7
1823:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
1824:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXTXACKPREPARE_OVERFLOWS,
1825:openstack/02a-MAClow/IEEE802154Ecsl.c **** 		                 (errorparameter_t)ieee154e_vars.state,
 4098              		.loc 1 1825 0
 4099 1c94 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4100 1c98 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4101 1c9c 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
1824:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXTXACKPREPARE_OVERFLOWS,
 4102              		.loc 1 1824 0
 4103 1c9e 1A46     		mov	r2, r3
1826:openstack/02a-MAClow/IEEE802154Ecsl.c **** 						 (errorparameter_t)ieee154e_dbg.num_cslSamples);
 4104              		.loc 1 1826 0
 4105 1ca0 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 4106 1ca4 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 4107 1ca8 1B69     		ldr	r3, [r3, #16]
1824:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_MAXTXACKPREPARE_OVERFLOWS,
 4108              		.loc 1 1824 0
 4109 1caa 9BB2     		uxth	r3, r3
 4110 1cac 4FF00900 		mov	r0, #9
 4111 1cb0 4FF02501 		mov	r1, #37
 4112 1cb4 FFF7FEFF 		bl	openserial_printError
1827:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1828:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1829:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 4113              		.loc 1 1829 0
 4114 1cb8 FFF7FEFF 		bl	endOps
1830:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 4115              		.loc 1 1830 0
 4116 1cbc 80BD     		pop	{r7, pc}
 4117              		.cfi_endproc
 4118              	.LFE46:
 4120 1cbe 00BF     		.align	2
 4121              		.global	activity_csl_data_ri7
 4122              		.thumb
 4123              		.thumb_func
 4125              	activity_csl_data_ri7:
 4126              	.LFB47:
1831:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1832:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1833:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data ri7].
1834:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1835:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
1836:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The radio is configured and this interrupt gives it the "go" signal to start listening.
1837:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1838:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ri7() {
 4127              		.loc 1 1838 0
 4128              		.cfi_startproc
 4129              		@ args = 0, pretend = 0, frame = 0
 4130              		@ frame_needed = 1, uses_anonymous_args = 0
 4131 1cc0 80B5     		push	{r7, lr}
 4132              	.LCFI110:
 4133              		.cfi_def_cfa_offset 8
 4134              		.cfi_offset 7, -8
 4135              		.cfi_offset 14, -4
 4136 1cc2 00AF     		add	r7, sp, #0
 4137              	.LCFI111:
 4138              		.cfi_def_cfa_register 7
1839:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1840:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXACKDELAY);
 4139              		.loc 1 1840 0
 4140 1cc4 4FF03800 		mov	r0, #56
 4141 1cc8 FFF7FEFF 		bl	changeState
1841:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1842:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm rt7
1843:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_rt7);
 4142              		.loc 1 1843 0
 4143 1ccc 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4144 1cd0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4145 1cd4 5B6A     		ldr	r3, [r3, #36]
 4146 1cd6 03F1B103 		add	r3, r3, #177
 4147 1cda 1846     		mov	r0, r3
 4148 1cdc FFF7FEFF 		bl	radiotimer_schedule
1844:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1845:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // give the 'go' to transmit
1846:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_txNow(); 
 4149              		.loc 1 1846 0
 4150 1ce0 FFF7FEFF 		bl	radio_txNow
1847:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 4151              		.loc 1 1847 0
 4152 1ce4 80BD     		pop	{r7, pc}
 4153              		.cfi_endproc
 4154              	.LFE47:
 4156 1ce6 00BF     		.align	2
 4157              		.global	activity_csl_data_rie5
 4158              		.thumb
 4159              		.thumb_func
 4161              	activity_csl_data_rie5:
 4162              	.LFB48:
1848:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1849:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1850:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data rie5].
1851:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1852:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
1853:openstack/02a-MAClow/IEEE802154Ecsl.c ****    The functionality is to prepare the radio for ACK sending.
1854:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1855:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_rie5() {
 4163              		.loc 1 1855 0
 4164              		.cfi_startproc
 4165              		@ args = 0, pretend = 0, frame = 0
 4166              		@ frame_needed = 1, uses_anonymous_args = 0
 4167 1ce8 80B5     		push	{r7, lr}
 4168              	.LCFI112:
 4169              		.cfi_def_cfa_offset 8
 4170              		.cfi_offset 7, -8
 4171              		.cfi_offset 14, -4
 4172 1cea 00AF     		add	r7, sp, #0
 4173              	.LCFI113:
 4174              		.cfi_def_cfa_register 7
1856:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
1857:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDRADIOTX_OVERFLOWS,
1858:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state,
 4175              		.loc 1 1858 0
 4176 1cec 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4177 1cf0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4178 1cf4 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
1857:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDRADIOTX_OVERFLOWS,
 4179              		.loc 1 1857 0
 4180 1cf6 1A46     		mov	r2, r3
1859:openstack/02a-MAClow/IEEE802154Ecsl.c **** 						 (errorparameter_t)ieee154e_dbg.num_cslSamples);
 4181              		.loc 1 1859 0
 4182 1cf8 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 4183 1cfc C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 4184 1d00 1B69     		ldr	r3, [r3, #16]
1857:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDRADIOTX_OVERFLOWS,
 4185              		.loc 1 1857 0
 4186 1d02 9BB2     		uxth	r3, r3
 4187 1d04 4FF00900 		mov	r0, #9
 4188 1d08 4FF02801 		mov	r1, #40
 4189 1d0c FFF7FEFF 		bl	openserial_printError
1860:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1861:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 4190              		.loc 1 1861 0
 4191 1d10 FFF7FEFF 		bl	endOps
1862:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 4192              		.loc 1 1862 0
 4193 1d14 80BD     		pop	{r7, pc}
 4194              		.cfi_endproc
 4195              	.LFE48:
 4197 1d16 00BF     		.align	2
 4198              		.global	activity_csl_data_ri8
 4199              		.thumb
 4200              		.thumb_func
 4202              	activity_csl_data_ri8:
 4203              	.LFB49:
1863:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1864:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1865:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data ri8].
1866:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1867:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_startOfFrame" function when a start of frame ev
1868:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to change the state to set transmission, cancel #rt7 and arm #rt8 (max time 
1869:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1870:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ri8(PORT_RADIOTIMER_WIDTH capturedTime) {
 4204              		.loc 1 1870 0
 4205              		.cfi_startproc
 4206              		@ args = 0, pretend = 0, frame = 8
 4207              		@ frame_needed = 1, uses_anonymous_args = 0
 4208 1d18 80B5     		push	{r7, lr}
 4209              	.LCFI114:
 4210              		.cfi_def_cfa_offset 8
 4211              		.cfi_offset 7, -8
 4212              		.cfi_offset 14, -4
 4213 1d1a 82B0     		sub	sp, sp, #8
 4214              	.LCFI115:
 4215              		.cfi_def_cfa_offset 16
 4216 1d1c 00AF     		add	r7, sp, #0
 4217              	.LCFI116:
 4218              		.cfi_def_cfa_register 7
 4219 1d1e 7860     		str	r0, [r7, #4]
1871:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1872:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLTXACK);
 4220              		.loc 1 1872 0
 4221 1d20 4FF03900 		mov	r0, #57
 4222 1d24 FFF7FEFF 		bl	changeState
1873:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1874:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancel rt7
1875:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 4223              		.loc 1 1875 0
 4224 1d28 FFF7FEFF 		bl	radiotimer_cancel
1876:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1877:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time
1878:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.lastCapturedTime = capturedTime;
 4225              		.loc 1 1878 0
 4226 1d2c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4227 1d30 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4228 1d34 7A68     		ldr	r2, [r7, #4]
 4229 1d36 5A62     		str	r2, [r3, #36]
1879:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1880:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // arm rt8
1881:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_schedule(DURATION_rt8);
 4230              		.loc 1 1881 0
 4231 1d38 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4232 1d3c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4233 1d40 5B6A     		ldr	r3, [r3, #36]
 4234 1d42 03F16203 		add	r3, r3, #98
 4235 1d46 1846     		mov	r0, r3
 4236 1d48 FFF7FEFF 		bl	radiotimer_schedule
1882:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 4237              		.loc 1 1882 0
 4238 1d4c 07F10807 		add	r7, r7, #8
 4239 1d50 BD46     		mov	sp, r7
 4240 1d52 80BD     		pop	{r7, pc}
 4241              		.cfi_endproc
 4242              	.LFE49:
 4244              		.align	2
 4245              		.global	activity_csl_data_rie6
 4246              		.thumb
 4247              		.thumb_func
 4249              	activity_csl_data_rie6:
 4250              	.LFB50:
1883:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1884:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1885:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data rie6].
1886:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1887:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "isr_ieee154ecsl_timer" function when FSM timer fires (expir
1888:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to register an error when timer for sent ACK has expired.
1889:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1890:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_rie6() {
 4251              		.loc 1 1890 0
 4252              		.cfi_startproc
 4253              		@ args = 0, pretend = 0, frame = 0
 4254              		@ frame_needed = 1, uses_anonymous_args = 0
 4255 1d54 80B5     		push	{r7, lr}
 4256              	.LCFI117:
 4257              		.cfi_def_cfa_offset 8
 4258              		.cfi_offset 7, -8
 4259              		.cfi_offset 14, -4
 4260 1d56 00AF     		add	r7, sp, #0
 4261              	.LCFI118:
 4262              		.cfi_def_cfa_register 7
1891:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log the error
1892:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDACKDURATION_OVERFLOWS,
1893:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_vars.state,
 4263              		.loc 1 1893 0
 4264 1d58 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4265 1d5c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4266 1d60 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
1892:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDACKDURATION_OVERFLOWS,
 4267              		.loc 1 1892 0
 4268 1d62 1A46     		mov	r2, r3
1894:openstack/02a-MAClow/IEEE802154Ecsl.c ****                          (errorparameter_t)ieee154e_dbg.num_cslSamples);
 4269              		.loc 1 1894 0
 4270 1d64 40F20003 		movw	r3, #:lower16:ieee154e_dbg
 4271 1d68 C0F20003 		movt	r3, #:upper16:ieee154e_dbg
 4272 1d6c 1B69     		ldr	r3, [r3, #16]
1892:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printError(COMPONENT_IEEE802154E,ERR_WDACKDURATION_OVERFLOWS,
 4273              		.loc 1 1892 0
 4274 1d6e 9BB2     		uxth	r3, r3
 4275 1d70 4FF00900 		mov	r0, #9
 4276 1d74 4FF02901 		mov	r1, #41
 4277 1d78 FFF7FEFF 		bl	openserial_printError
1895:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abort
1896:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 4278              		.loc 1 1896 0
 4279 1d7c FFF7FEFF 		bl	endOps
1897:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 4280              		.loc 1 1897 0
 4281 1d80 80BD     		pop	{r7, pc}
 4282              		.cfi_endproc
 4283              	.LFE50:
 4285 1d82 00BF     		.align	2
 4286              		.global	activity_csl_data_ri9
 4287              		.thumb
 4288              		.thumb_func
 4290              	activity_csl_data_ri9:
 4291              	.LFB51:
1898:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1899:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1900:openstack/02a-MAClow/IEEE802154Ecsl.c ****  \brief Activity for CSL RX Sampling stage [data ri9].
1901:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1902:openstack/02a-MAClow/IEEE802154Ecsl.c ****   This method is invoked from ISR-mode "ieee154ecsl_endOfFrame" function when a end of frame event 
1903:openstack/02a-MAClow/IEEE802154Ecsl.c ****   The functionality is to change the state, cancel #rt8, free ack packet and notify upper layer.
1904:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1905:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void activity_csl_data_ri9(PORT_RADIOTIMER_WIDTH capturedTime) {
 4292              		.loc 1 1905 0
 4293              		.cfi_startproc
 4294              		@ args = 0, pretend = 0, frame = 8
 4295              		@ frame_needed = 1, uses_anonymous_args = 0
 4296 1d84 80B5     		push	{r7, lr}
 4297              	.LCFI119:
 4298              		.cfi_def_cfa_offset 8
 4299              		.cfi_offset 7, -8
 4300              		.cfi_offset 14, -4
 4301 1d86 82B0     		sub	sp, sp, #8
 4302              	.LCFI120:
 4303              		.cfi_def_cfa_offset 16
 4304 1d88 00AF     		add	r7, sp, #0
 4305              	.LCFI121:
 4306              		.cfi_def_cfa_register 7
 4307 1d8a 7860     		str	r0, [r7, #4]
1906:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
1907:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_CSLRXPROC);
 4308              		.loc 1 1907 0
 4309 1d8c 4FF03A00 		mov	r0, #58
 4310 1d90 FFF7FEFF 		bl	changeState
1908:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1909:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // cancel rt8
1910:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 4311              		.loc 1 1910 0
 4312 1d94 FFF7FEFF 		bl	radiotimer_cancel
1911:openstack/02a-MAClow/IEEE802154Ecsl.c ****   
1912:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the captured time
1913:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.lastCapturedTime = capturedTime;
 4313              		.loc 1 1913 0
 4314 1d98 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4315 1d9c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4316 1da0 7A68     		ldr	r2, [r7, #4]
 4317 1da2 5A62     		str	r2, [r3, #36]
1914:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1915:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // free the ack we just sent so corresponding RAM memory can be recycled
1916:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openqueue_freePacketBuffer(ieee154e_vars.ackToSend);
 4318              		.loc 1 1916 0
 4319 1da4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4320 1da8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4321 1dac DB69     		ldr	r3, [r3, #28]
 4322 1dae 1846     		mov	r0, r3
 4323 1db0 FFF7FEFF 		bl	openqueue_freePacketBuffer
1917:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1918:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clear local variable
1919:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.ackToSend = NULL;
 4324              		.loc 1 1919 0
 4325 1db4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4326 1db8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4327 1dbc 4FF00002 		mov	r2, #0
 4328 1dc0 DA61     		str	r2, [r3, #28]
1920:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1921:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // synchronize to the received packet
1922:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //if (idmanager_getIsDAGroot()==FALSE && neighbors_isPreferredParent(&(ieee154e_vars.dataReceive
1923:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   synchronizePacket(ieee154e_vars.syncCapturedTime);
1924:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //}
1925:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1926:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // inform upper layer of reception (after ACK sent)
1927:openstack/02a-MAClow/IEEE802154Ecsl.c ****    notif_receive(ieee154e_vars.dataReceived,3);
 4329              		.loc 1 1927 0
 4330 1dc2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4331 1dc6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4332 1dca 9B69     		ldr	r3, [r3, #24]
 4333 1dcc 1846     		mov	r0, r3
 4334 1dce 4FF00301 		mov	r1, #3
 4335 1dd2 FFF7FEFF 		bl	notif_receive
1928:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1929:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clear local variable
1930:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.dataReceived = NULL;
 4336              		.loc 1 1930 0
 4337 1dd6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 4338 1dda C0F20003 		movt	r3, #:upper16:ieee154e_vars
 4339 1dde 4FF00002 		mov	r2, #0
 4340 1de2 9A61     		str	r2, [r3, #24]
1931:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
1932:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // official end of Rx slot
1933:openstack/02a-MAClow/IEEE802154Ecsl.c ****    endOps();
 4341              		.loc 1 1933 0
 4342 1de4 FFF7FEFF 		bl	endOps
1934:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 4343              		.loc 1 1934 0
 4344 1de8 07F10807 		add	r7, r7, #8
 4345 1dec BD46     		mov	sp, r7
 4346 1dee 80BD     		pop	{r7, pc}
 4347              		.cfi_endproc
 4348              	.LFE51:
 4350              		.align	2
 4351              		.global	ieee802154_createWakeUpFrame
 4352              		.thumb
 4353              		.thumb_func
 4355              	ieee802154_createWakeUpFrame:
 4356              	.LFB52:
1935:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1936:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1937:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
1938:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================= WAKE-UP FRAMES ===============================
1939:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
1940:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1941:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
1942:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Prepend the IEEE802.15.4 MAC Wake-Up header to a (to be transmitted) packet.
1943:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1944:openstack/02a-MAClow/IEEE802154Ecsl.c **** Note that we are writing the field from the end of the header to the beginning.
1945:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1946:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[in,out] msg              The message to append the header to.
1947:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[in]     sequenceNumber   Sequence number of this frame.
1948:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[in]     nextHop          Address of the next hop
1949:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[in]     rztime           Rendezvoud time
1950:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
1951:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1952:openstack/02a-MAClow/IEEE802154Ecsl.c **** void ieee802154_createWakeUpFrame(OpenQueueEntry_t*		msg,
1953:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                   uint8_t           	sequenceNumber,
1954:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                   open_addr_t*        	nextHop,
1955:openstack/02a-MAClow/IEEE802154Ecsl.c **** 							      uint16_t				rztime) {
 4357              		.loc 1 1955 0
 4358              		.cfi_startproc
 4359              		@ args = 0, pretend = 0, frame = 40
 4360              		@ frame_needed = 1, uses_anonymous_args = 0
 4361 1df0 80B5     		push	{r7, lr}
 4362              	.LCFI122:
 4363              		.cfi_def_cfa_offset 8
 4364              		.cfi_offset 7, -8
 4365              		.cfi_offset 14, -4
 4366 1df2 8AB0     		sub	sp, sp, #40
 4367              	.LCFI123:
 4368              		.cfi_def_cfa_offset 48
 4369 1df4 00AF     		add	r7, sp, #0
 4370              	.LCFI124:
 4371              		.cfi_def_cfa_register 7
 4372 1df6 F860     		str	r0, [r7, #12]
 4373 1df8 7A60     		str	r2, [r7, #4]
 4374 1dfa 0A46     		mov	r2, r1
 4375 1dfc FA72     		strb	r2, [r7, #11]
 4376 1dfe 3B81     		strh	r3, [r7, #8]	@ movhi
1956:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1957:openstack/02a-MAClow/IEEE802154Ecsl.c ****     open_addr_t	nextHop16b;
1958:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1959:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// La estructura de una trama Wake-Up es la siguiente:
1960:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//
1961:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   - FRAME CONTROL: 1 byte
1962:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   - SEQ NUMBER (macDSN): 1 byte
1963:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   - PAN ID: 2 bytes
1964:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   - DEST ADDR: 2 bytes
1965:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   - RZ TIME IE: 2 bytes
1966:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   - IE LIST TERMINATOR: 2 bytes
1967:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//
1968:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//  | FRAME   |  SEQ   | PAN | DEST | RZ TIME  | IE LIST    |
1969:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//  | CONTROL | NUMBER |  ID | ADDR |  HDR IE  | TERMINATOR |
1970:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//
1971:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1972:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// Empezamos a escribir el payload de la trama wake-up empezando del final hacia adelante.
1973:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1974:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// IE LIST TERMINATOR
1975:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	packetfunctions_reserveHeaderSize(msg,sizeof(uint8_t));
 4377              		.loc 1 1975 0
 4378 1e00 F868     		ldr	r0, [r7, #12]
 4379 1e02 4FF00101 		mov	r1, #1
 4380 1e06 FFF7FEFF 		bl	packetfunctions_reserveHeaderSize
1976:openstack/02a-MAClow/IEEE802154Ecsl.c ****  	*((uint8_t*)(msg->payload)) = 0x7e;
 4381              		.loc 1 1976 0
 4382 1e0a FB68     		ldr	r3, [r7, #12]
 4383 1e0c 5B68     		ldr	r3, [r3, #4]
 4384 1e0e 4FF07E02 		mov	r2, #126
 4385 1e12 1A70     		strb	r2, [r3, #0]
1977:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1978:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// RZ TIME IE, formado por 4 bytes con la siguiente estructura (0x0E82)
1979:openstack/02a-MAClow/IEEE802154Ecsl.c ****     //  - b0-b6 (Length) = 2
1980:openstack/02a-MAClow/IEEE802154Ecsl.c ****     //  - b7-b14 (Element ID) = 0x1D
1981:openstack/02a-MAClow/IEEE802154Ecsl.c ****     //  - b15 (Type) = 0
1982:openstack/02a-MAClow/IEEE802154Ecsl.c ****     //  - b16-b31 (IE Content) = time (2 bytes)
1983:openstack/02a-MAClow/IEEE802154Ecsl.c ****     //
1984:openstack/02a-MAClow/IEEE802154Ecsl.c ****     //  b15 | b14 | b13 | b12 | b11 | b10 | b9 | b8 | b7 | b6 | b5 | b4 | b3 | b2 | b1 | b0 |
1985:openstack/02a-MAClow/IEEE802154Ecsl.c ****     //   0  |  0  |  0  |  0  |  1  |  1  |  1 |  0 |  1 |  0 |  0 |  0 |  0 |  0 |  1 |  0 |
1986:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1987:openstack/02a-MAClow/IEEE802154Ecsl.c ****  	// rz time ie body (time)
1988:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	packetfunctions_reserveHeaderSize(msg,sizeof(uint16_t));
 4386              		.loc 1 1988 0
 4387 1e14 F868     		ldr	r0, [r7, #12]
 4388 1e16 4FF00201 		mov	r1, #2
 4389 1e1a FFF7FEFF 		bl	packetfunctions_reserveHeaderSize
1989:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	*((uint16_t*)(msg->payload)) = rztime;
 4390              		.loc 1 1989 0
 4391 1e1e FB68     		ldr	r3, [r7, #12]
 4392 1e20 5B68     		ldr	r3, [r3, #4]
 4393 1e22 3A89     		ldrh	r2, [r7, #8]	@ movhi
 4394 1e24 1A80     		strh	r2, [r3, #0]	@ movhi
1990:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1991:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// rz time ie header
1992:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	packetfunctions_reserveHeaderSize(msg,sizeof(uint16_t));
 4395              		.loc 1 1992 0
 4396 1e26 F868     		ldr	r0, [r7, #12]
 4397 1e28 4FF00201 		mov	r1, #2
 4398 1e2c FFF7FEFF 		bl	packetfunctions_reserveHeaderSize
1993:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	*((uint16_t*)(msg->payload)) = 0x0E82;
 4399              		.loc 1 1993 0
 4400 1e30 FB68     		ldr	r3, [r7, #12]
 4401 1e32 5B68     		ldr	r3, [r3, #4]
 4402 1e34 40F68262 		movw	r2, #3714
 4403 1e38 1A80     		strh	r2, [r3, #0]	@ movhi
1994:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
1995:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// DEST ADDR
1996:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	if (nextHop->type == ADDR_16B) {
 4404              		.loc 1 1996 0
 4405 1e3a 7B68     		ldr	r3, [r7, #4]
 4406 1e3c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4407 1e3e 012B     		cmp	r3, #1
 4408 1e40 06D1     		bne	.L195
1997:openstack/02a-MAClow/IEEE802154Ecsl.c ****   	   packetfunctions_writeAddress(msg,nextHop,OW_LITTLE_ENDIAN);
 4409              		.loc 1 1997 0
 4410 1e42 F868     		ldr	r0, [r7, #12]
 4411 1e44 7968     		ldr	r1, [r7, #4]
 4412 1e46 4FF00102 		mov	r2, #1
 4413 1e4a FFF7FEFF 		bl	packetfunctions_writeAddress
 4414 1e4e 11E0     		b	.L196
 4415              	.L195:
1998:openstack/02a-MAClow/IEEE802154Ecsl.c ****     } else if (nextHop->type == ADDR_64B) {
 4416              		.loc 1 1998 0
 4417 1e50 7B68     		ldr	r3, [r7, #4]
 4418 1e52 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4419 1e54 022B     		cmp	r3, #2
 4420 1e56 0DD1     		bne	.L196
1999:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   packetfunctions_mac64bToMac16b(nextHop, &nextHop16b);
 4421              		.loc 1 1999 0
 4422 1e58 07F11403 		add	r3, r7, #20
 4423 1e5c 7868     		ldr	r0, [r7, #4]
 4424 1e5e 1946     		mov	r1, r3
 4425 1e60 FFF7FEFF 		bl	packetfunctions_mac64bToMac16b
2000:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	   packetfunctions_writeAddress(msg,&nextHop16b,OW_LITTLE_ENDIAN);
 4426              		.loc 1 2000 0
 4427 1e64 07F11403 		add	r3, r7, #20
 4428 1e68 F868     		ldr	r0, [r7, #12]
 4429 1e6a 1946     		mov	r1, r3
 4430 1e6c 4FF00102 		mov	r2, #1
 4431 1e70 FFF7FEFF 		bl	packetfunctions_writeAddress
 4432              	.L196:
2001:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	}
2002:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// PAN ID
2003:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	packetfunctions_writeAddress(msg,idmanager_getMyID(ADDR_PANID),OW_LITTLE_ENDIAN);
 4433              		.loc 1 2003 0
 4434 1e74 4FF00400 		mov	r0, #4
 4435 1e78 FFF7FEFF 		bl	idmanager_getMyID
 4436 1e7c 0346     		mov	r3, r0
 4437 1e7e F868     		ldr	r0, [r7, #12]
 4438 1e80 1946     		mov	r1, r3
 4439 1e82 4FF00102 		mov	r2, #1
 4440 1e86 FFF7FEFF 		bl	packetfunctions_writeAddress
2004:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2005:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// SEQ NUMBER
2006:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	packetfunctions_reserveHeaderSize(msg,sizeof(uint8_t));
 4441              		.loc 1 2006 0
 4442 1e8a F868     		ldr	r0, [r7, #12]
 4443 1e8c 4FF00101 		mov	r1, #1
 4444 1e90 FFF7FEFF 		bl	packetfunctions_reserveHeaderSize
2007:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	*((uint8_t*)(msg->payload)) = sequenceNumber;
 4445              		.loc 1 2007 0
 4446 1e94 FB68     		ldr	r3, [r7, #12]
 4447 1e96 5B68     		ldr	r3, [r3, #4]
 4448 1e98 FA7A     		ldrb	r2, [r7, #11]
 4449 1e9a 1A70     		strb	r2, [r3, #0]
2008:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2009:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// La estructura del FCF en la trama de wake-up es 0x55 = 01010101b:
2010:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// b0-b2 -- Frame Type (debe ser 101 para trama wake-up)
2011:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// b3 ----- Long Frame Control (debe ser 0 para indicar que se trata de un FCF de 1 byte como es e
2012:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// b4-b5 -- Dest Addr Mode (en este caso, short address por lo que tiene que valer 10).
2013:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// b6-b7 -- Src Addr Mode (en este caso, short address por lo que tiene que valer 10).
2014:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2015:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//  b7 | b6 | b5 | b4 | b3 | b2 | b1 | b0 |
2016:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	//   0 |  1 |  0 |  1 |  0 |  1 |  0 |  1 |
2017:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2018:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	// FCF
2019:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	packetfunctions_reserveHeaderSize(msg,sizeof(uint8_t));
 4450              		.loc 1 2019 0
 4451 1e9c F868     		ldr	r0, [r7, #12]
 4452 1e9e 4FF00101 		mov	r1, #1
 4453 1ea2 FFF7FEFF 		bl	packetfunctions_reserveHeaderSize
2020:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	*((uint8_t*)(msg->payload)) = 0x55;
 4454              		.loc 1 2020 0
 4455 1ea6 FB68     		ldr	r3, [r7, #12]
 4456 1ea8 5B68     		ldr	r3, [r3, #4]
 4457 1eaa 4FF05502 		mov	r2, #85
 4458 1eae 1A70     		strb	r2, [r3, #0]
2021:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2022:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 4459              		.loc 1 2022 0
 4460 1eb0 07F12807 		add	r7, r7, #40
 4461 1eb4 BD46     		mov	sp, r7
 4462 1eb6 80BD     		pop	{r7, pc}
 4463              		.cfi_endproc
 4464              	.LFE52:
 4466              		.align	2
 4467              		.global	ieee802154_retrieveWakeUpFrame
 4468              		.thumb
 4469              		.thumb_func
 4471              	ieee802154_retrieveWakeUpFrame:
 4472              	.LFB53:
2023:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2024:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
2025:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Retrieve the IEEE802.15.4 MAC Wake-Up Frame header from a (just received) packet.
2026:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2027:openstack/02a-MAClow/IEEE802154Ecsl.c **** Note We are writing the fields from the beginning of the header to the end.
2028:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2029:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[in,out] msg            The message just received.
2030:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[out] ieee802514_header The internal header to write the data to.
2031:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[out] rztime  		  Rendezvous time to wait for data packet.
2032:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
2033:openstack/02a-MAClow/IEEE802154Ecsl.c **** void ieee802154_retrieveWakeUpFrame(OpenQueueEntry_t*      msg,
2034:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                     ieee802154_header_iht* ieee802514_header,
2035:openstack/02a-MAClow/IEEE802154Ecsl.c **** 									uint16_t* rztime) {
 4473              		.loc 1 2035 0
 4474              		.cfi_startproc
 4475              		@ args = 0, pretend = 0, frame = 24
 4476              		@ frame_needed = 1, uses_anonymous_args = 0
 4477 1eb8 80B5     		push	{r7, lr}
 4478              	.LCFI125:
 4479              		.cfi_def_cfa_offset 8
 4480              		.cfi_offset 7, -8
 4481              		.cfi_offset 14, -4
 4482 1eba 86B0     		sub	sp, sp, #24
 4483              	.LCFI126:
 4484              		.cfi_def_cfa_offset 32
 4485 1ebc 00AF     		add	r7, sp, #0
 4486              	.LCFI127:
 4487              		.cfi_def_cfa_register 7
 4488 1ebe F860     		str	r0, [r7, #12]
 4489 1ec0 B960     		str	r1, [r7, #8]
 4490 1ec2 7A60     		str	r2, [r7, #4]
2036:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint8_t temp_8b;
2037:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint8_t src_addr_mode, dst_addr_mode;
2038:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint16_t temp_16b;
2039:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2040:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2041:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // La estructura de una trama Wake-Up es la siguiente
2042:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //
2043:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - FRAME CONTROL: 1 byte
2044:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - SEQ NUMBER (macDSN): 1 byte
2045:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - PAN ID: 2 bytes
2046:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - DEST ADDR: 2 bytes
2047:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - RZ TIME IE: 2 bytes
2048:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - IE LIST TERMINATOR: 2 bytes
2049:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //
2050:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  | FRAME   |  SEQ   | PAN | DEST | RZ TIME  | IE LIST    |
2051:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  | CONTROL | NUMBER |  ID | ADDR |  HDR IE  | TERMINATOR |
2052:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //
2053:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2054:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Por defecto, se asume que la cabecera no es válida en el caso de
2055:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // abandonar la función al ser el paquete más corto que la cabecera.
2056:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->valid=FALSE;
 4491              		.loc 1 2056 0
 4492 1ec4 BB68     		ldr	r3, [r7, #8]
 4493 1ec6 4FF00002 		mov	r2, #0
 4494 1eca 1A70     		strb	r2, [r3, #0]
2057:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->headerLength = 0;
 4495              		.loc 1 2057 0
 4496 1ecc BB68     		ldr	r3, [r7, #8]
 4497 1ece 4FF00002 		mov	r2, #0
 4498 1ed2 5A70     		strb	r2, [r3, #1]
2058:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2059:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Validamos que hay datos que leer.
2060:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; }
 4499              		.loc 1 2060 0
 4500 1ed4 BB68     		ldr	r3, [r7, #8]
 4501 1ed6 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 4502 1ed8 FB68     		ldr	r3, [r7, #12]
 4503 1eda 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 4504 1edc 9A42     		cmp	r2, r3
 4505 1ede 00F22081 		bhi	.L220
 4506              	.L198:
2061:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2062:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Frame Control Field (1 byte)
2063:openstack/02a-MAClow/IEEE802154Ecsl.c ****    temp_8b = *((uint8_t*)(msg->payload)+ieee802514_header->headerLength);
 4507              		.loc 1 2063 0
 4508 1ee2 FB68     		ldr	r3, [r7, #12]
 4509 1ee4 5A68     		ldr	r2, [r3, #4]
 4510 1ee6 BB68     		ldr	r3, [r7, #8]
 4511 1ee8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4512 1eea D318     		adds	r3, r2, r3
 4513 1eec 1B78     		ldrb	r3, [r3, #0]
 4514 1eee FB75     		strb	r3, [r7, #23]
2064:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2065:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // La estructura del FCF en la trama de wake-up es 0x55 = 01010101b:
2066:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // b0-b2 -- Frame Type (debe ser 101 para trama wake-up)
2067:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // b3 ----- Long Frame Control (debe ser 0 para indicar que se trata de un FCF de 1 byte como es
2068:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // b4-b5 -- Dest Addr Mode (en este caso, short address por lo que tiene que valer 10).
2069:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // b6-b7 -- Src Addr Mode (en este caso, short address por lo que tiene que valer 10).
2070:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2071:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  b7 | b6 | b5 | b4 | b3 | b2 | b1 | b0 |
2072:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   0 |  1 |  0 |  1 |  0 |  1 |  0 |  1 |
2073:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2074:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->frameType = (temp_8b >> IEEE154_FCF_FRAME_TYPE) & 0x07;//3b
 4515              		.loc 1 2074 0
 4516 1ef0 FB7D     		ldrb	r3, [r7, #23]
 4517 1ef2 03F00703 		and	r3, r3, #7
 4518 1ef6 DAB2     		uxtb	r2, r3
 4519 1ef8 BB68     		ldr	r3, [r7, #8]
 4520 1efa 9A70     		strb	r2, [r3, #2]
2075:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2076:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Comprobamos que efectivamente se trata de una trama de tipo MULTIPURPOSE.
2077:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->frameType != IEEE154_TYPE_MULTIPURPOSE) {return; }
 4521              		.loc 1 2077 0
 4522 1efc BB68     		ldr	r3, [r7, #8]
 4523 1efe 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4524 1f00 052B     		cmp	r3, #5
 4525 1f02 40F01081 		bne	.L221
 4526              	.L200:
2078:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2079:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Verificamos que efectivamente el campo Long Frame Control tiene valor cero para indicar que e
2080:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((temp_8b >> 3) & 0x01) { return; }
 4527              		.loc 1 2080 0
 4528 1f06 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4529 1f08 4FEAD303 		lsr	r3, r3, #3
 4530 1f0c DBB2     		uxtb	r3, r3
 4531 1f0e 03F00103 		and	r3, r3, #1
 4532 1f12 002B     		cmp	r3, #0
 4533 1f14 40F00981 		bne	.L222
 4534              	.L201:
2081:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2082:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Recuperamos los Destination y Source Address Mode
2083:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2084:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Destination Address Mode
2085:openstack/02a-MAClow/IEEE802154Ecsl.c ****    dst_addr_mode = (temp_8b >> 4) & 0x03;
 4535              		.loc 1 2085 0
 4536 1f18 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4537 1f1a 4FEA1313 		lsr	r3, r3, #4
 4538 1f1e DBB2     		uxtb	r3, r3
 4539 1f20 03F00303 		and	r3, r3, #3
 4540 1f24 BB75     		strb	r3, [r7, #22]
2086:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if(dst_addr_mode == 1) { // 01 en binario en bits b5-b4
 4541              		.loc 1 2086 0
 4542 1f26 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 4543 1f28 012B     		cmp	r3, #1
 4544 1f2a 0BD1     		bne	.L202
2087:openstack/02a-MAClow/IEEE802154Ecsl.c ****      // Debería ser siempre este caso en las tramas wake-up por lo que se trata como error cualqui
2088:openstack/02a-MAClow/IEEE802154Ecsl.c ****      ieee802514_header->dest.type = ADDR_16B;
 4545              		.loc 1 2088 0
 4546 1f2c BB68     		ldr	r3, [r7, #8]
 4547 1f2e 4FF00102 		mov	r2, #1
 4548 1f32 DA76     		strb	r2, [r3, #27]
2089:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2090:openstack/02a-MAClow/IEEE802154Ecsl.c ****    else {
2091:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	 openserial_printError(COMPONENT_IEEE802154,ERR_IEEE154_UNSUPPORTED, (errorparameter_t)1, (errorpa
2092:openstack/02a-MAClow/IEEE802154Ecsl.c ****      return; // this is an invalid packet, return
2093:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2094:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2095:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Source Address Mode
2096:openstack/02a-MAClow/IEEE802154Ecsl.c ****    src_addr_mode = (temp_8b >> 6) & 0x03;
 4549              		.loc 1 2096 0
 4550 1f34 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4551 1f36 4FEA9313 		lsr	r3, r3, #6
 4552 1f3a 7B75     		strb	r3, [r7, #21]
2097:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if(src_addr_mode == 1) { // 01 en binario en bits b7-b6
 4553              		.loc 1 2097 0
 4554 1f3c 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 4555 1f3e 012B     		cmp	r3, #1
 4556 1f40 0BD0     		beq	.L203
 4557 1f42 25E0     		b	.L218
 4558              	.L202:
2091:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	 openserial_printError(COMPONENT_IEEE802154,ERR_IEEE154_UNSUPPORTED, (errorparameter_t)1, (errorpa
 4559              		.loc 1 2091 0
 4560 1f44 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 4561 1f46 9BB2     		uxth	r3, r3
 4562 1f48 4FF00800 		mov	r0, #8
 4563 1f4c 4FF01901 		mov	r1, #25
 4564 1f50 4FF00102 		mov	r2, #1
 4565 1f54 FFF7FEFF 		bl	openserial_printError
2092:openstack/02a-MAClow/IEEE802154Ecsl.c ****      return; // this is an invalid packet, return
 4566              		.loc 1 2092 0
 4567 1f58 00E1     		b	.L197
 4568              	.L203:
2098:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // Debería ser siempre este caso en las tramas wake-up por lo que se trata como error cualqu
2099:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee802514_header->src.type = ADDR_16B;
 4569              		.loc 1 2099 0
 4570 1f5a BB68     		ldr	r3, [r7, #8]
 4571 1f5c 4FF00102 		mov	r2, #1
 4572 1f60 83F82C20 		strb	r2, [r3, #44]
2100:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2101:openstack/02a-MAClow/IEEE802154Ecsl.c ****    else {
2102:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  openserial_printError(COMPONENT_IEEE802154,ERR_IEEE154_UNSUPPORTED, (errorparameter_t)2, (errorp
2103:openstack/02a-MAClow/IEEE802154Ecsl.c ****       return; // this is an invalid packet, return
2104:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2105:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2106:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //
2107:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // En este punto ya hemos analizado el contenido del primer byte de la cabecera correspondiente 
2108:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //
2109:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2110:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // A partir de este punto, la estructura del paquete es la siguiente:
2111:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - SEQ NUMBER (macDSN): 1 byte
2112:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - PAN ID: 2 bytes
2113:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - DEST ADDR: 2 bytes
2114:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - RZ TIME IE: 2 bytes
2115:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   - IE LIST TERMINATOR: 2 bytes
2116:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //
2117:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2118:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2119:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Avanzamos 1 byte en el procesamiento de la cabecera.
2120:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->headerLength += 1;
 4573              		.loc 1 2120 0
 4574 1f64 BB68     		ldr	r3, [r7, #8]
 4575 1f66 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4576 1f68 03F10103 		add	r3, r3, #1
 4577 1f6c DAB2     		uxtb	r2, r3
 4578 1f6e BB68     		ldr	r3, [r7, #8]
 4579 1f70 5A70     		strb	r2, [r3, #1]
2121:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2122:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Posicionamos dentro del paquete para leer el resto de elementos.
2123:openstack/02a-MAClow/IEEE802154Ecsl.c ****    temp_8b = *((uint8_t*)(msg->payload)+ieee802514_header->headerLength);
 4580              		.loc 1 2123 0
 4581 1f72 FB68     		ldr	r3, [r7, #12]
 4582 1f74 5A68     		ldr	r2, [r3, #4]
 4583 1f76 BB68     		ldr	r3, [r7, #8]
 4584 1f78 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4585 1f7a D318     		adds	r3, r2, r3
 4586 1f7c 1B78     		ldrb	r3, [r3, #0]
 4587 1f7e FB75     		strb	r3, [r7, #23]
2124:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2125:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // 1.- SequenceNumber
2126:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; } // no more to read!
 4588              		.loc 1 2126 0
 4589 1f80 BB68     		ldr	r3, [r7, #8]
 4590 1f82 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 4591 1f84 FB68     		ldr	r3, [r7, #12]
 4592 1f86 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 4593 1f88 9A42     		cmp	r2, r3
 4594 1f8a 00F2D080 		bhi	.L223
 4595 1f8e 0AE0     		b	.L219
 4596              	.L218:
2102:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  openserial_printError(COMPONENT_IEEE802154,ERR_IEEE154_UNSUPPORTED, (errorparameter_t)2, (errorp
 4597              		.loc 1 2102 0
 4598 1f90 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 4599 1f92 9BB2     		uxth	r3, r3
 4600 1f94 4FF00800 		mov	r0, #8
 4601 1f98 4FF01901 		mov	r1, #25
 4602 1f9c 4FF00202 		mov	r2, #2
 4603 1fa0 FFF7FEFF 		bl	openserial_printError
2103:openstack/02a-MAClow/IEEE802154Ecsl.c ****       return; // this is an invalid packet, return
 4604              		.loc 1 2103 0
 4605 1fa4 DAE0     		b	.L197
 4606              	.L219:
2127:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->dsn  = *((uint8_t*)(msg->payload)+ieee802514_header->headerLength);
 4607              		.loc 1 2127 0
 4608 1fa6 FB68     		ldr	r3, [r7, #12]
 4609 1fa8 5A68     		ldr	r2, [r3, #4]
 4610 1faa BB68     		ldr	r3, [r7, #8]
 4611 1fac 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4612 1fae D318     		adds	r3, r2, r3
 4613 1fb0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4614 1fb2 BB68     		ldr	r3, [r7, #8]
 4615 1fb4 5A72     		strb	r2, [r3, #9]
2128:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->headerLength += 1;
 4616              		.loc 1 2128 0
 4617 1fb6 BB68     		ldr	r3, [r7, #8]
 4618 1fb8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4619 1fba 03F10103 		add	r3, r3, #1
 4620 1fbe DAB2     		uxtb	r2, r3
 4621 1fc0 BB68     		ldr	r3, [r7, #8]
 4622 1fc2 5A70     		strb	r2, [r3, #1]
2129:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2130:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // 2.- panID
2131:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; } // no more to read!
 4623              		.loc 1 2131 0
 4624 1fc4 BB68     		ldr	r3, [r7, #8]
 4625 1fc6 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 4626 1fc8 FB68     		ldr	r3, [r7, #12]
 4627 1fca 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 4628 1fcc 9A42     		cmp	r2, r3
 4629 1fce 00F2B080 		bhi	.L224
 4630              	.L207:
2132:openstack/02a-MAClow/IEEE802154Ecsl.c ****    packetfunctions_readAddress(((uint8_t*)(msg->payload)+ieee802514_header->headerLength), ADDR_PAN
 4631              		.loc 1 2132 0
 4632 1fd2 FB68     		ldr	r3, [r7, #12]
 4633 1fd4 5A68     		ldr	r2, [r3, #4]
 4634 1fd6 BB68     		ldr	r3, [r7, #8]
 4635 1fd8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4636 1fda D218     		adds	r2, r2, r3
 4637 1fdc BB68     		ldr	r3, [r7, #8]
 4638 1fde 03F10A03 		add	r3, r3, #10
 4639 1fe2 1046     		mov	r0, r2
 4640 1fe4 4FF00401 		mov	r1, #4
 4641 1fe8 1A46     		mov	r2, r3
 4642 1fea 4FF00103 		mov	r3, #1
 4643 1fee FFF7FEFF 		bl	packetfunctions_readAddress
2133:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->headerLength += 2;
 4644              		.loc 1 2133 0
 4645 1ff2 BB68     		ldr	r3, [r7, #8]
 4646 1ff4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4647 1ff6 03F10203 		add	r3, r3, #2
 4648 1ffa DAB2     		uxtb	r2, r3
 4649 1ffc BB68     		ldr	r3, [r7, #8]
 4650 1ffe 5A70     		strb	r2, [r3, #1]
2134:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2135:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // 3.- Dest Addr
2136:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; } // no more to read!
 4651              		.loc 1 2136 0
 4652 2000 BB68     		ldr	r3, [r7, #8]
 4653 2002 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 4654 2004 FB68     		ldr	r3, [r7, #12]
 4655 2006 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 4656 2008 9A42     		cmp	r2, r3
 4657 200a 00F29480 		bhi	.L225
 4658              	.L208:
2137:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2138:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // En este punto ya sabemos que el tipo de dirección tiene que ser ADDR_16B dado que cualquier 
2139:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // en la lectura del frame control field por lo que leemos los 2 bytes de la dirección del dest
2140:openstack/02a-MAClow/IEEE802154Ecsl.c ****    packetfunctions_readAddress(((uint8_t*)(msg->payload)+ieee802514_header->headerLength), ADDR_16B
 4659              		.loc 1 2140 0
 4660 200e FB68     		ldr	r3, [r7, #12]
 4661 2010 5A68     		ldr	r2, [r3, #4]
 4662 2012 BB68     		ldr	r3, [r7, #8]
 4663 2014 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4664 2016 D218     		adds	r2, r2, r3
 4665 2018 BB68     		ldr	r3, [r7, #8]
 4666 201a 03F11B03 		add	r3, r3, #27
 4667 201e 1046     		mov	r0, r2
 4668 2020 4FF00101 		mov	r1, #1
 4669 2024 1A46     		mov	r2, r3
 4670 2026 4FF00103 		mov	r3, #1
 4671 202a FFF7FEFF 		bl	packetfunctions_readAddress
2141:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->headerLength += 2;
 4672              		.loc 1 2141 0
 4673 202e BB68     		ldr	r3, [r7, #8]
 4674 2030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4675 2032 03F10203 		add	r3, r3, #2
 4676 2036 DAB2     		uxtb	r2, r3
 4677 2038 BB68     		ldr	r3, [r7, #8]
 4678 203a 5A70     		strb	r2, [r3, #1]
2142:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2143:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // 4.- RZ Time Header IE, formado por 4 bytes con la siguiente estructura (0x0E82)
2144:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  - b0-b6 (Length) = 2
2145:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  - b7-b14 (Element ID) = 0x1D
2146:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  - b15 (Type) = 0
2147:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  - b16-b31 (IE Content) = time (2 bytes)
2148:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //
2149:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  b15 | b14 | b13 | b12 | b11 | b10 | b9 | b8 | b7 | b6 | b5 | b4 | b3 | b2 | b1 | b0 |
2150:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   0  |  0  |  0  |  0  |  1  |  1  |  1 |  0 |  1 |  0 |  0 |  0 |  0 |  0 |  1 |  0 |
2151:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2152:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) {  return; } // no more to read!
 4679              		.loc 1 2152 0
 4680 203c BB68     		ldr	r3, [r7, #8]
 4681 203e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 4682 2040 FB68     		ldr	r3, [r7, #12]
 4683 2042 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 4684 2044 9A42     		cmp	r2, r3
 4685 2046 78D8     		bhi	.L226
 4686              	.L209:
2153:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2154:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Verificamos longitud a valor 2 y el elementID a valor 0x1D. Lo hacemos leyendo los primeros 2
2155:openstack/02a-MAClow/IEEE802154Ecsl.c ****    temp_16b = *((uint16_t*)(msg->payload)+ieee802514_header->headerLength);
 4687              		.loc 1 2155 0
 4688 2048 FB68     		ldr	r3, [r7, #12]
 4689 204a 5A68     		ldr	r2, [r3, #4]
 4690 204c BB68     		ldr	r3, [r7, #8]
 4691 204e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4692 2050 4FEA4303 		lsl	r3, r3, #1
 4693 2054 D318     		adds	r3, r2, r3
 4694 2056 1B88     		ldrh	r3, [r3, #0]	@ movhi
 4695 2058 7B82     		strh	r3, [r7, #18]	@ movhi
2156:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2157:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Comprobación de longitud a valor 2.
2158:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2159:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((temp_16b & 0x007f)  == 2) { return; }
 4696              		.loc 1 2159 0
 4697 205a 7B8A     		ldrh	r3, [r7, #18]
 4698 205c 03F07F03 		and	r3, r3, #127
 4699 2060 022B     		cmp	r3, #2
 4700 2062 6CD0     		beq	.L227
 4701              	.L210:
2160:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2161:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Comprobación de element ID = 0x1D.
2162:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2163:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (((temp_16b >> 7) & 0x001d) == 0) { return; }
 4702              		.loc 1 2163 0
 4703 2064 7B8A     		ldrh	r3, [r7, #18]
 4704 2066 4FEAD313 		lsr	r3, r3, #7
 4705 206a 9BB2     		uxth	r3, r3
 4706 206c 03F01D03 		and	r3, r3, #29
 4707 2070 002B     		cmp	r3, #0
 4708 2072 66D0     		beq	.L228
 4709              	.L211:
2164:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2165:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Comprobación del type = 0.
2166:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2167:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((temp_16b >> 15) & 0x0001) { return; }
 4710              		.loc 1 2167 0
 4711 2074 7B8A     		ldrh	r3, [r7, #18]
 4712 2076 4FEAD333 		lsr	r3, r3, #15
 4713 207a 9BB2     		uxth	r3, r3
 4714 207c 03F00103 		and	r3, r3, #1
 4715 2080 002B     		cmp	r3, #0
 4716 2082 60D1     		bne	.L229
 4717              	.L212:
2168:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2169:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Obtención del IE Content (rztime).
2170:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->headerLength += 2;
 4718              		.loc 1 2170 0
 4719 2084 BB68     		ldr	r3, [r7, #8]
 4720 2086 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4721 2088 03F10203 		add	r3, r3, #2
 4722 208c DAB2     		uxtb	r2, r3
 4723 208e BB68     		ldr	r3, [r7, #8]
 4724 2090 5A70     		strb	r2, [r3, #1]
2171:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; } // no more to read!
 4725              		.loc 1 2171 0
 4726 2092 BB68     		ldr	r3, [r7, #8]
 4727 2094 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 4728 2096 FB68     		ldr	r3, [r7, #12]
 4729 2098 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 4730 209a 9A42     		cmp	r2, r3
 4731 209c 55D8     		bhi	.L230
 4732              	.L213:
2172:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2173:openstack/02a-MAClow/IEEE802154Ecsl.c ****    (*rztime) = *((uint16_t*)(msg->payload)+ieee802514_header->headerLength);
 4733              		.loc 1 2173 0
 4734 209e FB68     		ldr	r3, [r7, #12]
 4735 20a0 5A68     		ldr	r2, [r3, #4]
 4736 20a2 BB68     		ldr	r3, [r7, #8]
 4737 20a4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4738 20a6 4FEA4303 		lsl	r3, r3, #1
 4739 20aa D318     		adds	r3, r2, r3
 4740 20ac 1A88     		ldrh	r2, [r3, #0]
 4741 20ae 7B68     		ldr	r3, [r7, #4]
 4742 20b0 1A80     		strh	r2, [r3, #0]	@ movhi
2174:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2175:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // 5.- IE List Terminator, formado por 2 bytes con la siguiente estructura:
2176:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  - b0-b6 (Length) = 0
2177:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  - b7-b14 (Element ID) = 0x7e o 0x7f
2178:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  - b15 (Type) = 0
2179:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //
2180:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //  b15 | b14 | b13 | b12 | b11 | b10 | b9 | b8 | b7 | b6 | b5 | b4 | b3 | b2 | b1 | b0 |
2181:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //   0  |  1  |  1  |  1 |  1  |  1  |  1 |  1 |  1 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |
2182:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2183:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->headerLength += 2;
 4743              		.loc 1 2183 0
 4744 20b2 BB68     		ldr	r3, [r7, #8]
 4745 20b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4746 20b6 03F10203 		add	r3, r3, #2
 4747 20ba DAB2     		uxtb	r2, r3
 4748 20bc BB68     		ldr	r3, [r7, #8]
 4749 20be 5A70     		strb	r2, [r3, #1]
2184:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; } // no more to read!
 4750              		.loc 1 2184 0
 4751 20c0 BB68     		ldr	r3, [r7, #8]
 4752 20c2 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 4753 20c4 FB68     		ldr	r3, [r7, #12]
 4754 20c6 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 4755 20c8 9A42     		cmp	r2, r3
 4756 20ca 40D8     		bhi	.L231
 4757              	.L214:
2185:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2186:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Verificamos longitud a valor 0 y el elementID a valor 0x7E o 0x7F. Lo hacemos leyendo los 2 b
2187:openstack/02a-MAClow/IEEE802154Ecsl.c ****    temp_16b = *((uint16_t*)(msg->payload)+ieee802514_header->headerLength);
 4758              		.loc 1 2187 0
 4759 20cc FB68     		ldr	r3, [r7, #12]
 4760 20ce 5A68     		ldr	r2, [r3, #4]
 4761 20d0 BB68     		ldr	r3, [r7, #8]
 4762 20d2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4763 20d4 4FEA4303 		lsl	r3, r3, #1
 4764 20d8 D318     		adds	r3, r2, r3
 4765 20da 1B88     		ldrh	r3, [r3, #0]	@ movhi
 4766 20dc 7B82     		strh	r3, [r7, #18]	@ movhi
2188:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2189:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Comprobación de longitud a valor 0.
2190:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2191:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (temp_16b & 0x007f) { return; }
 4767              		.loc 1 2191 0
 4768 20de 7B8A     		ldrh	r3, [r7, #18]
 4769 20e0 03F07F03 		and	r3, r3, #127
 4770 20e4 002B     		cmp	r3, #0
 4771 20e6 34D1     		bne	.L232
 4772              	.L215:
2192:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2193:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Comprobación de element ID = 0x7E o 0x7F.
2194:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2195:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((((temp_16b >> 7) & 0x007e) != 0x7e) &&
 4773              		.loc 1 2195 0
 4774 20e8 7B8A     		ldrh	r3, [r7, #18]
 4775 20ea 4FEAD313 		lsr	r3, r3, #7
 4776 20ee 9BB2     		uxth	r3, r3
 4777 20f0 03F07E03 		and	r3, r3, #126
 4778 20f4 7E2B     		cmp	r3, #126
 4779 20f6 07D0     		beq	.L216
2196:openstack/02a-MAClow/IEEE802154Ecsl.c ****        (((temp_16b >> 7) & 0x007f) != 0x7f)
 4780              		.loc 1 2196 0 discriminator 1
 4781 20f8 7B8A     		ldrh	r3, [r7, #18]
 4782 20fa 4FEAD313 		lsr	r3, r3, #7
 4783 20fe 9BB2     		uxth	r3, r3
 4784 2100 03F07F03 		and	r3, r3, #127
2195:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((((temp_16b >> 7) & 0x007e) != 0x7e) &&
 4785              		.loc 1 2195 0 discriminator 1
 4786 2104 7F2B     		cmp	r3, #127
 4787 2106 26D1     		bne	.L233
 4788              	.L216:
2197:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  ){ return; }
2198:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2199:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Comprobación del type = 0.
2200:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2201:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((temp_16b >> 15) & 0x0001) { return; }
 4789              		.loc 1 2201 0
 4790 2108 7B8A     		ldrh	r3, [r7, #18]
 4791 210a 4FEAD333 		lsr	r3, r3, #15
 4792 210e 9BB2     		uxth	r3, r3
 4793 2110 03F00103 		and	r3, r3, #1
 4794 2114 002B     		cmp	r3, #0
 4795 2116 20D1     		bne	.L234
 4796              	.L217:
2202:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2203:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Por ultimo y en el caso de haber llegado aquí, consideramos la cabecera como válida.
2204:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee802514_header->valid=TRUE;
 4797              		.loc 1 2204 0
 4798 2118 BB68     		ldr	r3, [r7, #8]
 4799 211a 4FF00102 		mov	r2, #1
 4800 211e 1A70     		strb	r2, [r3, #0]
 4801 2120 1CE0     		b	.L197
 4802              	.L220:
2060:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; }
 4803              		.loc 1 2060 0
 4804 2122 00BF     		nop
 4805 2124 1AE0     		b	.L197
 4806              	.L221:
2077:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->frameType != IEEE154_TYPE_MULTIPURPOSE) {return; }
 4807              		.loc 1 2077 0
 4808 2126 00BF     		nop
 4809 2128 18E0     		b	.L197
 4810              	.L222:
2080:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((temp_8b >> 3) & 0x01) { return; }
 4811              		.loc 1 2080 0
 4812 212a 00BF     		nop
 4813 212c 16E0     		b	.L197
 4814              	.L223:
2126:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; } // no more to read!
 4815              		.loc 1 2126 0
 4816 212e 00BF     		nop
 4817 2130 14E0     		b	.L197
 4818              	.L224:
2131:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; } // no more to read!
 4819              		.loc 1 2131 0
 4820 2132 00BF     		nop
 4821 2134 12E0     		b	.L197
 4822              	.L225:
2136:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; } // no more to read!
 4823              		.loc 1 2136 0
 4824 2136 00BF     		nop
 4825 2138 10E0     		b	.L197
 4826              	.L226:
2152:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) {  return; } // no more to read!
 4827              		.loc 1 2152 0
 4828 213a 00BF     		nop
 4829 213c 0EE0     		b	.L197
 4830              	.L227:
2159:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((temp_16b & 0x007f)  == 2) { return; }
 4831              		.loc 1 2159 0
 4832 213e 00BF     		nop
 4833 2140 0CE0     		b	.L197
 4834              	.L228:
2163:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (((temp_16b >> 7) & 0x001d) == 0) { return; }
 4835              		.loc 1 2163 0
 4836 2142 00BF     		nop
 4837 2144 0AE0     		b	.L197
 4838              	.L229:
2167:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((temp_16b >> 15) & 0x0001) { return; }
 4839              		.loc 1 2167 0
 4840 2146 00BF     		nop
 4841 2148 08E0     		b	.L197
 4842              	.L230:
2171:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; } // no more to read!
 4843              		.loc 1 2171 0
 4844 214a 00BF     		nop
 4845 214c 06E0     		b	.L197
 4846              	.L231:
2184:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee802514_header->headerLength > msg->length) { return; } // no more to read!
 4847              		.loc 1 2184 0
 4848 214e 00BF     		nop
 4849 2150 04E0     		b	.L197
 4850              	.L232:
2191:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (temp_16b & 0x007f) { return; }
 4851              		.loc 1 2191 0
 4852 2152 00BF     		nop
 4853 2154 02E0     		b	.L197
 4854              	.L233:
2197:openstack/02a-MAClow/IEEE802154Ecsl.c **** 	  ){ return; }
 4855              		.loc 1 2197 0
 4856 2156 00BF     		nop
 4857 2158 00E0     		b	.L197
 4858              	.L234:
2201:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((temp_16b >> 15) & 0x0001) { return; }
 4859              		.loc 1 2201 0
 4860 215a 00BF     		nop
 4861              	.L197:
2205:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 4862              		.loc 1 2205 0
 4863 215c 07F11807 		add	r7, r7, #24
 4864 2160 BD46     		mov	sp, r7
 4865 2162 80BD     		pop	{r7, pc}
 4866              		.cfi_endproc
 4867              	.LFE53:
 4869              		.align	2
 4870              		.global	isValidRxFrame
 4871              		.thumb
 4872              		.thumb_func
 4874              	isValidRxFrame:
 4875              	.LFB54:
2206:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2207:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2208:openstack/02a-MAClow/IEEE802154Ecsl.c **** //====================  FRAME VALIDITY CHECK ===========================
2209:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2210:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2211:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
2212:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Decides whether the packet I just received is valid received frame.
2213:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2214:openstack/02a-MAClow/IEEE802154Ecsl.c **** A valid Rx frame satisfies the following constraints:
2215:openstack/02a-MAClow/IEEE802154Ecsl.c **** - its IEEE802.15.4 header is well formatted
2216:openstack/02a-MAClow/IEEE802154Ecsl.c **** - it's a DATA of BEACON frame (i.e. not ACK and not COMMAND)
2217:openstack/02a-MAClow/IEEE802154Ecsl.c **** - it's sent on the same PANid as mine
2218:openstack/02a-MAClow/IEEE802154Ecsl.c **** - it's for me (unicast or broadcast)
2219:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2220:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[in] ieee802514_header IEEE802.15.4 header of the packet I just received
2221:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2222:openstack/02a-MAClow/IEEE802154Ecsl.c **** \returns TRUE if packet is valid received frame, FALSE otherwise
2223:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
2224:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE bool isValidRxFrame(ieee802154_header_iht* ieee802514_header) {
 4876              		.loc 1 2224 0
 4877              		.cfi_startproc
 4878              		@ args = 0, pretend = 0, frame = 8
 4879              		@ frame_needed = 1, uses_anonymous_args = 0
 4880 2164 90B5     		push	{r4, r7, lr}
 4881              	.LCFI128:
 4882              		.cfi_def_cfa_offset 12
 4883              		.cfi_offset 4, -12
 4884              		.cfi_offset 7, -8
 4885              		.cfi_offset 14, -4
 4886 2166 83B0     		sub	sp, sp, #12
 4887              	.LCFI129:
 4888              		.cfi_def_cfa_offset 24
 4889 2168 00AF     		add	r7, sp, #0
 4890              	.LCFI130:
 4891              		.cfi_def_cfa_register 7
 4892 216a 7860     		str	r0, [r7, #4]
2225:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return ieee802514_header->valid==TRUE                                                           
 4893              		.loc 1 2225 0
 4894 216c 7B68     		ldr	r3, [r7, #4]
 4895 216e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
2226:openstack/02a-MAClow/IEEE802154Ecsl.c ****           (
2227:openstack/02a-MAClow/IEEE802154Ecsl.c ****              ieee802514_header->frameType==IEEE154_TYPE_DATA                   ||
2228:openstack/02a-MAClow/IEEE802154Ecsl.c ****              ieee802514_header->frameType==IEEE154_TYPE_BEACON
2229:openstack/02a-MAClow/IEEE802154Ecsl.c ****           )                                                                                        
2230:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header->panid,idmanager_getMyID(ADDR_PANID))     
 4896              		.loc 1 2230 0
 4897 2170 002B     		cmp	r3, #0
 4898 2172 2BD0     		beq	.L236
2227:openstack/02a-MAClow/IEEE802154Ecsl.c ****              ieee802514_header->frameType==IEEE154_TYPE_DATA                   ||
 4899              		.loc 1 2227 0
 4900 2174 7B68     		ldr	r3, [r7, #4]
 4901 2176 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
2225:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return ieee802514_header->valid==TRUE                                                           
 4902              		.loc 1 2225 0
 4903 2178 012B     		cmp	r3, #1
 4904 217a 03D0     		beq	.L237
2228:openstack/02a-MAClow/IEEE802154Ecsl.c ****              ieee802514_header->frameType==IEEE154_TYPE_BEACON
 4905              		.loc 1 2228 0
 4906 217c 7B68     		ldr	r3, [r7, #4]
 4907 217e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
2227:openstack/02a-MAClow/IEEE802154Ecsl.c ****              ieee802514_header->frameType==IEEE154_TYPE_DATA                   ||
 4908              		.loc 1 2227 0
 4909 2180 002B     		cmp	r3, #0
 4910 2182 23D1     		bne	.L236
 4911              	.L237:
 4912              		.loc 1 2230 0
 4913 2184 7B68     		ldr	r3, [r7, #4]
 4914 2186 03F10A04 		add	r4, r3, #10
 4915 218a 4FF00400 		mov	r0, #4
 4916 218e FFF7FEFF 		bl	idmanager_getMyID
 4917 2192 0346     		mov	r3, r0
 4918 2194 2046     		mov	r0, r4
 4919 2196 1946     		mov	r1, r3
 4920 2198 FFF7FEFF 		bl	packetfunctions_sameAddress
 4921 219c 0346     		mov	r3, r0
2229:openstack/02a-MAClow/IEEE802154Ecsl.c ****           )                                                                                        
 4922              		.loc 1 2229 0
 4923 219e 002B     		cmp	r3, #0
 4924 21a0 14D0     		beq	.L236
2231:openstack/02a-MAClow/IEEE802154Ecsl.c ****           (
2232:openstack/02a-MAClow/IEEE802154Ecsl.c ****              idmanager_isMyAddress(&ieee802514_header->dest)                   ||
 4925              		.loc 1 2232 0
 4926 21a2 7B68     		ldr	r3, [r7, #4]
 4927 21a4 03F11B03 		add	r3, r3, #27
 4928 21a8 1846     		mov	r0, r3
 4929 21aa FFF7FEFF 		bl	idmanager_isMyAddress
 4930 21ae 0346     		mov	r3, r0
2230:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header->panid,idmanager_getMyID(ADDR_PANID))     
 4931              		.loc 1 2230 0
 4932 21b0 002B     		cmp	r3, #0
 4933 21b2 08D1     		bne	.L238
2233:openstack/02a-MAClow/IEEE802154Ecsl.c ****              packetfunctions_isBroadcastMulticast(&ieee802514_header->dest)
 4934              		.loc 1 2233 0
 4935 21b4 7B68     		ldr	r3, [r7, #4]
 4936 21b6 03F11B03 		add	r3, r3, #27
 4937 21ba 1846     		mov	r0, r3
 4938 21bc FFF7FEFF 		bl	packetfunctions_isBroadcastMulticast
 4939 21c0 0346     		mov	r3, r0
2232:openstack/02a-MAClow/IEEE802154Ecsl.c ****              idmanager_isMyAddress(&ieee802514_header->dest)                   ||
 4940              		.loc 1 2232 0
 4941 21c2 002B     		cmp	r3, #0
 4942 21c4 02D0     		beq	.L236
 4943              	.L238:
2230:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header->panid,idmanager_getMyID(ADDR_PANID))     
 4944              		.loc 1 2230 0 discriminator 2
 4945 21c6 4FF00103 		mov	r3, #1
 4946 21ca 01E0     		b	.L239
 4947              	.L236:
2230:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header->panid,idmanager_getMyID(ADDR_PANID))     
 4948              		.loc 1 2230 0 is_stmt 0 discriminator 1
 4949 21cc 4FF00003 		mov	r3, #0
 4950              	.L239:
2225:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return ieee802514_header->valid==TRUE                                                           
 4951              		.loc 1 2225 0 is_stmt 1
 4952 21d0 03F00103 		and	r3, r3, #1
 4953 21d4 DBB2     		uxtb	r3, r3
2234:openstack/02a-MAClow/IEEE802154Ecsl.c ****           );
2235:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 4954              		.loc 1 2235 0
 4955 21d6 1846     		mov	r0, r3
 4956 21d8 07F10C07 		add	r7, r7, #12
 4957 21dc BD46     		mov	sp, r7
 4958 21de 90BD     		pop	{r4, r7, pc}
 4959              		.cfi_endproc
 4960              	.LFE54:
 4962              		.align	2
 4963              		.global	isValidAck
 4964              		.thumb
 4965              		.thumb_func
 4967              	isValidAck:
 4968              	.LFB55:
2236:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2237:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
2238:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Decides whether the packet I just received is a valid ACK.
2239:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2240:openstack/02a-MAClow/IEEE802154Ecsl.c **** A packet is a valid ACK if it satisfies the following conditions:
2241:openstack/02a-MAClow/IEEE802154Ecsl.c **** - the IEEE802.15.4 header is valid
2242:openstack/02a-MAClow/IEEE802154Ecsl.c **** - the frame type is 'ACK'
2243:openstack/02a-MAClow/IEEE802154Ecsl.c **** - the sequence number in the ACK matches the sequence number of the packet sent
2244:openstack/02a-MAClow/IEEE802154Ecsl.c **** - the ACK contains my PANid
2245:openstack/02a-MAClow/IEEE802154Ecsl.c **** - the packet is unicast to me
2246:openstack/02a-MAClow/IEEE802154Ecsl.c **** - the packet comes from the neighbor I sent the data to
2247:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2248:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[in] ieee802514_header IEEE802.15.4 header of the packet I just received
2249:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[in] packetSent points to the packet I just sent
2250:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2251:openstack/02a-MAClow/IEEE802154Ecsl.c **** \returns TRUE if packet is a valid ACK, FALSE otherwise.
2252:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
2253:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE bool isValidAck(ieee802154_header_iht* ieee802514_header, OpenQueueEntry_t* packetSent)
 4969              		.loc 1 2253 0
 4970              		.cfi_startproc
 4971              		@ args = 0, pretend = 0, frame = 8
 4972              		@ frame_needed = 1, uses_anonymous_args = 0
 4973 21e0 90B5     		push	{r4, r7, lr}
 4974              	.LCFI131:
 4975              		.cfi_def_cfa_offset 12
 4976              		.cfi_offset 4, -12
 4977              		.cfi_offset 7, -8
 4978              		.cfi_offset 14, -4
 4979 21e2 83B0     		sub	sp, sp, #12
 4980              	.LCFI132:
 4981              		.cfi_def_cfa_offset 24
 4982 21e4 00AF     		add	r7, sp, #0
 4983              	.LCFI133:
 4984              		.cfi_def_cfa_register 7
 4985 21e6 7860     		str	r0, [r7, #4]
 4986 21e8 3960     		str	r1, [r7, #0]
2254:openstack/02a-MAClow/IEEE802154Ecsl.c ****    /*
2255:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return ieee802514_header->valid==TRUE                                                           
2256:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header->frameType==IEEE154_TYPE_ACK                                           
2257:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header->dsn==packetSent->l2_dsn                                               
2258:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header->panid,idmanager_getMyID(ADDR_PANID))     
2259:openstack/02a-MAClow/IEEE802154Ecsl.c ****           idmanager_isMyAddress(&ieee802514_header->dest)                                          
2260:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header->src,&packetSent->l2_nextORpreviousHop);
2261:openstack/02a-MAClow/IEEE802154Ecsl.c ****    */
2262:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // poipoi don't check for seq num
2263:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return ieee802514_header->valid==TRUE                                                           
 4987              		.loc 1 2263 0
 4988 21ea 7B68     		ldr	r3, [r7, #4]
 4989 21ec 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
2264:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header->frameType==IEEE154_TYPE_ACK                                           
2265:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header->panid,idmanager_getMyID(ADDR_PANID))     
2266:openstack/02a-MAClow/IEEE802154Ecsl.c ****           idmanager_isMyAddress(&ieee802514_header->dest)                                          
 4990              		.loc 1 2266 0
 4991 21ee 002B     		cmp	r3, #0
 4992 21f0 2BD0     		beq	.L242
2264:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header->frameType==IEEE154_TYPE_ACK                                           
 4993              		.loc 1 2264 0
 4994 21f2 7B68     		ldr	r3, [r7, #4]
 4995 21f4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
2263:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return ieee802514_header->valid==TRUE                                                           
 4996              		.loc 1 2263 0
 4997 21f6 022B     		cmp	r3, #2
 4998 21f8 27D1     		bne	.L242
2265:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header->panid,idmanager_getMyID(ADDR_PANID))     
 4999              		.loc 1 2265 0
 5000 21fa 7B68     		ldr	r3, [r7, #4]
 5001 21fc 03F10A04 		add	r4, r3, #10
 5002 2200 4FF00400 		mov	r0, #4
 5003 2204 FFF7FEFF 		bl	idmanager_getMyID
 5004 2208 0346     		mov	r3, r0
 5005 220a 2046     		mov	r0, r4
 5006 220c 1946     		mov	r1, r3
 5007 220e FFF7FEFF 		bl	packetfunctions_sameAddress
 5008 2212 0346     		mov	r3, r0
2264:openstack/02a-MAClow/IEEE802154Ecsl.c ****           ieee802514_header->frameType==IEEE154_TYPE_ACK                                           
 5009              		.loc 1 2264 0
 5010 2214 002B     		cmp	r3, #0
 5011 2216 18D0     		beq	.L242
 5012              		.loc 1 2266 0
 5013 2218 7B68     		ldr	r3, [r7, #4]
 5014 221a 03F11B03 		add	r3, r3, #27
 5015 221e 1846     		mov	r0, r3
 5016 2220 FFF7FEFF 		bl	idmanager_isMyAddress
 5017 2224 0346     		mov	r3, r0
2265:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header->panid,idmanager_getMyID(ADDR_PANID))     
 5018              		.loc 1 2265 0
 5019 2226 002B     		cmp	r3, #0
 5020 2228 0FD0     		beq	.L242
2267:openstack/02a-MAClow/IEEE802154Ecsl.c ****           packetfunctions_sameAddress(&ieee802514_header->src,&packetSent->l2_nextORpreviousHop);
 5021              		.loc 1 2267 0
 5022 222a 7B68     		ldr	r3, [r7, #4]
 5023 222c 03F12C02 		add	r2, r3, #44
 5024 2230 3B68     		ldr	r3, [r7, #0]
 5025 2232 03F13803 		add	r3, r3, #56
 5026 2236 1046     		mov	r0, r2
 5027 2238 1946     		mov	r1, r3
 5028 223a FFF7FEFF 		bl	packetfunctions_sameAddress
 5029 223e 0346     		mov	r3, r0
2266:openstack/02a-MAClow/IEEE802154Ecsl.c ****           idmanager_isMyAddress(&ieee802514_header->dest)                                          
 5030              		.loc 1 2266 0
 5031 2240 002B     		cmp	r3, #0
 5032 2242 02D0     		beq	.L242
2266:openstack/02a-MAClow/IEEE802154Ecsl.c ****           idmanager_isMyAddress(&ieee802514_header->dest)                                          
 5033              		.loc 1 2266 0 is_stmt 0 discriminator 2
 5034 2244 4FF00103 		mov	r3, #1
 5035 2248 01E0     		b	.L243
 5036              	.L242:
2266:openstack/02a-MAClow/IEEE802154Ecsl.c ****           idmanager_isMyAddress(&ieee802514_header->dest)                                          
 5037              		.loc 1 2266 0 discriminator 1
 5038 224a 4FF00003 		mov	r3, #0
 5039              	.L243:
2263:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return ieee802514_header->valid==TRUE                                                           
 5040              		.loc 1 2263 0 is_stmt 1
 5041 224e 03F00103 		and	r3, r3, #1
 5042 2252 DBB2     		uxtb	r3, r3
2268:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5043              		.loc 1 2268 0
 5044 2254 1846     		mov	r0, r3
 5045 2256 07F10C07 		add	r7, r7, #12
 5046 225a BD46     		mov	sp, r7
 5047 225c 90BD     		pop	{r4, r7, pc}
 5048              		.cfi_endproc
 5049              	.LFE55:
 5051 225e 00BF     		.align	2
 5052              		.global	incrementAsnOffset
 5053              		.thumb
 5054              		.thumb_func
 5056              	incrementAsnOffset:
 5057              	.LFB56:
2269:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2270:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2271:openstack/02a-MAClow/IEEE802154Ecsl.c **** //========================  ASN HANDLING ===============================
2272:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2273:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2274:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void incrementAsnOffset() {
 5058              		.loc 1 2274 0
 5059              		.cfi_startproc
 5060              		@ args = 0, pretend = 0, frame = 0
 5061              		@ frame_needed = 1, uses_anonymous_args = 0
 5062 2260 98B5     		push	{r3, r4, r7, lr}
 5063              	.LCFI134:
 5064              		.cfi_def_cfa_offset 16
 5065              		.cfi_offset 3, -16
 5066              		.cfi_offset 4, -12
 5067              		.cfi_offset 7, -8
 5068              		.cfi_offset 14, -4
 5069 2262 00AF     		add	r7, sp, #0
 5070              	.LCFI135:
 5071              		.cfi_def_cfa_register 7
2275:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // increment the asn
2276:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.asn.bytes0and1++;
 5072              		.loc 1 2276 0
 5073 2264 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5074 2268 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5075 226c B3F80330 		ldrh	r3, [r3, #3]	@ unaligned
 5076 2270 9BB2     		uxth	r3, r3
 5077 2272 03F10103 		add	r3, r3, #1
 5078 2276 9AB2     		uxth	r2, r3
 5079 2278 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5080 227c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5081 2280 A3F80320 		strh	r2, [r3, #3]	@ unaligned
2277:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.asn.bytes0and1==0) {
 5082              		.loc 1 2277 0
 5083 2284 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5084 2288 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5085 228c B3F80330 		ldrh	r3, [r3, #3]	@ unaligned
 5086 2290 9BB2     		uxth	r3, r3
 5087 2292 002B     		cmp	r3, #0
 5088 2294 25D1     		bne	.L246
2278:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.asn.bytes2and3++;
 5089              		.loc 1 2278 0
 5090 2296 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5091 229a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5092 229e B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 5093 22a2 9BB2     		uxth	r3, r3
 5094 22a4 03F10103 		add	r3, r3, #1
 5095 22a8 9AB2     		uxth	r2, r3
 5096 22aa 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5097 22ae C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5098 22b2 A3F80120 		strh	r2, [r3, #1]	@ unaligned
2279:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee154e_vars.asn.bytes2and3==0) {
 5099              		.loc 1 2279 0
 5100 22b6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5101 22ba C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5102 22be B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 5103 22c2 9BB2     		uxth	r3, r3
 5104 22c4 002B     		cmp	r3, #0
 5105 22c6 0CD1     		bne	.L246
2280:openstack/02a-MAClow/IEEE802154Ecsl.c ****          ieee154e_vars.asn.byte4++;
 5106              		.loc 1 2280 0
 5107 22c8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5108 22cc C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5109 22d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5110 22d2 03F10103 		add	r3, r3, #1
 5111 22d6 DAB2     		uxtb	r2, r3
 5112 22d8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5113 22dc C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5114 22e0 1A70     		strb	r2, [r3, #0]
 5115              	.L246:
2281:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
2282:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2283:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // increment the offsets: Comment slot offset update.
2284:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.slotOffset  = (ieee154e_vars.slotOffset+1)%schedule_getFrameLength();
 5116              		.loc 1 2284 0
 5117 22e2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5118 22e6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5119 22ea DB88     		ldrh	r3, [r3, #6]
 5120 22ec 03F10104 		add	r4, r3, #1
 5121 22f0 FFF7FEFF 		bl	schedule_getFrameLength
 5122 22f4 0346     		mov	r3, r0
 5123 22f6 94FBF3F2 		sdiv	r2, r4, r3
 5124 22fa 03FB02F3 		mul	r3, r3, r2
 5125 22fe E31A     		subs	r3, r4, r3
 5126 2300 9AB2     		uxth	r2, r3
 5127 2302 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5128 2306 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5129 230a DA80     		strh	r2, [r3, #6]	@ movhi
2285:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.asnOffset   = (ieee154e_vars.asnOffset+1)%16;
 5130              		.loc 1 2285 0
 5131 230c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5132 2310 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5133 2314 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 5134 2318 03F10102 		add	r2, r3, #1
 5135 231c 4FF00F03 		mov	r3, #15
 5136 2320 C8F20003 		movt	r3, 32768
 5137 2324 1340     		ands	r3, r3, r2
 5138 2326 002B     		cmp	r3, #0
 5139 2328 05DA     		bge	.L247
 5140 232a 03F1FF33 		add	r3, r3, #-1
 5141 232e 63F00F03 		orn	r3, r3, #15
 5142 2332 03F10103 		add	r3, r3, #1
 5143              	.L247:
 5144 2336 DAB2     		uxtb	r2, r3
 5145 2338 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5146 233c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5147 2340 83F82D20 		strb	r2, [r3, #45]
2286:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5148              		.loc 1 2286 0
 5149 2344 98BD     		pop	{r3, r4, r7, pc}
 5150              		.cfi_endproc
 5151              	.LFE56:
 5153 2346 00BF     		.align	2
 5154              		.global	ieee154e_getAsn
 5155              		.thumb
 5156              		.thumb_func
 5158              	ieee154e_getAsn:
 5159              	.LFB57:
2287:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2288:openstack/02a-MAClow/IEEE802154Ecsl.c **** //from upper layer that want to send the ASN to compute timing or latency
2289:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void ieee154e_getAsn(uint8_t* array) {
 5160              		.loc 1 2289 0
 5161              		.cfi_startproc
 5162              		@ args = 0, pretend = 0, frame = 8
 5163              		@ frame_needed = 1, uses_anonymous_args = 0
 5164              		@ link register save eliminated.
 5165 2348 80B4     		push	{r7}
 5166              	.LCFI136:
 5167              		.cfi_def_cfa_offset 4
 5168              		.cfi_offset 7, -4
 5169 234a 83B0     		sub	sp, sp, #12
 5170              	.LCFI137:
 5171              		.cfi_def_cfa_offset 16
 5172 234c 00AF     		add	r7, sp, #0
 5173              	.LCFI138:
 5174              		.cfi_def_cfa_register 7
 5175 234e 7860     		str	r0, [r7, #4]
2290:openstack/02a-MAClow/IEEE802154Ecsl.c ****    array[0]         = (ieee154e_vars.asn.bytes0and1     & 0xff);
 5176              		.loc 1 2290 0
 5177 2350 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5178 2354 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5179 2358 B3F80330 		ldrh	r3, [r3, #3]	@ unaligned
 5180 235c 9BB2     		uxth	r3, r3
 5181 235e DAB2     		uxtb	r2, r3
 5182 2360 7B68     		ldr	r3, [r7, #4]
 5183 2362 1A70     		strb	r2, [r3, #0]
2291:openstack/02a-MAClow/IEEE802154Ecsl.c ****    array[1]         = (ieee154e_vars.asn.bytes0and1/256 & 0xff);
 5184              		.loc 1 2291 0
 5185 2364 7B68     		ldr	r3, [r7, #4]
 5186 2366 03F10102 		add	r2, r3, #1
 5187 236a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5188 236e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5189 2372 B3F80330 		ldrh	r3, [r3, #3]	@ unaligned
 5190 2376 9BB2     		uxth	r3, r3
 5191 2378 4FEA1323 		lsr	r3, r3, #8
 5192 237c 9BB2     		uxth	r3, r3
 5193 237e DBB2     		uxtb	r3, r3
 5194 2380 1370     		strb	r3, [r2, #0]
2292:openstack/02a-MAClow/IEEE802154Ecsl.c ****    array[2]         = (ieee154e_vars.asn.bytes2and3     & 0xff);
 5195              		.loc 1 2292 0
 5196 2382 7B68     		ldr	r3, [r7, #4]
 5197 2384 03F10202 		add	r2, r3, #2
 5198 2388 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5199 238c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5200 2390 B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 5201 2394 9BB2     		uxth	r3, r3
 5202 2396 DBB2     		uxtb	r3, r3
 5203 2398 1370     		strb	r3, [r2, #0]
2293:openstack/02a-MAClow/IEEE802154Ecsl.c ****    array[3]         = (ieee154e_vars.asn.bytes2and3/256 & 0xff);
 5204              		.loc 1 2293 0
 5205 239a 7B68     		ldr	r3, [r7, #4]
 5206 239c 03F10302 		add	r2, r3, #3
 5207 23a0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5208 23a4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5209 23a8 B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 5210 23ac 9BB2     		uxth	r3, r3
 5211 23ae 4FEA1323 		lsr	r3, r3, #8
 5212 23b2 9BB2     		uxth	r3, r3
 5213 23b4 DBB2     		uxtb	r3, r3
 5214 23b6 1370     		strb	r3, [r2, #0]
2294:openstack/02a-MAClow/IEEE802154Ecsl.c ****    array[4]         =  ieee154e_vars.asn.byte4;
 5215              		.loc 1 2294 0
 5216 23b8 7B68     		ldr	r3, [r7, #4]
 5217 23ba 03F10402 		add	r2, r3, #4
 5218 23be 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5219 23c2 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5220 23c6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5221 23c8 1370     		strb	r3, [r2, #0]
2295:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5222              		.loc 1 2295 0
 5223 23ca 07F10C07 		add	r7, r7, #12
 5224 23ce BD46     		mov	sp, r7
 5225 23d0 80BC     		pop	{r7}
 5226 23d2 7047     		bx	lr
 5227              		.cfi_endproc
 5228              	.LFE57:
 5230              		.align	2
 5231              		.global	synchronizeAck
 5232              		.thumb
 5233              		.thumb_func
 5235              	synchronizeAck:
 5236              	.LFB58:
2296:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2297:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2298:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================  SYNCHRONIZATION ==============================
2299:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2300:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2301:openstack/02a-MAClow/IEEE802154Ecsl.c **** void synchronizeAck(PORT_SIGNED_INT_WIDTH timeCorrection) {
 5237              		.loc 1 2301 0
 5238              		.cfi_startproc
 5239              		@ args = 0, pretend = 0, frame = 16
 5240              		@ frame_needed = 1, uses_anonymous_args = 0
 5241 23d4 90B5     		push	{r4, r7, lr}
 5242              	.LCFI139:
 5243              		.cfi_def_cfa_offset 12
 5244              		.cfi_offset 4, -12
 5245              		.cfi_offset 7, -8
 5246              		.cfi_offset 14, -4
 5247 23d6 87B0     		sub	sp, sp, #28
 5248              	.LCFI140:
 5249              		.cfi_def_cfa_offset 40
 5250 23d8 02AF     		add	r7, sp, #8
 5251              	.LCFI141:
 5252              		.cfi_def_cfa 7, 32
 5253 23da 7860     		str	r0, [r7, #4]
2302:openstack/02a-MAClow/IEEE802154Ecsl.c ****    PORT_RADIOTIMER_WIDTH newPeriod;
2303:openstack/02a-MAClow/IEEE802154Ecsl.c ****    PORT_RADIOTIMER_WIDTH currentPeriod;
2304:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
2305:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // calculate new period
2306:openstack/02a-MAClow/IEEE802154Ecsl.c ****    currentPeriod                  =  radio_getTimerPeriod();
 5254              		.loc 1 2306 0
 5255 23dc FFF7FEFF 		bl	radio_getTimerPeriod
 5256 23e0 F860     		str	r0, [r7, #12]
2307:openstack/02a-MAClow/IEEE802154Ecsl.c ****    newPeriod                      =  (PORT_RADIOTIMER_WIDTH)((PORT_SIGNED_INT_WIDTH)currentPeriod-t
 5257              		.loc 1 2307 0
 5258 23e2 FA68     		ldr	r2, [r7, #12]
 5259 23e4 7B68     		ldr	r3, [r7, #4]
 5260 23e6 D31A     		subs	r3, r2, r3
 5261 23e8 BB60     		str	r3, [r7, #8]
2308:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2309:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // resynchronize by applying the new period
2310:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_setTimerPeriod(newPeriod);
 5262              		.loc 1 2310 0
 5263 23ea B868     		ldr	r0, [r7, #8]
 5264 23ec FFF7FEFF 		bl	radio_setTimerPeriod
2311:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
2312:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // reset the de-synchronization timeout
2313:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.deSyncTimeout    = DESYNCTIMEOUT;
 5265              		.loc 1 2313 0
 5266 23f0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5267 23f4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5268 23f8 40F61D12 		movw	r2, #2333
 5269 23fc DA60     		str	r2, [r3, #12]
2314:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
2315:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // indicate time correction to adaptive sync module
2316:openstack/02a-MAClow/IEEE802154Ecsl.c ****    adaptive_sync_indicateTimeCorrection((-timeCorrection),ieee154e_vars.ackReceived->l2_nextORprevi
 5270              		.loc 1 2316 0
 5271 23fe 7B68     		ldr	r3, [r7, #4]
 5272 2400 9BB2     		uxth	r3, r3
 5273 2402 C3F10003 		rsb	r3, r3, #0
 5274 2406 9BB2     		uxth	r3, r3
 5275 2408 99B2     		uxth	r1, r3
 5276 240a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5277 240e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5278 2412 1A6A     		ldr	r2, [r3, #32]
 5279 2414 0CB2     		sxth	r4, r1
 5280 2416 6B46     		mov	r3, sp
 5281 2418 02F14401 		add	r1, r2, #68
 5282 241c 03C9     		ldmia	r1, {r0, r1}
 5283 241e 1860     		str	r0, [r3, #0]
 5284 2420 03F10403 		add	r3, r3, #4
 5285 2424 1970     		strb	r1, [r3, #0]
 5286 2426 02F13803 		add	r3, r2, #56
 5287 242a 0ECB     		ldmia	r3, {r1, r2, r3}
 5288 242c 2046     		mov	r0, r4
 5289 242e FFF7FEFF 		bl	adaptive_sync_indicateTimeCorrection
2317:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
2318:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // log a large timeCorrection
2319:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (
2320:openstack/02a-MAClow/IEEE802154Ecsl.c ****          ieee154e_vars.isSync==TRUE &&
 5290              		.loc 1 2320 0
 5291 2432 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5292 2436 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5293 243a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
2319:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (
 5294              		.loc 1 2319 0
 5295 243c 002B     		cmp	r3, #0
 5296 243e 11D0     		beq	.L250
 5297              		.loc 1 2320 0
 5298 2440 7B68     		ldr	r3, [r7, #4]
 5299 2442 13F1050F 		cmn	r3, #5
 5300 2446 02DB     		blt	.L251
2321:openstack/02a-MAClow/IEEE802154Ecsl.c ****          (
2322:openstack/02a-MAClow/IEEE802154Ecsl.c ****             timeCorrection<-LIMITLARGETIMECORRECTION ||
 5301              		.loc 1 2322 0
 5302 2448 7B68     		ldr	r3, [r7, #4]
 5303 244a 052B     		cmp	r3, #5
 5304 244c 0ADD     		ble	.L250
 5305              	.L251:
2323:openstack/02a-MAClow/IEEE802154Ecsl.c ****             timeCorrection> LIMITLARGETIMECORRECTION
2324:openstack/02a-MAClow/IEEE802154Ecsl.c ****          )
2325:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ) {
2326:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openserial_printError(COMPONENT_IEEE802154E,ERR_LARGE_TIMECORRECTION,
 5306              		.loc 1 2326 0
 5307 244e 7B68     		ldr	r3, [r7, #4]
 5308 2450 9BB2     		uxth	r3, r3
 5309 2452 4FF00900 		mov	r0, #9
 5310 2456 4FF01C01 		mov	r1, #28
 5311 245a 1A46     		mov	r2, r3
 5312 245c 4FF00103 		mov	r3, #1
 5313 2460 FFF7FEFF 		bl	openserial_printError
 5314              	.L250:
2327:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             (errorparameter_t)timeCorrection,
2328:openstack/02a-MAClow/IEEE802154Ecsl.c ****                             (errorparameter_t)1);
2329:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2330:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // update the stats
2331:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_stats.numSyncAck++;
 5315              		.loc 1 2331 0
 5316 2464 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5317 2468 C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5318 246c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5319 246e 03F10103 		add	r3, r3, #1
 5320 2472 DAB2     		uxtb	r2, r3
 5321 2474 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5322 2478 C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5323 247c 5A70     		strb	r2, [r3, #1]
2332:openstack/02a-MAClow/IEEE802154Ecsl.c ****    updateStats(timeCorrection);
 5324              		.loc 1 2332 0
 5325 247e 7868     		ldr	r0, [r7, #4]
 5326 2480 FFF7FEFF 		bl	updateStats
2333:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
2334:openstack/02a-MAClow/IEEE802154Ecsl.c **** #ifdef OPENSIM
2335:openstack/02a-MAClow/IEEE802154Ecsl.c ****    debugpins_syncAck_set();
2336:openstack/02a-MAClow/IEEE802154Ecsl.c ****    debugpins_syncAck_clr();
2337:openstack/02a-MAClow/IEEE802154Ecsl.c **** #endif
2338:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5327              		.loc 1 2338 0
 5328 2484 07F11407 		add	r7, r7, #20
 5329 2488 BD46     		mov	sp, r7
 5330 248a 90BD     		pop	{r4, r7, pc}
 5331              		.cfi_endproc
 5332              	.LFE58:
 5334              		.align	2
 5335              		.global	changeIsSync
 5336              		.thumb
 5337              		.thumb_func
 5339              	changeIsSync:
 5340              	.LFB59:
2339:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2340:openstack/02a-MAClow/IEEE802154Ecsl.c **** void changeIsSync(bool newIsSync) {
 5341              		.loc 1 2340 0
 5342              		.cfi_startproc
 5343              		@ args = 0, pretend = 0, frame = 8
 5344              		@ frame_needed = 1, uses_anonymous_args = 0
 5345 248c 80B5     		push	{r7, lr}
 5346              	.LCFI142:
 5347              		.cfi_def_cfa_offset 8
 5348              		.cfi_offset 7, -8
 5349              		.cfi_offset 14, -4
 5350 248e 82B0     		sub	sp, sp, #8
 5351              	.LCFI143:
 5352              		.cfi_def_cfa_offset 16
 5353 2490 00AF     		add	r7, sp, #0
 5354              	.LCFI144:
 5355              		.cfi_def_cfa_register 7
 5356 2492 0346     		mov	r3, r0
 5357 2494 FB71     		strb	r3, [r7, #7]
2341:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.isSync = newIsSync;
 5358              		.loc 1 2341 0
 5359 2496 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5360 249a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5361 249e FA79     		ldrb	r2, [r7, #7]
 5362 24a0 1A74     		strb	r2, [r3, #16]
2342:openstack/02a-MAClow/IEEE802154Ecsl.c ****    
2343:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.isSync==TRUE) {
 5363              		.loc 1 2343 0
 5364 24a2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5365 24a6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5366 24aa 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 5367 24ac 002B     		cmp	r3, #0
 5368 24ae 04D0     		beq	.L253
2344:openstack/02a-MAClow/IEEE802154Ecsl.c ****       leds_sync_on();
 5369              		.loc 1 2344 0
 5370 24b0 FFF7FEFF 		bl	leds_sync_on
2345:openstack/02a-MAClow/IEEE802154Ecsl.c ****       resetStats();
 5371              		.loc 1 2345 0
 5372 24b4 FFF7FEFF 		bl	resetStats
 5373 24b8 03E0     		b	.L252
 5374              	.L253:
2346:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } else {
2347:openstack/02a-MAClow/IEEE802154Ecsl.c ****       leds_sync_off();
 5375              		.loc 1 2347 0
 5376 24ba FFF7FEFF 		bl	leds_sync_off
2348:openstack/02a-MAClow/IEEE802154Ecsl.c ****       schedule_resetBackoff();
 5377              		.loc 1 2348 0
 5378 24be FFF7FEFF 		bl	schedule_resetBackoff
 5379              	.L252:
2349:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2350:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5380              		.loc 1 2350 0
 5381 24c2 07F10807 		add	r7, r7, #8
 5382 24c6 BD46     		mov	sp, r7
 5383 24c8 80BD     		pop	{r7, pc}
 5384              		.cfi_endproc
 5385              	.LFE59:
 5387 24ca 00BF     		.align	2
 5388              		.global	notif_sendDone
 5389              		.thumb
 5390              		.thumb_func
 5392              	notif_sendDone:
 5393              	.LFB60:
2351:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2352:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2353:openstack/02a-MAClow/IEEE802154Ecsl.c **** //=====================  NOTIFY UPPER LAYER  ===========================
2354:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2355:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2356:openstack/02a-MAClow/IEEE802154Ecsl.c **** void notif_sendDone(OpenQueueEntry_t* packetSent, owerror_t error) {
 5394              		.loc 1 2356 0
 5395              		.cfi_startproc
 5396              		@ args = 0, pretend = 0, frame = 8
 5397              		@ frame_needed = 1, uses_anonymous_args = 0
 5398 24cc 80B5     		push	{r7, lr}
 5399              	.LCFI145:
 5400              		.cfi_def_cfa_offset 8
 5401              		.cfi_offset 7, -8
 5402              		.cfi_offset 14, -4
 5403 24ce 82B0     		sub	sp, sp, #8
 5404              	.LCFI146:
 5405              		.cfi_def_cfa_offset 16
 5406 24d0 00AF     		add	r7, sp, #0
 5407              	.LCFI147:
 5408              		.cfi_def_cfa_register 7
 5409 24d2 7860     		str	r0, [r7, #4]
 5410 24d4 0B46     		mov	r3, r1
 5411 24d6 FB70     		strb	r3, [r7, #3]
2357:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the outcome of the trasmission attempt
2358:openstack/02a-MAClow/IEEE802154Ecsl.c ****    packetSent->l2_sendDoneError   = error;
 5412              		.loc 1 2358 0
 5413 24d8 7B68     		ldr	r3, [r7, #4]
 5414 24da FA78     		ldrb	r2, [r7, #3]
 5415 24dc 83F83720 		strb	r2, [r3, #55]
2359:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the current ASN
2360:openstack/02a-MAClow/IEEE802154Ecsl.c ****    memcpy(&packetSent->l2_asn,&ieee154e_vars.asn,sizeof(asn_t));
 5416              		.loc 1 2360 0
 5417 24e0 7B68     		ldr	r3, [r7, #4]
 5418 24e2 03F14D02 		add	r2, r3, #77
 5419 24e6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5420 24ea C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5421 24ee 1868     		ldr	r0, [r3, #0]	@ unaligned
 5422 24f0 1060     		str	r0, [r2, #0]	@ unaligned
 5423 24f2 1B79     		ldrb	r3, [r3, #4]
 5424 24f4 1371     		strb	r3, [r2, #4]
2361:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // associate this packet with the virtual component
2362:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // COMPONENT_IEEE802154E_TO_RES so RES can knows it's for it
2363:openstack/02a-MAClow/IEEE802154Ecsl.c ****    packetSent->owner              = COMPONENT_IEEE802154E_TO_SIXTOP;
 5425              		.loc 1 2363 0
 5426 24f6 7B68     		ldr	r3, [r7, #4]
 5427 24f8 4FF00B02 		mov	r2, #11
 5428 24fc 5A70     		strb	r2, [r3, #1]
2364:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // post RES's sendDone task
2365:openstack/02a-MAClow/IEEE802154Ecsl.c ****    scheduler_push_task(task_sixtopNotifSendDone,TASKPRIO_SIXTOP_NOTIF_TXDONE);
 5429              		.loc 1 2365 0
 5430 24fe 40F20000 		movw	r0, #:lower16:task_sixtopNotifSendDone
 5431 2502 C0F20000 		movt	r0, #:upper16:task_sixtopNotifSendDone
 5432 2506 4FF00201 		mov	r1, #2
 5433 250a FFF7FEFF 		bl	scheduler_push_task
2366:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // wake up the scheduler
2367:openstack/02a-MAClow/IEEE802154Ecsl.c ****    SCHEDULER_WAKEUP();
2368:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5434              		.loc 1 2368 0
 5435 250e 07F10807 		add	r7, r7, #8
 5436 2512 BD46     		mov	sp, r7
 5437 2514 80BD     		pop	{r7, pc}
 5438              		.cfi_endproc
 5439              	.LFE60:
 5441 2516 00BF     		.align	2
 5442              		.global	notif_receive
 5443              		.thumb
 5444              		.thumb_func
 5446              	notif_receive:
 5447              	.LFB61:
2369:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2370:openstack/02a-MAClow/IEEE802154Ecsl.c **** // Modified notif_receive signature to add action for CSL testing purposes.
2371:openstack/02a-MAClow/IEEE802154Ecsl.c **** // Packet is removed on endOps in order to not fill all the slots on queue due
2372:openstack/02a-MAClow/IEEE802154Ecsl.c **** // to no sixtop action is defined for receive and process incoming packets.
2373:openstack/02a-MAClow/IEEE802154Ecsl.c **** // Then, we comment this actions here and add remove packet on endOps method.
2374:openstack/02a-MAClow/IEEE802154Ecsl.c **** void notif_receive(OpenQueueEntry_t* packetReceived, uint8_t action) {
 5448              		.loc 1 2374 0
 5449              		.cfi_startproc
 5450              		@ args = 0, pretend = 0, frame = 8
 5451              		@ frame_needed = 1, uses_anonymous_args = 0
 5452 2518 80B5     		push	{r7, lr}
 5453              	.LCFI148:
 5454              		.cfi_def_cfa_offset 8
 5455              		.cfi_offset 7, -8
 5456              		.cfi_offset 14, -4
 5457 251a 82B0     		sub	sp, sp, #8
 5458              	.LCFI149:
 5459              		.cfi_def_cfa_offset 16
 5460 251c 00AF     		add	r7, sp, #0
 5461              	.LCFI150:
 5462              		.cfi_def_cfa_register 7
 5463 251e 7860     		str	r0, [r7, #4]
 5464 2520 0B46     		mov	r3, r1
 5465 2522 FB70     		strb	r3, [r7, #3]
2375:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // record the current ASN
2376:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //memcpy(&packetReceived->l2_asn, &ieee154e_vars.asn, sizeof(asn_t));
2377:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2378:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // indicate reception to the schedule, to keep statistics
2379:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //schedule_indicateRx(&packetReceived->l2_asn);
2380:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2381:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // associate this packet with the virtual component
2382:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // COMPONENT_IEEE802154E_TO_SIXTOP so sixtop can knows it's for it
2383:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //packetReceived->owner          = COMPONENT_IEEE802154E_TO_SIXTOP;
2384:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2385:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // post RES's Receive task
2386:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //scheduler_push_task(task_sixtopNotifReceive,TASKPRIO_SIXTOP_NOTIF_RX);
2387:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2388:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // CSL Testing purposes
2389:openstack/02a-MAClow/IEEE802154Ecsl.c ****    switch(action) {
 5466              		.loc 1 2389 0
 5467 2524 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5468 2526 03F1FF33 		add	r3, r3, #-1
 5469 252a 032B     		cmp	r3, #3
 5470 252c 13D8     		bhi	.L257
 5471 252e 01A2     		adr	r2, .L261
 5472 2530 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5473              		.align	2
 5474              	.L261:
 5475 2534 45250000 		.word	.L258+1
 5476 2538 4B250000 		.word	.L259+1
 5477 253c 45250000 		.word	.L258+1
 5478 2540 51250000 		.word	.L260+1
 5479              	.L258:
2390:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // OK. verde toggle
2391:openstack/02a-MAClow/IEEE802154Ecsl.c ****    case 1:
2392:openstack/02a-MAClow/IEEE802154Ecsl.c ****    case 3: leds_radio_toggle(); break;
 5480              		.loc 1 2392 0
 5481 2544 FFF7FEFF 		bl	leds_radio_toggle
 5482 2548 07E0     		b	.L256
 5483              	.L259:
2393:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Error ACK. naranja toggle
2394:openstack/02a-MAClow/IEEE802154Ecsl.c ****    case 2: leds_sync_toggle();  break;
 5484              		.loc 1 2394 0
 5485 254a FFF7FEFF 		bl	leds_sync_toggle
 5486 254e 04E0     		b	.L256
 5487              	.L260:
2395:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // Error EndOps
2396:openstack/02a-MAClow/IEEE802154Ecsl.c ****    case 4: leds_error_toggle(); break;
 5488              		.loc 1 2396 0
 5489 2550 FFF7FEFF 		bl	leds_error_toggle
 5490 2554 01E0     		b	.L256
 5491              	.L257:
2397:openstack/02a-MAClow/IEEE802154Ecsl.c ****    default: leds_all_off();
 5492              		.loc 1 2397 0
 5493 2556 FFF7FEFF 		bl	leds_all_off
 5494              	.L256:
2398:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2399:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2400:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // wake up the scheduler
2401:openstack/02a-MAClow/IEEE802154Ecsl.c ****    SCHEDULER_WAKEUP();
2402:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5495              		.loc 1 2402 0
 5496 255a 07F10807 		add	r7, r7, #8
 5497 255e BD46     		mov	sp, r7
 5498 2560 80BD     		pop	{r7, pc}
 5499              		.cfi_endproc
 5500              	.LFE61:
 5502 2562 00BF     		.align	2
 5503              		.global	resetStats
 5504              		.thumb
 5505              		.thumb_func
 5507              	resetStats:
 5508              	.LFB62:
2403:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2404:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2405:openstack/02a-MAClow/IEEE802154Ecsl.c **** //============================== STATS =================================
2406:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2407:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2408:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void resetStats() {
 5509              		.loc 1 2408 0
 5510              		.cfi_startproc
 5511              		@ args = 0, pretend = 0, frame = 0
 5512              		@ frame_needed = 1, uses_anonymous_args = 0
 5513              		@ link register save eliminated.
 5514 2564 80B4     		push	{r7}
 5515              	.LCFI151:
 5516              		.cfi_def_cfa_offset 4
 5517              		.cfi_offset 7, -4
 5518 2566 00AF     		add	r7, sp, #0
 5519              	.LCFI152:
 5520              		.cfi_def_cfa_register 7
2409:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_stats.numSyncPkt      =    0;
 5521              		.loc 1 2409 0
 5522 2568 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5523 256c C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5524 2570 4FF00002 		mov	r2, #0
 5525 2574 1A70     		strb	r2, [r3, #0]
2410:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_stats.numSyncAck      =    0;
 5526              		.loc 1 2410 0
 5527 2576 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5528 257a C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5529 257e 4FF00002 		mov	r2, #0
 5530 2582 5A70     		strb	r2, [r3, #1]
2411:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_stats.minCorrection   =  127;
 5531              		.loc 1 2411 0
 5532 2584 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5533 2588 C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5534 258c 4FF07F02 		mov	r2, #127
 5535 2590 5A80     		strh	r2, [r3, #2]	@ movhi
2412:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_stats.maxCorrection   = -127;
 5536              		.loc 1 2412 0
 5537 2592 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5538 2596 C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5539 259a 4FF68172 		movw	r2, #65409
 5540 259e 9A80     		strh	r2, [r3, #4]	@ movhi
2413:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_stats.numTicsOn       =    0;
 5541              		.loc 1 2413 0
 5542 25a0 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5543 25a4 C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5544 25a8 4FF00002 		mov	r2, #0
 5545 25ac DA71     		strb	r2, [r3, #7]
 5546 25ae 9A68     		ldr	r2, [r3, #8]
 5547 25b0 02F07F42 		and	r2, r2, #-16777216
 5548 25b4 9A60     		str	r2, [r3, #8]
2414:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_stats.numTicsTotal    =    0;
 5549              		.loc 1 2414 0
 5550 25b6 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5551 25ba C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5552 25be 4FF00002 		mov	r2, #0
 5553 25c2 DA72     		strb	r2, [r3, #11]
 5554 25c4 DA68     		ldr	r2, [r3, #12]
 5555 25c6 02F07F42 		and	r2, r2, #-16777216
 5556 25ca DA60     		str	r2, [r3, #12]
2415:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // do not reset the number of de-synchronizations
2416:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5557              		.loc 1 2416 0
 5558 25cc BD46     		mov	sp, r7
 5559 25ce 80BC     		pop	{r7}
 5560 25d0 7047     		bx	lr
 5561              		.cfi_endproc
 5562              	.LFE62:
 5564 25d2 00BF     		.align	2
 5565              		.global	updateStats
 5566              		.thumb
 5567              		.thumb_func
 5569              	updateStats:
 5570              	.LFB63:
2417:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2418:openstack/02a-MAClow/IEEE802154Ecsl.c **** void updateStats(PORT_SIGNED_INT_WIDTH timeCorrection) {
 5571              		.loc 1 2418 0
 5572              		.cfi_startproc
 5573              		@ args = 0, pretend = 0, frame = 8
 5574              		@ frame_needed = 1, uses_anonymous_args = 0
 5575              		@ link register save eliminated.
 5576 25d4 80B4     		push	{r7}
 5577              	.LCFI153:
 5578              		.cfi_def_cfa_offset 4
 5579              		.cfi_offset 7, -4
 5580 25d6 83B0     		sub	sp, sp, #12
 5581              	.LCFI154:
 5582              		.cfi_def_cfa_offset 16
 5583 25d8 00AF     		add	r7, sp, #0
 5584              	.LCFI155:
 5585              		.cfi_def_cfa_register 7
 5586 25da 7860     		str	r0, [r7, #4]
2419:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // update minCorrection
2420:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (timeCorrection<ieee154e_stats.minCorrection) {
 5587              		.loc 1 2420 0
 5588 25dc 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5589 25e0 C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5590 25e4 5B88     		ldrh	r3, [r3, #2]
 5591 25e6 1AB2     		sxth	r2, r3
 5592 25e8 7B68     		ldr	r3, [r7, #4]
 5593 25ea 9A42     		cmp	r2, r3
 5594 25ec 06DD     		ble	.L265
2421:openstack/02a-MAClow/IEEE802154Ecsl.c ****      ieee154e_stats.minCorrection = timeCorrection;
 5595              		.loc 1 2421 0
 5596 25ee 7B68     		ldr	r3, [r7, #4]
 5597 25f0 9AB2     		uxth	r2, r3
 5598 25f2 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5599 25f6 C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5600 25fa 5A80     		strh	r2, [r3, #2]	@ movhi
 5601              	.L265:
2422:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2423:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // update maxConnection
2424:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if(timeCorrection>ieee154e_stats.maxCorrection) {
 5602              		.loc 1 2424 0
 5603 25fc 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5604 2600 C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5605 2604 9B88     		ldrh	r3, [r3, #4]
 5606 2606 1AB2     		sxth	r2, r3
 5607 2608 7B68     		ldr	r3, [r7, #4]
 5608 260a 9A42     		cmp	r2, r3
 5609 260c 06DA     		bge	.L264
2425:openstack/02a-MAClow/IEEE802154Ecsl.c ****      ieee154e_stats.maxCorrection = timeCorrection;
 5610              		.loc 1 2425 0
 5611 260e 7B68     		ldr	r3, [r7, #4]
 5612 2610 9AB2     		uxth	r2, r3
 5613 2612 40F20003 		movw	r3, #:lower16:ieee154e_stats
 5614 2616 C0F20003 		movt	r3, #:upper16:ieee154e_stats
 5615 261a 9A80     		strh	r2, [r3, #4]	@ movhi
 5616              	.L264:
2426:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2427:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5617              		.loc 1 2427 0
 5618 261c 07F10C07 		add	r7, r7, #12
 5619 2620 BD46     		mov	sp, r7
 5620 2622 80BC     		pop	{r7}
 5621 2624 7047     		bx	lr
 5622              		.cfi_endproc
 5623              	.LFE63:
 5625 2626 00BF     		.align	2
 5626              		.global	changeState
 5627              		.thumb
 5628              		.thumb_func
 5630              	changeState:
 5631              	.LFB64:
2428:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2429:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2430:openstack/02a-MAClow/IEEE802154Ecsl.c **** //============================== MISC ==================================
2431:openstack/02a-MAClow/IEEE802154Ecsl.c **** //======================================================================
2432:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2433:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
2434:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Changes the state of the IEEE802.15.4e FSM.
2435:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2436:openstack/02a-MAClow/IEEE802154Ecsl.c **** Besides simply updating the state global variable,
2437:openstack/02a-MAClow/IEEE802154Ecsl.c **** this function toggles the FSM debug pin.
2438:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2439:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[in] newstate The state the IEEE802.15.4e FSM is now in.
2440:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
2441:openstack/02a-MAClow/IEEE802154Ecsl.c **** void changeState(ieee154e_state_t newstate) {
 5632              		.loc 1 2441 0
 5633              		.cfi_startproc
 5634              		@ args = 0, pretend = 0, frame = 8
 5635              		@ frame_needed = 1, uses_anonymous_args = 0
 5636 2628 80B5     		push	{r7, lr}
 5637              	.LCFI156:
 5638              		.cfi_def_cfa_offset 8
 5639              		.cfi_offset 7, -8
 5640              		.cfi_offset 14, -4
 5641 262a 82B0     		sub	sp, sp, #8
 5642              	.LCFI157:
 5643              		.cfi_def_cfa_offset 16
 5644 262c 00AF     		add	r7, sp, #0
 5645              	.LCFI158:
 5646              		.cfi_def_cfa_register 7
 5647 262e 0346     		mov	r3, r0
 5648 2630 FB71     		strb	r3, [r7, #7]
2442:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // update the state
2443:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.state = newstate;
 5649              		.loc 1 2443 0
 5650 2632 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5651 2636 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5652 263a FA79     		ldrb	r2, [r7, #7]
 5653 263c 5A74     		strb	r2, [r3, #17]
2444:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // wiggle the FSM debug pin
2445:openstack/02a-MAClow/IEEE802154Ecsl.c ****    switch (ieee154e_vars.state) {
 5654              		.loc 1 2445 0
 5655 263e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5656 2642 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5657 2646 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 5658 2648 3A2B     		cmp	r3, #58
 5659 264a 00F28280 		bhi	.L267
 5660 264e 01A2     		adr	r2, .L272
 5661 2650 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5662              		.align	2
 5663              	.L272:
 5664 2654 47270000 		.word	.L269+1
 5665 2658 53270000 		.word	.L267+1
 5666 265c 53270000 		.word	.L267+1
 5667 2660 53270000 		.word	.L267+1
 5668 2664 53270000 		.word	.L267+1
 5669 2668 53270000 		.word	.L267+1
 5670 266c 53270000 		.word	.L267+1
 5671 2670 53270000 		.word	.L267+1
 5672 2674 53270000 		.word	.L267+1
 5673 2678 53270000 		.word	.L267+1
 5674 267c 53270000 		.word	.L267+1
 5675 2680 53270000 		.word	.L267+1
 5676 2684 53270000 		.word	.L267+1
 5677 2688 53270000 		.word	.L267+1
 5678 268c 53270000 		.word	.L267+1
 5679 2690 53270000 		.word	.L267+1
 5680 2694 53270000 		.word	.L267+1
 5681 2698 53270000 		.word	.L267+1
 5682 269c 53270000 		.word	.L267+1
 5683 26a0 53270000 		.word	.L267+1
 5684 26a4 53270000 		.word	.L267+1
 5685 26a8 53270000 		.word	.L267+1
 5686 26ac 53270000 		.word	.L267+1
 5687 26b0 53270000 		.word	.L267+1
 5688 26b4 53270000 		.word	.L267+1
 5689 26b8 53270000 		.word	.L267+1
 5690 26bc 41270000 		.word	.L270+1
 5691 26c0 4D270000 		.word	.L271+1
 5692 26c4 4D270000 		.word	.L271+1
 5693 26c8 4D270000 		.word	.L271+1
 5694 26cc 4D270000 		.word	.L271+1
 5695 26d0 41270000 		.word	.L270+1
 5696 26d4 4D270000 		.word	.L271+1
 5697 26d8 4D270000 		.word	.L271+1
 5698 26dc 4D270000 		.word	.L271+1
 5699 26e0 4D270000 		.word	.L271+1
 5700 26e4 4D270000 		.word	.L271+1
 5701 26e8 4D270000 		.word	.L271+1
 5702 26ec 4D270000 		.word	.L271+1
 5703 26f0 4D270000 		.word	.L271+1
 5704 26f4 4D270000 		.word	.L271+1
 5705 26f8 4D270000 		.word	.L271+1
 5706 26fc 47270000 		.word	.L269+1
 5707 2700 4D270000 		.word	.L271+1
 5708 2704 4D270000 		.word	.L271+1
 5709 2708 4D270000 		.word	.L271+1
 5710 270c 4D270000 		.word	.L271+1
 5711 2710 4D270000 		.word	.L271+1
 5712 2714 47270000 		.word	.L269+1
 5713 2718 4D270000 		.word	.L271+1
 5714 271c 4D270000 		.word	.L271+1
 5715 2720 4D270000 		.word	.L271+1
 5716 2724 4D270000 		.word	.L271+1
 5717 2728 4D270000 		.word	.L271+1
 5718 272c 4D270000 		.word	.L271+1
 5719 2730 4D270000 		.word	.L271+1
 5720 2734 4D270000 		.word	.L271+1
 5721 2738 4D270000 		.word	.L271+1
 5722 273c 4D270000 		.word	.L271+1
 5723              	.L270:
2446:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXWAKEUPOFFSET:
2447:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXDATAOFFSET:
2448:openstack/02a-MAClow/IEEE802154Ecsl.c ****          debugpins_fsm_set();
 5724              		.loc 1 2448 0
 5725 2740 FFF7FEFF 		bl	debugpins_fsm_set
2449:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 5726              		.loc 1 2449 0
 5727 2744 05E0     		b	.L267
 5728              	.L269:
2450:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_SLEEP:
2451:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXDATAOFFSET:
2452:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXWAKEUPOFFSET:
2453:openstack/02a-MAClow/IEEE802154Ecsl.c ****          debugpins_fsm_clr();
 5729              		.loc 1 2453 0
 5730 2746 FFF7FEFF 		bl	debugpins_fsm_clr
2454:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 5731              		.loc 1 2454 0
 5732 274a 02E0     		b	.L267
 5733              	.L271:
2455:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2456:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // ------- TX STATES -------
2457:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2458:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // Estados usados para la transmisión de tramas WAKE-UP previas a la trama de datos (Wake-Up
2459:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXWAKEUPPREPARE:
2460:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXWAKEUPREADY:
2461:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXWAKEUPDELAY:
2462:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXWAKEUP:
2463:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2464:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // Estados usados para la transmisión del paquete de datos y la recepción del ACK.
2465:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXDATAPREPARE:
2466:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXDATAREADY:
2467:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXDATADELAY:
2468:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXDATA:
2469:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2470:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXACKOFFSET:
2471:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXACKPREPARE:
2472:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXACKREADY:
2473:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXACKLISTEN:
2474:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXACK:
2475:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXPROC:
2476:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2477:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // ------- RX STATES -------
2478:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2479:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // Estados usados para la recepción y tratamiento de la trama de WAKE-UP.
2480:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXWAKEUPPREPARE:
2481:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXWAKEUPREADY:
2482:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXWAKEUPLISTEN:
2483:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXWAKEUP:
2484:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXWAKEUPVALIDATE:
2485:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2486:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // Estados usados para la recepción del paquete de datos y la transmisión del ACK.
2487:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXDATAPREPARE:
2488:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXDATAREADY:
2489:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXDATALISTEN:
2490:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXDATA:
2491:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2492:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXACKOFFSET:
2493:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXACKPREPARE:
2494:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXACKREADY:
2495:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXACKDELAY:
2496:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLTXACK:
2497:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case S_CSLRXPROC:
2498:openstack/02a-MAClow/IEEE802154Ecsl.c ****          debugpins_fsm_toggle();
 5734              		.loc 1 2498 0
 5735 274c FFF7FEFF 		bl	debugpins_fsm_toggle
2499:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 5736              		.loc 1 2499 0
 5737 2750 00BF     		nop
 5738              	.L267:
2500:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2501:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5739              		.loc 1 2501 0
 5740 2752 07F10807 		add	r7, r7, #8
 5741 2756 BD46     		mov	sp, r7
 5742 2758 80BD     		pop	{r7, pc}
 5743              		.cfi_endproc
 5744              	.LFE64:
 5746 275a 00BF     		.align	2
 5747              		.global	debugPrint_asn
 5748              		.thumb
 5749              		.thumb_func
 5751              	debugPrint_asn:
 5752              	.LFB65:
2502:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2503:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
2504:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Trigger this module to print status information, over serial.
2505:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2506:openstack/02a-MAClow/IEEE802154Ecsl.c **** debugPrint_* functions are used by the openserial module to continuously print
2507:openstack/02a-MAClow/IEEE802154Ecsl.c **** status information about several modules in the OpenWSN stack.
2508:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2509:openstack/02a-MAClow/IEEE802154Ecsl.c **** \returns TRUE if this function printed something, FALSE otherwise.
2510:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
2511:openstack/02a-MAClow/IEEE802154Ecsl.c **** bool debugPrint_asn() {
 5753              		.loc 1 2511 0
 5754              		.cfi_startproc
 5755              		@ args = 0, pretend = 0, frame = 8
 5756              		@ frame_needed = 1, uses_anonymous_args = 0
 5757 275c 80B5     		push	{r7, lr}
 5758              	.LCFI159:
 5759              		.cfi_def_cfa_offset 8
 5760              		.cfi_offset 7, -8
 5761              		.cfi_offset 14, -4
 5762 275e 82B0     		sub	sp, sp, #8
 5763              	.LCFI160:
 5764              		.cfi_def_cfa_offset 16
 5765 2760 00AF     		add	r7, sp, #0
 5766              	.LCFI161:
 5767              		.cfi_def_cfa_register 7
2512:openstack/02a-MAClow/IEEE802154Ecsl.c ****    asn_t output;
2513:openstack/02a-MAClow/IEEE802154Ecsl.c ****    output.byte4         =  ieee154e_vars.asn.byte4;
 5768              		.loc 1 2513 0
 5769 2762 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5770 2766 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5771 276a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5772 276c 3B70     		strb	r3, [r7, #0]
2514:openstack/02a-MAClow/IEEE802154Ecsl.c ****    output.bytes2and3    =  ieee154e_vars.asn.bytes2and3;
 5773              		.loc 1 2514 0
 5774 276e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5775 2772 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5776 2776 B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 5777 277a 9BB2     		uxth	r3, r3
 5778 277c A7F80130 		strh	r3, [r7, #1]	@ unaligned
2515:openstack/02a-MAClow/IEEE802154Ecsl.c ****    output.bytes0and1    =  ieee154e_vars.asn.bytes0and1;
 5779              		.loc 1 2515 0
 5780 2780 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5781 2784 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5782 2788 B3F80330 		ldrh	r3, [r3, #3]	@ unaligned
 5783 278c 9BB2     		uxth	r3, r3
 5784 278e A7F80330 		strh	r3, [r7, #3]	@ unaligned
2516:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printStatus(STATUS_ASN,(uint8_t*)&output,sizeof(output));
 5785              		.loc 1 2516 0
 5786 2792 3B46     		mov	r3, r7
 5787 2794 4FF00400 		mov	r0, #4
 5788 2798 1946     		mov	r1, r3
 5789 279a 4FF00502 		mov	r2, #5
 5790 279e FFF7FEFF 		bl	openserial_printStatus
2517:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return TRUE;
 5791              		.loc 1 2517 0
 5792 27a2 4FF00103 		mov	r3, #1
2518:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5793              		.loc 1 2518 0
 5794 27a6 1846     		mov	r0, r3
 5795 27a8 07F10807 		add	r7, r7, #8
 5796 27ac BD46     		mov	sp, r7
 5797 27ae 80BD     		pop	{r7, pc}
 5798              		.cfi_endproc
 5799              	.LFE65:
 5801              		.align	2
 5802              		.global	debugPrint_isSync
 5803              		.thumb
 5804              		.thumb_func
 5806              	debugPrint_isSync:
 5807              	.LFB66:
2519:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2520:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
2521:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Trigger this module to print status information, over serial.
2522:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2523:openstack/02a-MAClow/IEEE802154Ecsl.c **** debugPrint_* functions are used by the openserial module to continuously print
2524:openstack/02a-MAClow/IEEE802154Ecsl.c **** status information about several modules in the OpenWSN stack.
2525:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2526:openstack/02a-MAClow/IEEE802154Ecsl.c **** \returns TRUE if this function printed something, FALSE otherwise.
2527:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
2528:openstack/02a-MAClow/IEEE802154Ecsl.c **** bool debugPrint_isSync() {
 5808              		.loc 1 2528 0
 5809              		.cfi_startproc
 5810              		@ args = 0, pretend = 0, frame = 8
 5811              		@ frame_needed = 1, uses_anonymous_args = 0
 5812 27b0 80B5     		push	{r7, lr}
 5813              	.LCFI162:
 5814              		.cfi_def_cfa_offset 8
 5815              		.cfi_offset 7, -8
 5816              		.cfi_offset 14, -4
 5817 27b2 82B0     		sub	sp, sp, #8
 5818              	.LCFI163:
 5819              		.cfi_def_cfa_offset 16
 5820 27b4 00AF     		add	r7, sp, #0
 5821              	.LCFI164:
 5822              		.cfi_def_cfa_register 7
2529:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint8_t output=0;
 5823              		.loc 1 2529 0
 5824 27b6 4FF00003 		mov	r3, #0
 5825 27ba FB71     		strb	r3, [r7, #7]
2530:openstack/02a-MAClow/IEEE802154Ecsl.c ****    output = ieee154e_vars.isSync;
 5826              		.loc 1 2530 0
 5827 27bc 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5828 27c0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5829 27c4 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 5830 27c6 FB71     		strb	r3, [r7, #7]
2531:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printStatus(STATUS_ISSYNC,(uint8_t*)&output,sizeof(uint8_t));
 5831              		.loc 1 2531 0
 5832 27c8 07F10703 		add	r3, r7, #7
 5833 27cc 4FF00000 		mov	r0, #0
 5834 27d0 1946     		mov	r1, r3
 5835 27d2 4FF00102 		mov	r2, #1
 5836 27d6 FFF7FEFF 		bl	openserial_printStatus
2532:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return TRUE;
 5837              		.loc 1 2532 0
 5838 27da 4FF00103 		mov	r3, #1
2533:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5839              		.loc 1 2533 0
 5840 27de 1846     		mov	r0, r3
 5841 27e0 07F10807 		add	r7, r7, #8
 5842 27e4 BD46     		mov	sp, r7
 5843 27e6 80BD     		pop	{r7, pc}
 5844              		.cfi_endproc
 5845              	.LFE66:
 5847              		.align	2
 5848              		.global	debugPrint_macStats
 5849              		.thumb
 5850              		.thumb_func
 5852              	debugPrint_macStats:
 5853              	.LFB67:
2534:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2535:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
2536:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Trigger this module to print status information, over serial.
2537:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2538:openstack/02a-MAClow/IEEE802154Ecsl.c **** debugPrint_* functions are used by the openserial module to continuously print
2539:openstack/02a-MAClow/IEEE802154Ecsl.c **** status information about several modules in the OpenWSN stack.
2540:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2541:openstack/02a-MAClow/IEEE802154Ecsl.c **** \returns TRUE if this function printed something, FALSE otherwise.
2542:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
2543:openstack/02a-MAClow/IEEE802154Ecsl.c **** bool debugPrint_macStats() {
 5854              		.loc 1 2543 0
 5855              		.cfi_startproc
 5856              		@ args = 0, pretend = 0, frame = 0
 5857              		@ frame_needed = 1, uses_anonymous_args = 0
 5858 27e8 80B5     		push	{r7, lr}
 5859              	.LCFI165:
 5860              		.cfi_def_cfa_offset 8
 5861              		.cfi_offset 7, -8
 5862              		.cfi_offset 14, -4
 5863 27ea 00AF     		add	r7, sp, #0
 5864              	.LCFI166:
 5865              		.cfi_def_cfa_register 7
2544:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // send current stats over serial
2545:openstack/02a-MAClow/IEEE802154Ecsl.c ****    openserial_printStatus(STATUS_MACSTATS,(uint8_t*)&ieee154e_stats,sizeof(ieee154e_stats_t));
 5866              		.loc 1 2545 0
 5867 27ec 4FF00500 		mov	r0, #5
 5868 27f0 40F20001 		movw	r1, #:lower16:ieee154e_stats
 5869 27f4 C0F20001 		movt	r1, #:upper16:ieee154e_stats
 5870 27f8 4FF00F02 		mov	r2, #15
 5871 27fc FFF7FEFF 		bl	openserial_printStatus
2546:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return TRUE;
 5872              		.loc 1 2546 0
 5873 2800 4FF00103 		mov	r3, #1
2547:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 5874              		.loc 1 2547 0
 5875 2804 1846     		mov	r0, r3
 5876 2806 80BD     		pop	{r7, pc}
 5877              		.cfi_endproc
 5878              	.LFE67:
 5880              		.align	2
 5881              		.global	endOps
 5882              		.thumb
 5883              		.thumb_func
 5885              	endOps:
 5886              	.LFB68:
2548:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2549:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2550:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
2551:openstack/02a-MAClow/IEEE802154Ecsl.c **** \brief Housekeeping tasks to do at the end of each slot.
2552:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2553:openstack/02a-MAClow/IEEE802154Ecsl.c **** This functions is called once in each slot, when there is nothing more
2554:openstack/02a-MAClow/IEEE802154Ecsl.c **** to do. This might be when an error occured, or when everything went well.
2555:openstack/02a-MAClow/IEEE802154Ecsl.c **** This function resets the state of the FSM so it is ready for the next slot.
2556:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2557:openstack/02a-MAClow/IEEE802154Ecsl.c **** Note that by the time this function is called, any received packet should already
2558:openstack/02a-MAClow/IEEE802154Ecsl.c **** have been sent to the upper layer. Similarly, in a Tx slot, the sendDone
2559:openstack/02a-MAClow/IEEE802154Ecsl.c **** function should already have been done. If this is not the case, this function
2560:openstack/02a-MAClow/IEEE802154Ecsl.c **** will do that for you, but assume that something went wrong.
2561:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
2562:openstack/02a-MAClow/IEEE802154Ecsl.c **** void endOps() {
 5887              		.loc 1 2562 0
 5888              		.cfi_startproc
 5889              		@ args = 0, pretend = 0, frame = 0
 5890              		@ frame_needed = 1, uses_anonymous_args = 0
 5891 2808 80B5     		push	{r7, lr}
 5892              	.LCFI167:
 5893              		.cfi_def_cfa_offset 8
 5894              		.cfi_offset 7, -8
 5895              		.cfi_offset 14, -4
 5896 280a 00AF     		add	r7, sp, #0
 5897              	.LCFI168:
 5898              		.cfi_def_cfa_register 7
2563:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2564:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // turn off the radio
2565:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radio_rfOff();
 5899              		.loc 1 2565 0
 5900 280c FFF7FEFF 		bl	radio_rfOff
2566:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2567:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clear any pending timer
2568:openstack/02a-MAClow/IEEE802154Ecsl.c ****    radiotimer_cancel();
 5901              		.loc 1 2568 0
 5902 2810 FFF7FEFF 		bl	radiotimer_cancel
2569:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2570:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // reset capturedTimes
2571:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.lastCapturedTime = 0;
 5903              		.loc 1 2571 0
 5904 2814 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5905 2818 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5906 281c 4FF00002 		mov	r2, #0
 5907 2820 5A62     		str	r2, [r3, #36]
2572:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.syncCapturedTime = 0;
 5908              		.loc 1 2572 0
 5909 2822 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5910 2826 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5911 282a 4FF00002 		mov	r2, #0
 5912 282e 9A62     		str	r2, [r3, #40]
2573:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2574:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //clear vars for duty cycle on this slot
2575:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnTics=0;
 5913              		.loc 1 2575 0
 5914 2830 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5915 2834 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5916 2838 4FF00002 		mov	r2, #0
 5917 283c 5A63     		str	r2, [r3, #52]
2576:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.radioOnThisSlot=FALSE;
 5918              		.loc 1 2576 0
 5919 283e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5920 2842 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5921 2846 4FF00002 		mov	r2, #0
 5922 284a 83F83820 		strb	r2, [r3, #56]
2577:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2578:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clean up dataToSend
2579:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.dataToSend!=NULL) {
 5923              		.loc 1 2579 0
 5924 284e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5925 2852 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5926 2856 5B69     		ldr	r3, [r3, #20]
 5927 2858 002B     		cmp	r3, #0
 5928 285a 33D0     		beq	.L280
2580:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // if everything went well, dataToSend was set to NULL in ti9
2581:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // getting here means transmit failed
2582:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2583:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // indicate Tx fail to schedule to update stats
2584:openstack/02a-MAClow/IEEE802154Ecsl.c ****       schedule_indicateTx(&ieee154e_vars.asn,FALSE);
 5929              		.loc 1 2584 0
 5930 285c 40F20000 		movw	r0, #:lower16:ieee154e_vars
 5931 2860 C0F20000 		movt	r0, #:upper16:ieee154e_vars
 5932 2864 4FF00001 		mov	r1, #0
 5933 2868 FFF7FEFF 		bl	schedule_indicateTx
2585:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2586:openstack/02a-MAClow/IEEE802154Ecsl.c ****       //decrement transmits left counter
2587:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.dataToSend->l2_retriesLeft--;
 5934              		.loc 1 2587 0
 5935 286c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5936 2870 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5937 2874 5B69     		ldr	r3, [r3, #20]
 5938 2876 93F84B20 		ldrb	r2, [r3, #75]	@ zero_extendqisi2
 5939 287a 02F1FF32 		add	r2, r2, #-1
 5940 287e D2B2     		uxtb	r2, r2
 5941 2880 83F84B20 		strb	r2, [r3, #75]
2588:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2589:openstack/02a-MAClow/IEEE802154Ecsl.c ****       if (ieee154e_vars.dataToSend->l2_retriesLeft==0) {
 5942              		.loc 1 2589 0
 5943 2884 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5944 2888 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5945 288c 5B69     		ldr	r3, [r3, #20]
 5946 288e 93F84B30 		ldrb	r3, [r3, #75]	@ zero_extendqisi2
 5947 2892 002B     		cmp	r3, #0
 5948 2894 07D0     		beq	.L281
2590:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	 // CSL TEST CODE (comment)
2591:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // indicate tx fail if no more retries left
2592:openstack/02a-MAClow/IEEE802154Ecsl.c ****          //notif_sendDone(ieee154e_vars.dataToSend,E_FAIL);
2593:openstack/02a-MAClow/IEEE802154Ecsl.c ****     	 // END TEST CODE
2594:openstack/02a-MAClow/IEEE802154Ecsl.c ****       } else {
2595:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // return packet to the virtual COMPONENT_SIXTOP_TO_IEEE802154E component
2596:openstack/02a-MAClow/IEEE802154Ecsl.c ****          ieee154e_vars.dataToSend->owner = COMPONENT_SIXTOP_TO_IEEE802154E;
 5949              		.loc 1 2596 0
 5950 2896 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5951 289a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5952 289e 5B69     		ldr	r3, [r3, #20]
 5953 28a0 4FF00A02 		mov	r2, #10
 5954 28a4 5A70     		strb	r2, [r3, #1]
 5955              	.L281:
2597:openstack/02a-MAClow/IEEE802154Ecsl.c ****       }
2598:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2599:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // CSL - Remove packet for testing because no high entity for packet processing.
2600:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openqueue_freePacketBuffer(ieee154e_vars.dataToSend);
 5956              		.loc 1 2600 0
 5957 28a6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5958 28aa C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5959 28ae 5B69     		ldr	r3, [r3, #20]
 5960 28b0 1846     		mov	r0, r3
 5961 28b2 FFF7FEFF 		bl	openqueue_freePacketBuffer
2601:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2602:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // reset local variable
2603:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.dataToSend = NULL;
 5962              		.loc 1 2603 0
 5963 28b6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5964 28ba C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5965 28be 4FF00002 		mov	r2, #0
 5966 28c2 5A61     		str	r2, [r3, #20]
 5967              	.L280:
2604:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2605:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2606:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clean up dataReceived
2607:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.dataReceived!=NULL) {
 5968              		.loc 1 2607 0
 5969 28c4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5970 28c8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5971 28cc 9B69     		ldr	r3, [r3, #24]
 5972 28ce 002B     		cmp	r3, #0
 5973 28d0 18D0     		beq	.L282
2608:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // assume something went wrong. If everything went well, dataReceived
2609:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // would have been set to NULL in ri9.
2610:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // indicate  "received packet" to upper layer since we don't want to loose packets
2611:openstack/02a-MAClow/IEEE802154Ecsl.c ****       notif_receive(ieee154e_vars.dataReceived,4);
 5974              		.loc 1 2611 0
 5975 28d2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5976 28d6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5977 28da 9B69     		ldr	r3, [r3, #24]
 5978 28dc 1846     		mov	r0, r3
 5979 28de 4FF00401 		mov	r1, #4
 5980 28e2 FFF7FEFF 		bl	notif_receive
2612:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2613:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // CSL - Remove packet for testing because no high entity for packet processing.
2614:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openqueue_freePacketBuffer(ieee154e_vars.dataReceived);
 5981              		.loc 1 2614 0
 5982 28e6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5983 28ea C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5984 28ee 9B69     		ldr	r3, [r3, #24]
 5985 28f0 1846     		mov	r0, r3
 5986 28f2 FFF7FEFF 		bl	openqueue_freePacketBuffer
2615:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2616:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // reset local variable
2617:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.dataReceived = NULL;
 5987              		.loc 1 2617 0
 5988 28f6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5989 28fa C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5990 28fe 4FF00002 		mov	r2, #0
 5991 2902 9A61     		str	r2, [r3, #24]
 5992              	.L282:
2618:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2619:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2620:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clean up ackToSend
2621:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.ackToSend!=NULL) {
 5993              		.loc 1 2621 0
 5994 2904 40F20003 		movw	r3, #:lower16:ieee154e_vars
 5995 2908 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 5996 290c DB69     		ldr	r3, [r3, #28]
 5997 290e 002B     		cmp	r3, #0
 5998 2910 0ED0     		beq	.L283
2622:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // free ackToSend so corresponding RAM memory can be recycled
2623:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openqueue_freePacketBuffer(ieee154e_vars.ackToSend);
 5999              		.loc 1 2623 0
 6000 2912 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6001 2916 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6002 291a DB69     		ldr	r3, [r3, #28]
 6003 291c 1846     		mov	r0, r3
 6004 291e FFF7FEFF 		bl	openqueue_freePacketBuffer
2624:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // reset local variable
2625:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.ackToSend = NULL;
 6005              		.loc 1 2625 0
 6006 2922 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6007 2926 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6008 292a 4FF00002 		mov	r2, #0
 6009 292e DA61     		str	r2, [r3, #28]
 6010              	.L283:
2626:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2627:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2628:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clean up ackReceived
2629:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.ackReceived!=NULL) {
 6011              		.loc 1 2629 0
 6012 2930 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6013 2934 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6014 2938 1B6A     		ldr	r3, [r3, #32]
 6015 293a 002B     		cmp	r3, #0
 6016 293c 0ED0     		beq	.L284
2630:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // free ackReceived so corresponding RAM memory can be recycled
2631:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openqueue_freePacketBuffer(ieee154e_vars.ackReceived);
 6017              		.loc 1 2631 0
 6018 293e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6019 2942 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6020 2946 1B6A     		ldr	r3, [r3, #32]
 6021 2948 1846     		mov	r0, r3
 6022 294a FFF7FEFF 		bl	openqueue_freePacketBuffer
2632:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // reset local variable
2633:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.ackReceived = NULL;
 6023              		.loc 1 2633 0
 6024 294e 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6025 2952 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6026 2956 4FF00002 		mov	r2, #0
 6027 295a 1A62     		str	r2, [r3, #32]
 6028              	.L284:
2634:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2635:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2636:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clean up wakeupSend
2637:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.wakeupToSend!=NULL) {
 6029              		.loc 1 2637 0
 6030 295c 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6031 2960 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6032 2964 DB6B     		ldr	r3, [r3, #60]
 6033 2966 002B     		cmp	r3, #0
 6034 2968 0ED0     		beq	.L285
2638:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // free wakeupToSend so corresponding RAM memory can be recycled
2639:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openqueue_freePacketBuffer(ieee154e_vars.wakeupToSend);
 6035              		.loc 1 2639 0
 6036 296a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6037 296e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6038 2972 DB6B     		ldr	r3, [r3, #60]
 6039 2974 1846     		mov	r0, r3
 6040 2976 FFF7FEFF 		bl	openqueue_freePacketBuffer
2640:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // reset local variable
2641:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.wakeupToSend = NULL;
 6041              		.loc 1 2641 0
 6042 297a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6043 297e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6044 2982 4FF00002 		mov	r2, #0
 6045 2986 DA63     		str	r2, [r3, #60]
 6046              	.L285:
2642:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2643:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2644:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // clean up wakeupReceived
2645:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.wakeupReceived !=NULL) {
 6047              		.loc 1 2645 0
 6048 2988 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6049 298c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6050 2990 1B6C     		ldr	r3, [r3, #64]
 6051 2992 002B     		cmp	r3, #0
 6052 2994 0ED0     		beq	.L286
2646:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // free wakeupReceived so corresponding RAM memory can be recycled
2647:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openqueue_freePacketBuffer(ieee154e_vars.wakeupReceived);
 6053              		.loc 1 2647 0
 6054 2996 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6055 299a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6056 299e 1B6C     		ldr	r3, [r3, #64]
 6057 29a0 1846     		mov	r0, r3
 6058 29a2 FFF7FEFF 		bl	openqueue_freePacketBuffer
2648:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // reset local variable
2649:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ieee154e_vars.wakeupReceived = NULL;
 6059              		.loc 1 2649 0
 6060 29a6 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6061 29aa C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6062 29ae 4FF00002 		mov	r2, #0
 6063 29b2 1A64     		str	r2, [r3, #64]
 6064              	.L286:
2650:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2651:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2652:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // change state
2653:openstack/02a-MAClow/IEEE802154Ecsl.c ****    changeState(S_SLEEP);
 6065              		.loc 1 2653 0
 6066 29b4 4FF00000 		mov	r0, #0
 6067 29b8 FFF7FEFF 		bl	changeState
2654:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2655:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // update CSL Mode to SLEEP in order to allow new TX or RX.
2656:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.cslMode = CSL_SLEEP_MODE;
 6068              		.loc 1 2656 0
 6069 29bc 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6070 29c0 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6071 29c4 4FF00002 		mov	r2, #0
 6072 29c8 83F84520 		strb	r2, [r3, #69]
2657:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2658:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 6073              		.loc 1 2658 0
 6074 29cc 80BD     		pop	{r7, pc}
 6075              		.cfi_endproc
 6076              	.LFE68:
 6078 29ce 00BF     		.align	2
 6079              		.global	ieee154e_isSynch
 6080              		.thumb
 6081              		.thumb_func
 6083              	ieee154e_isSynch:
 6084              	.LFB69:
2659:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2660:openstack/02a-MAClow/IEEE802154Ecsl.c **** bool ieee154e_isSynch(){
 6085              		.loc 1 2660 0
 6086              		.cfi_startproc
 6087              		@ args = 0, pretend = 0, frame = 0
 6088              		@ frame_needed = 1, uses_anonymous_args = 0
 6089              		@ link register save eliminated.
 6090 29d0 80B4     		push	{r7}
 6091              	.LCFI169:
 6092              		.cfi_def_cfa_offset 4
 6093              		.cfi_offset 7, -4
 6094 29d2 00AF     		add	r7, sp, #0
 6095              	.LCFI170:
 6096              		.cfi_def_cfa_register 7
2661:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return ieee154e_vars.isSync;
 6097              		.loc 1 2661 0
 6098 29d4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6099 29d8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6100 29dc 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
2662:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 6101              		.loc 1 2662 0
 6102 29de 1846     		mov	r0, r3
 6103 29e0 BD46     		mov	sp, r7
 6104 29e2 80BC     		pop	{r7}
 6105 29e4 7047     		bx	lr
 6106              		.cfi_endproc
 6107              	.LFE69:
 6109 29e6 00BF     		.align	2
 6110              		.global	ieee154e_processIEs
 6111              		.thumb
 6112              		.thumb_func
 6114              	ieee154e_processIEs:
 6115              	.LFB70:
2663:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2664:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE bool ieee154e_processIEs(OpenQueueEntry_t* pkt, uint16_t* lenIE) {
 6116              		.loc 1 2664 0
 6117              		.cfi_startproc
 6118              		@ args = 0, pretend = 0, frame = 32
 6119              		@ frame_needed = 1, uses_anonymous_args = 0
 6120 29e8 80B5     		push	{r7, lr}
 6121              	.LCFI171:
 6122              		.cfi_def_cfa_offset 8
 6123              		.cfi_offset 7, -8
 6124              		.cfi_offset 14, -4
 6125 29ea 88B0     		sub	sp, sp, #32
 6126              	.LCFI172:
 6127              		.cfi_def_cfa_offset 40
 6128 29ec 00AF     		add	r7, sp, #0
 6129              	.LCFI173:
 6130              		.cfi_def_cfa_register 7
 6131 29ee 7860     		str	r0, [r7, #4]
 6132 29f0 3960     		str	r1, [r7, #0]
2665:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint8_t               ptr;
2666:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint8_t               byte0;
2667:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint8_t               byte1;
2668:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint8_t               temp_8b;
2669:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint8_t               gr_elem_id;
2670:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint8_t               subid;
2671:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint16_t              temp_16b;
2672:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint16_t              len;
2673:openstack/02a-MAClow/IEEE802154Ecsl.c ****    uint16_t              sublen;
2674:openstack/02a-MAClow/IEEE802154Ecsl.c ****    PORT_SIGNED_INT_WIDTH timeCorrection;
2675:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2676:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ptr=0;
 6133              		.loc 1 2676 0
 6134 29f2 4FF00003 		mov	r3, #0
 6135 29f6 FB73     		strb	r3, [r7, #15]
2677:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2678:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //===== header or payload IE header
2679:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2680:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //candidate IE header  if type ==0 header IE if type==1 payload IE
2681:openstack/02a-MAClow/IEEE802154Ecsl.c ****    temp_8b    = *((uint8_t*)(pkt->payload)+ptr);
 6136              		.loc 1 2681 0
 6137 29f8 7B68     		ldr	r3, [r7, #4]
 6138 29fa 5A68     		ldr	r2, [r3, #4]
 6139 29fc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6140 29fe D318     		adds	r3, r2, r3
 6141 2a00 1B78     		ldrb	r3, [r3, #0]
 6142 2a02 7B76     		strb	r3, [r7, #25]
2682:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ptr++;
 6143              		.loc 1 2682 0
 6144 2a04 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6145 2a06 03F10103 		add	r3, r3, #1
 6146 2a0a DBB2     		uxtb	r3, r3
 6147 2a0c FB73     		strb	r3, [r7, #15]
2683:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2684:openstack/02a-MAClow/IEEE802154Ecsl.c ****    temp_16b   = temp_8b + ((*((uint8_t*)(pkt->payload)+ptr))<< 8);
 6148              		.loc 1 2684 0
 6149 2a0e 7B7E     		ldrb	r3, [r7, #25]	@ zero_extendqisi2
 6150 2a10 9AB2     		uxth	r2, r3
 6151 2a12 7B68     		ldr	r3, [r7, #4]
 6152 2a14 5968     		ldr	r1, [r3, #4]
 6153 2a16 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6154 2a18 CB18     		adds	r3, r1, r3
 6155 2a1a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6156 2a1c 4FEA0323 		lsl	r3, r3, #8
 6157 2a20 9BB2     		uxth	r3, r3
 6158 2a22 D318     		adds	r3, r2, r3
 6159 2a24 FB82     		strh	r3, [r7, #22]	@ movhi
2685:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ptr++;
 6160              		.loc 1 2685 0
 6161 2a26 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6162 2a28 03F10103 		add	r3, r3, #1
 6163 2a2c DBB2     		uxtb	r3, r3
 6164 2a2e FB73     		strb	r3, [r7, #15]
2686:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2687:openstack/02a-MAClow/IEEE802154Ecsl.c ****    *lenIE     = ptr;
 6165              		.loc 1 2687 0
 6166 2a30 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6167 2a32 1A46     		mov	r2, r3
 6168 2a34 3B68     		ldr	r3, [r7, #0]
 6169 2a36 1A80     		strh	r2, [r3, #0]	@ movhi
2688:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2689:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if ((temp_16b & IEEE802154E_DESC_TYPE_PAYLOAD_IE) == IEEE802154E_DESC_TYPE_PAYLOAD_IE){
 6170              		.loc 1 2689 0
 6171 2a38 FB8A     		ldrh	r3, [r7, #22]
 6172 2a3a 03F00103 		and	r3, r3, #1
 6173 2a3e 002B     		cmp	r3, #0
 6174 2a40 0AD0     		beq	.L290
2690:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // payload IE
2691:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2692:openstack/02a-MAClow/IEEE802154Ecsl.c ****       len          = (temp_16b & IEEE802154E_DESC_LEN_PAYLOAD_IE_MASK)>>IEEE802154E_DESC_LEN_PAYLOA
 6175              		.loc 1 2692 0
 6176 2a42 FB8A     		ldrh	r3, [r7, #22]
 6177 2a44 4FEA5313 		lsr	r3, r3, #5
 6178 2a48 BB83     		strh	r3, [r7, #28]	@ movhi
2693:openstack/02a-MAClow/IEEE802154Ecsl.c ****       gr_elem_id   = (temp_16b & IEEE802154E_DESC_GROUPID_PAYLOAD_IE_MASK)>>IEEE802154E_DESC_GROUPI
 6179              		.loc 1 2693 0
 6180 2a4a FB8A     		ldrh	r3, [r7, #22]
 6181 2a4c 03F01E03 		and	r3, r3, #30
 6182 2a50 4FEA6303 		asr	r3, r3, #1
 6183 2a54 FB77     		strb	r3, [r7, #31]
 6184 2a56 09E0     		b	.L291
 6185              	.L290:
2694:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } else {
2695:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // header IE
2696:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2697:openstack/02a-MAClow/IEEE802154Ecsl.c ****       len          = (temp_16b & IEEE802154E_DESC_LEN_HEADER_IE_MASK)>>IEEE802154E_DESC_LEN_HEADER_
 6186              		.loc 1 2697 0
 6187 2a58 FB8A     		ldrh	r3, [r7, #22]
 6188 2a5a 4FEA5323 		lsr	r3, r3, #9
 6189 2a5e BB83     		strh	r3, [r7, #28]	@ movhi
2698:openstack/02a-MAClow/IEEE802154Ecsl.c ****       gr_elem_id   = (temp_16b & IEEE802154E_DESC_ELEMENTID_HEADER_IE_MASK)>>IEEE802154E_DESC_ELEME
 6190              		.loc 1 2698 0
 6191 2a60 FB8A     		ldrh	r3, [r7, #22]
 6192 2a62 03F4FF73 		and	r3, r3, #510
 6193 2a66 4FEA6303 		asr	r3, r3, #1
 6194 2a6a FB77     		strb	r3, [r7, #31]
 6195              	.L291:
2699:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2700:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2701:openstack/02a-MAClow/IEEE802154Ecsl.c ****    *lenIE         += len;
 6196              		.loc 1 2701 0
 6197 2a6c 3B68     		ldr	r3, [r7, #0]
 6198 2a6e 1A88     		ldrh	r2, [r3, #0]
 6199 2a70 BB8B     		ldrh	r3, [r7, #28]	@ movhi
 6200 2a72 D318     		adds	r3, r2, r3
 6201 2a74 9AB2     		uxth	r2, r3
 6202 2a76 3B68     		ldr	r3, [r7, #0]
 6203 2a78 1A80     		strh	r2, [r3, #0]	@ movhi
2702:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2703:openstack/02a-MAClow/IEEE802154Ecsl.c ****    //===== sub-elements
2704:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2705:openstack/02a-MAClow/IEEE802154Ecsl.c ****    switch(gr_elem_id){
 6204              		.loc 1 2705 0
 6205 2a7a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6206 2a7c 012B     		cmp	r3, #1
 6207 2a7e 02D0     		beq	.L293
 6208 2a80 1E2B     		cmp	r3, #30
 6209 2a82 78D0     		beq	.L294
 6210 2a84 BEE0     		b	.L308
 6211              	.L293:
2706:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2707:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case IEEE802154E_MLME_IE_GROUPID:
2708:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // MLME IE
2709:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2710:openstack/02a-MAClow/IEEE802154Ecsl.c ****          do {
2711:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2712:openstack/02a-MAClow/IEEE802154Ecsl.c ****             //read sub IE header
2713:openstack/02a-MAClow/IEEE802154Ecsl.c ****             temp_8b     = *((uint8_t*)(pkt->payload)+ptr);
 6212              		.loc 1 2713 0
 6213 2a86 7B68     		ldr	r3, [r7, #4]
 6214 2a88 5A68     		ldr	r2, [r3, #4]
 6215 2a8a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6216 2a8c D318     		adds	r3, r2, r3
 6217 2a8e 1B78     		ldrb	r3, [r3, #0]
 6218 2a90 7B76     		strb	r3, [r7, #25]
2714:openstack/02a-MAClow/IEEE802154Ecsl.c ****             ptr         = ptr + 1;
 6219              		.loc 1 2714 0
 6220 2a92 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6221 2a94 03F10103 		add	r3, r3, #1
 6222 2a98 DBB2     		uxtb	r3, r3
 6223 2a9a FB73     		strb	r3, [r7, #15]
2715:openstack/02a-MAClow/IEEE802154Ecsl.c ****             temp_16b    = temp_8b  +(*((uint8_t*)(pkt->payload)+ptr) << 8);
 6224              		.loc 1 2715 0
 6225 2a9c 7B7E     		ldrb	r3, [r7, #25]	@ zero_extendqisi2
 6226 2a9e 9AB2     		uxth	r2, r3
 6227 2aa0 7B68     		ldr	r3, [r7, #4]
 6228 2aa2 5968     		ldr	r1, [r3, #4]
 6229 2aa4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6230 2aa6 CB18     		adds	r3, r1, r3
 6231 2aa8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6232 2aaa 4FEA0323 		lsl	r3, r3, #8
 6233 2aae 9BB2     		uxth	r3, r3
 6234 2ab0 D318     		adds	r3, r2, r3
 6235 2ab2 FB82     		strh	r3, [r7, #22]	@ movhi
2716:openstack/02a-MAClow/IEEE802154Ecsl.c ****             ptr         = ptr + 1;
 6236              		.loc 1 2716 0
 6237 2ab4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6238 2ab6 03F10103 		add	r3, r3, #1
 6239 2aba DBB2     		uxtb	r3, r3
 6240 2abc FB73     		strb	r3, [r7, #15]
2717:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2718:openstack/02a-MAClow/IEEE802154Ecsl.c ****             len         = len - 2; //remove header fields len
 6241              		.loc 1 2718 0
 6242 2abe BB8B     		ldrh	r3, [r7, #28]	@ movhi
 6243 2ac0 A3F10203 		sub	r3, r3, #2
 6244 2ac4 BB83     		strh	r3, [r7, #28]	@ movhi
2719:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2720:openstack/02a-MAClow/IEEE802154Ecsl.c ****             if ((temp_16b & IEEE802154E_DESC_TYPE_LONG) == IEEE802154E_DESC_TYPE_LONG){
 6245              		.loc 1 2720 0
 6246 2ac6 FB8A     		ldrh	r3, [r7, #22]
 6247 2ac8 03F00103 		and	r3, r3, #1
 6248 2acc 002B     		cmp	r3, #0
 6249 2ace 0AD0     		beq	.L295
2721:openstack/02a-MAClow/IEEE802154Ecsl.c ****                // long sub-IE
2722:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2723:openstack/02a-MAClow/IEEE802154Ecsl.c ****                sublen   = (temp_16b & IEEE802154E_DESC_LEN_LONG_MLME_IE_MASK)>>IEEE802154E_DESC_LEN
 6250              		.loc 1 2723 0
 6251 2ad0 FB8A     		ldrh	r3, [r7, #22]
 6252 2ad2 4FEA5313 		lsr	r3, r3, #5
 6253 2ad6 7B83     		strh	r3, [r7, #26]	@ movhi
2724:openstack/02a-MAClow/IEEE802154Ecsl.c ****                subid    = (temp_16b & IEEE802154E_DESC_SUBID_LONG_MLME_IE_MASK)>>IEEE802154E_DESC_S
 6254              		.loc 1 2724 0
 6255 2ad8 FB8A     		ldrh	r3, [r7, #22]
 6256 2ada 03F01E03 		and	r3, r3, #30
 6257 2ade 4FEA6303 		asr	r3, r3, #1
 6258 2ae2 BB77     		strb	r3, [r7, #30]
 6259 2ae4 09E0     		b	.L296
 6260              	.L295:
2725:openstack/02a-MAClow/IEEE802154Ecsl.c ****             } else {
2726:openstack/02a-MAClow/IEEE802154Ecsl.c ****                // short sub-IE
2727:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2728:openstack/02a-MAClow/IEEE802154Ecsl.c ****                sublen   = (temp_16b & IEEE802154E_DESC_LEN_SHORT_MLME_IE_MASK)>>IEEE802154E_DESC_LE
 6261              		.loc 1 2728 0
 6262 2ae6 FB8A     		ldrh	r3, [r7, #22]
 6263 2ae8 4FEA1323 		lsr	r3, r3, #8
 6264 2aec 7B83     		strh	r3, [r7, #26]	@ movhi
2729:openstack/02a-MAClow/IEEE802154Ecsl.c ****                subid    = (temp_16b & IEEE802154E_DESC_SUBID_SHORT_MLME_IE_MASK)>>IEEE802154E_DESC_
 6265              		.loc 1 2729 0
 6266 2aee FB8A     		ldrh	r3, [r7, #22]
 6267 2af0 03F0FE03 		and	r3, r3, #254
 6268 2af4 4FEA6303 		asr	r3, r3, #1
 6269 2af8 BB77     		strb	r3, [r7, #30]
 6270              	.L296:
2730:openstack/02a-MAClow/IEEE802154Ecsl.c ****             }
2731:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2732:openstack/02a-MAClow/IEEE802154Ecsl.c ****             switch(subid){
 6271              		.loc 1 2732 0
 6272 2afa BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 6273 2afc 1B2B     		cmp	r3, #27
 6274 2afe 25D0     		beq	.L299
 6275 2b00 1C2B     		cmp	r3, #28
 6276 2b02 2DD0     		beq	.L310
 6277 2b04 1A2B     		cmp	r3, #26
 6278 2b06 28D1     		bne	.L309
 6279              	.L298:
2733:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2734:openstack/02a-MAClow/IEEE802154Ecsl.c ****                case IEEE802154E_MLME_SYNC_IE_SUBID:
2735:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   // Sync IE: ASN and Join Priority
2736:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2737:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   if (idmanager_getIsDAGroot()==FALSE) {
 6280              		.loc 1 2737 0
 6281 2b08 FFF7FEFF 		bl	idmanager_getIsDAGroot
 6282 2b0c 0346     		mov	r3, r0
 6283 2b0e 83F00103 		eor	r3, r3, #1
 6284 2b12 DBB2     		uxtb	r3, r3
 6285 2b14 002B     		cmp	r3, #0
 6286 2b16 25D0     		beq	.L311
2738:openstack/02a-MAClow/IEEE802154Ecsl.c ****                      // ASN
2739:openstack/02a-MAClow/IEEE802154Ecsl.c ****                      asnStoreFromAdv((uint8_t*)(pkt->payload)+ptr);
 6287              		.loc 1 2739 0
 6288 2b18 7B68     		ldr	r3, [r7, #4]
 6289 2b1a 5A68     		ldr	r2, [r3, #4]
 6290 2b1c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6291 2b1e D318     		adds	r3, r2, r3
 6292 2b20 1846     		mov	r0, r3
 6293 2b22 FFF7FEFF 		bl	asnStoreFromAdv
2740:openstack/02a-MAClow/IEEE802154Ecsl.c ****                      ptr = ptr + 5;
 6294              		.loc 1 2740 0
 6295 2b26 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6296 2b28 03F10503 		add	r3, r3, #5
 6297 2b2c DBB2     		uxtb	r3, r3
 6298 2b2e FB73     		strb	r3, [r7, #15]
2741:openstack/02a-MAClow/IEEE802154Ecsl.c ****                      // join priority
2742:openstack/02a-MAClow/IEEE802154Ecsl.c ****                      joinPriorityStoreFromAdv(*((uint8_t*)(pkt->payload)+ptr));
 6299              		.loc 1 2742 0
 6300 2b30 7B68     		ldr	r3, [r7, #4]
 6301 2b32 5A68     		ldr	r2, [r3, #4]
 6302 2b34 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6303 2b36 D318     		adds	r3, r2, r3
 6304 2b38 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6305 2b3a 1846     		mov	r0, r3
 6306 2b3c FFF7FEFF 		bl	joinPriorityStoreFromAdv
2743:openstack/02a-MAClow/IEEE802154Ecsl.c ****                      ptr = ptr + 1;
 6307              		.loc 1 2743 0
 6308 2b40 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6309 2b42 03F10103 		add	r3, r3, #1
 6310 2b46 DBB2     		uxtb	r3, r3
 6311 2b48 FB73     		strb	r3, [r7, #15]
2744:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   }
2745:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   break;
 6312              		.loc 1 2745 0
 6313 2b4a 0BE0     		b	.L311
 6314              	.L299:
2746:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2747:openstack/02a-MAClow/IEEE802154Ecsl.c ****                case IEEE802154E_MLME_SLOTFRAME_LINK_IE_SUBID:
2748:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   processIE_retrieveSlotframeLinkIE(pkt,&ptr);
 6315              		.loc 1 2748 0
 6316 2b4c 07F10F03 		add	r3, r7, #15
 6317 2b50 7868     		ldr	r0, [r7, #4]
 6318 2b52 1946     		mov	r1, r3
 6319 2b54 FFF7FEFF 		bl	processIE_retrieveSlotframeLinkIE
2749:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   break;
 6320              		.loc 1 2749 0
 6321 2b58 05E0     		b	.L302
 6322              	.L309:
2750:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2751:openstack/02a-MAClow/IEEE802154Ecsl.c ****                case IEEE802154E_MLME_TIMESLOT_IE_SUBID:
2752:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   // to do
2753:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   break;
2754:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2755:openstack/02a-MAClow/IEEE802154Ecsl.c ****                default:
2756:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   return FALSE;
 6323              		.loc 1 2756 0
 6324 2b5a 4FF00003 		mov	r3, #0
 6325 2b5e 6AE0     		b	.L307
 6326              	.L310:
2753:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   break;
 6327              		.loc 1 2753 0
 6328 2b60 00BF     		nop
 6329 2b62 00E0     		b	.L302
 6330              	.L311:
2745:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   break;
 6331              		.loc 1 2745 0
 6332 2b64 00BF     		nop
 6333              	.L302:
2757:openstack/02a-MAClow/IEEE802154Ecsl.c ****                   break;
2758:openstack/02a-MAClow/IEEE802154Ecsl.c ****             }
2759:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2760:openstack/02a-MAClow/IEEE802154Ecsl.c ****             len = len - sublen;
 6334              		.loc 1 2760 0
 6335 2b66 BA8B     		ldrh	r2, [r7, #28]	@ movhi
 6336 2b68 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 6337 2b6a D31A     		subs	r3, r2, r3
 6338 2b6c BB83     		strh	r3, [r7, #28]	@ movhi
2761:openstack/02a-MAClow/IEEE802154Ecsl.c ****          } while(len>0);
 6339              		.loc 1 2761 0
 6340 2b6e BB8B     		ldrh	r3, [r7, #28]
 6341 2b70 002B     		cmp	r3, #0
 6342 2b72 88D1     		bne	.L293
2762:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2763:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 6343              		.loc 1 2763 0
 6344 2b74 4EE0     		b	.L304
 6345              	.L294:
2764:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2765:openstack/02a-MAClow/IEEE802154Ecsl.c ****       case IEEE802154E_ACK_NACK_TIMECORRECTION_ELEMENTID:
2766:openstack/02a-MAClow/IEEE802154Ecsl.c ****          // timecorrection IE
2767:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2768:openstack/02a-MAClow/IEEE802154Ecsl.c ****          if (
2769:openstack/02a-MAClow/IEEE802154Ecsl.c ****                idmanager_getIsDAGroot()==FALSE &&
 6346              		.loc 1 2769 0
 6347 2b76 FFF7FEFF 		bl	idmanager_getIsDAGroot
 6348 2b7a 0346     		mov	r3, r0
 6349 2b7c 83F00103 		eor	r3, r3, #1
 6350 2b80 DBB2     		uxtb	r3, r3
2768:openstack/02a-MAClow/IEEE802154Ecsl.c ****          if (
 6351              		.loc 1 2768 0
 6352 2b82 002B     		cmp	r3, #0
 6353 2b84 45D0     		beq	.L312
2770:openstack/02a-MAClow/IEEE802154Ecsl.c ****                neighbors_isPreferredParent(&(pkt->l2_nextORpreviousHop))
 6354              		.loc 1 2770 0
 6355 2b86 7B68     		ldr	r3, [r7, #4]
 6356 2b88 03F13803 		add	r3, r3, #56
 6357 2b8c 1846     		mov	r0, r3
 6358 2b8e FFF7FEFF 		bl	neighbors_isPreferredParent
 6359 2b92 0346     		mov	r3, r0
2769:openstack/02a-MAClow/IEEE802154Ecsl.c ****                idmanager_getIsDAGroot()==FALSE &&
 6360              		.loc 1 2769 0
 6361 2b94 002B     		cmp	r3, #0
 6362 2b96 3CD0     		beq	.L312
2771:openstack/02a-MAClow/IEEE802154Ecsl.c ****             ) {
2772:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2773:openstack/02a-MAClow/IEEE802154Ecsl.c ****             byte0 = *((uint8_t*)(pkt->payload)+ptr);
 6363              		.loc 1 2773 0
 6364 2b98 7B68     		ldr	r3, [r7, #4]
 6365 2b9a 5A68     		ldr	r2, [r3, #4]
 6366 2b9c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6367 2b9e D318     		adds	r3, r2, r3
 6368 2ba0 1B78     		ldrb	r3, [r3, #0]
 6369 2ba2 7B75     		strb	r3, [r7, #21]
2774:openstack/02a-MAClow/IEEE802154Ecsl.c ****             ptr++;
 6370              		.loc 1 2774 0
 6371 2ba4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6372 2ba6 03F10103 		add	r3, r3, #1
 6373 2baa DBB2     		uxtb	r3, r3
 6374 2bac FB73     		strb	r3, [r7, #15]
2775:openstack/02a-MAClow/IEEE802154Ecsl.c ****             byte1 = *((uint8_t*)(pkt->payload)+ptr);
 6375              		.loc 1 2775 0
 6376 2bae 7B68     		ldr	r3, [r7, #4]
 6377 2bb0 5A68     		ldr	r2, [r3, #4]
 6378 2bb2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6379 2bb4 D318     		adds	r3, r2, r3
 6380 2bb6 1B78     		ldrb	r3, [r3, #0]
 6381 2bb8 3B75     		strb	r3, [r7, #20]
2776:openstack/02a-MAClow/IEEE802154Ecsl.c ****             ptr++;
 6382              		.loc 1 2776 0
 6383 2bba FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6384 2bbc 03F10103 		add	r3, r3, #1
 6385 2bc0 DBB2     		uxtb	r3, r3
 6386 2bc2 FB73     		strb	r3, [r7, #15]
2777:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2778:openstack/02a-MAClow/IEEE802154Ecsl.c ****             timeCorrection  = (int16_t)((uint16_t)byte1<<8 | (uint16_t)byte0);
 6387              		.loc 1 2778 0
 6388 2bc4 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 6389 2bc6 4FEA0323 		lsl	r3, r3, #8
 6390 2bca 9AB2     		uxth	r2, r3
 6391 2bcc 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 6392 2bce 9BB2     		uxth	r3, r3
 6393 2bd0 1343     		orrs	r3, r3, r2
 6394 2bd2 9BB2     		uxth	r3, r3
 6395 2bd4 1BB2     		sxth	r3, r3
 6396 2bd6 3B61     		str	r3, [r7, #16]
2779:openstack/02a-MAClow/IEEE802154Ecsl.c ****             timeCorrection  = (timeCorrection / (PORT_SIGNED_INT_WIDTH)US_PER_TICK);
 6397              		.loc 1 2779 0
 6398 2bd8 3B69     		ldr	r3, [r7, #16]
 6399 2bda 48F68902 		movw	r2, #34953
 6400 2bde C8F68802 		movt	r2, 34952
 6401 2be2 82FB0312 		smull	r1, r2, r2, r3
 6402 2be6 D218     		adds	r2, r2, r3
 6403 2be8 4FEA2212 		asr	r2, r2, #4
 6404 2bec 4FEAE373 		asr	r3, r3, #31
 6405 2bf0 D31A     		subs	r3, r2, r3
 6406 2bf2 3B61     		str	r3, [r7, #16]
2780:openstack/02a-MAClow/IEEE802154Ecsl.c ****             timeCorrection  = -timeCorrection;
 6407              		.loc 1 2780 0
 6408 2bf4 3B69     		ldr	r3, [r7, #16]
 6409 2bf6 C3F10003 		rsb	r3, r3, #0
 6410 2bfa 3B61     		str	r3, [r7, #16]
2781:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2782:openstack/02a-MAClow/IEEE802154Ecsl.c ****             synchronizeAck(timeCorrection);
 6411              		.loc 1 2782 0
 6412 2bfc 3869     		ldr	r0, [r7, #16]
 6413 2bfe FFF7FEFF 		bl	synchronizeAck
2783:openstack/02a-MAClow/IEEE802154Ecsl.c ****          }
2784:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 6414              		.loc 1 2784 0
 6415 2c02 06E0     		b	.L312
 6416              	.L308:
2785:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2786:openstack/02a-MAClow/IEEE802154Ecsl.c ****       default:
2787:openstack/02a-MAClow/IEEE802154Ecsl.c ****          *lenIE = 0; //no header or not recognized.
 6417              		.loc 1 2787 0
 6418 2c04 3B68     		ldr	r3, [r7, #0]
 6419 2c06 4FF00002 		mov	r2, #0
 6420 2c0a 1A80     		strh	r2, [r3, #0]	@ movhi
2788:openstack/02a-MAClow/IEEE802154Ecsl.c ****          return FALSE;
 6421              		.loc 1 2788 0
 6422 2c0c 4FF00003 		mov	r3, #0
 6423 2c10 11E0     		b	.L307
 6424              	.L312:
2784:openstack/02a-MAClow/IEEE802154Ecsl.c ****          break;
 6425              		.loc 1 2784 0
 6426 2c12 00BF     		nop
 6427              	.L304:
2789:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2790:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2791:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if(*lenIE>127) {
 6428              		.loc 1 2791 0
 6429 2c14 3B68     		ldr	r3, [r7, #0]
 6430 2c16 1B88     		ldrh	r3, [r3, #0]
 6431 2c18 7F2B     		cmp	r3, #127
 6432 2c1a 0AD9     		bls	.L306
2792:openstack/02a-MAClow/IEEE802154Ecsl.c ****       // log the error
2793:openstack/02a-MAClow/IEEE802154Ecsl.c ****       openserial_printError(
 6433              		.loc 1 2793 0
 6434 2c1c 3B68     		ldr	r3, [r7, #0]
 6435 2c1e 1B88     		ldrh	r3, [r3, #0]
 6436 2c20 4FF00900 		mov	r0, #9
 6437 2c24 4FF03301 		mov	r1, #51
 6438 2c28 1A46     		mov	r2, r3
 6439 2c2a 4FF00103 		mov	r3, #1
 6440 2c2e FFF7FEFF 		bl	openserial_printError
 6441              	.L306:
2794:openstack/02a-MAClow/IEEE802154Ecsl.c ****          COMPONENT_IEEE802154E,
2795:openstack/02a-MAClow/IEEE802154Ecsl.c ****          ERR_HEADER_TOO_LONG,
2796:openstack/02a-MAClow/IEEE802154Ecsl.c ****          (errorparameter_t)*lenIE,
2797:openstack/02a-MAClow/IEEE802154Ecsl.c ****          (errorparameter_t)1
2798:openstack/02a-MAClow/IEEE802154Ecsl.c ****       );
2799:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2800:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return TRUE;
 6442              		.loc 1 2800 0
 6443 2c32 4FF00103 		mov	r3, #1
 6444              	.L307:
2801:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 6445              		.loc 1 2801 0
 6446 2c36 1846     		mov	r0, r3
 6447 2c38 07F12007 		add	r7, r7, #32
 6448 2c3c BD46     		mov	sp, r7
 6449 2c3e 80BD     		pop	{r7, pc}
 6450              		.cfi_endproc
 6451              	.LFE70:
 6453              		.align	2
 6454              		.global	joinPriorityStoreFromAdv
 6455              		.thumb
 6456              		.thumb_func
 6458              	joinPriorityStoreFromAdv:
 6459              	.LFB71:
2802:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2803:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void joinPriorityStoreFromAdv(uint8_t jp){
 6460              		.loc 1 2803 0
 6461              		.cfi_startproc
 6462              		@ args = 0, pretend = 0, frame = 8
 6463              		@ frame_needed = 1, uses_anonymous_args = 0
 6464              		@ link register save eliminated.
 6465 2c40 80B4     		push	{r7}
 6466              	.LCFI174:
 6467              		.cfi_def_cfa_offset 4
 6468              		.cfi_offset 7, -4
 6469 2c42 83B0     		sub	sp, sp, #12
 6470              	.LCFI175:
 6471              		.cfi_def_cfa_offset 16
 6472 2c44 00AF     		add	r7, sp, #0
 6473              	.LCFI176:
 6474              		.cfi_def_cfa_register 7
 6475 2c46 0346     		mov	r3, r0
 6476 2c48 FB71     		strb	r3, [r7, #7]
2804:openstack/02a-MAClow/IEEE802154Ecsl.c ****   ieee154e_vars.dataReceived->l2_joinPriority = jp;
 6477              		.loc 1 2804 0
 6478 2c4a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6479 2c4e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6480 2c52 9B69     		ldr	r3, [r3, #24]
 6481 2c54 FA79     		ldrb	r2, [r7, #7]
 6482 2c56 83F86420 		strb	r2, [r3, #100]
2805:openstack/02a-MAClow/IEEE802154Ecsl.c ****   ieee154e_vars.dataReceived->l2_joinPriorityPresent = TRUE;
 6483              		.loc 1 2805 0
 6484 2c5a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6485 2c5e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6486 2c62 9B69     		ldr	r3, [r3, #24]
 6487 2c64 4FF00102 		mov	r2, #1
 6488 2c68 83F86620 		strb	r2, [r3, #102]
2806:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 6489              		.loc 1 2806 0
 6490 2c6c 07F10C07 		add	r7, r7, #12
 6491 2c70 BD46     		mov	sp, r7
 6492 2c72 80BC     		pop	{r7}
 6493 2c74 7047     		bx	lr
 6494              		.cfi_endproc
 6495              	.LFE71:
 6497 2c76 00BF     		.align	2
 6498              		.global	asnStoreFromAdv
 6499              		.thumb
 6500              		.thumb_func
 6502              	asnStoreFromAdv:
 6503              	.LFB72:
2807:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2808:openstack/02a-MAClow/IEEE802154Ecsl.c **** port_INLINE void asnStoreFromAdv(uint8_t* asn) {
 6504              		.loc 1 2808 0
 6505              		.cfi_startproc
 6506              		@ args = 0, pretend = 0, frame = 8
 6507              		@ frame_needed = 1, uses_anonymous_args = 0
 6508 2c78 90B5     		push	{r4, r7, lr}
 6509              	.LCFI177:
 6510              		.cfi_def_cfa_offset 12
 6511              		.cfi_offset 4, -12
 6512              		.cfi_offset 7, -8
 6513              		.cfi_offset 14, -4
 6514 2c7a 83B0     		sub	sp, sp, #12
 6515              	.LCFI178:
 6516              		.cfi_def_cfa_offset 24
 6517 2c7c 00AF     		add	r7, sp, #0
 6518              	.LCFI179:
 6519              		.cfi_def_cfa_register 7
 6520 2c7e 7860     		str	r0, [r7, #4]
2809:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2810:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // store the ASN
2811:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.asn.bytes0and1   =     asn[0]+
 6521              		.loc 1 2811 0
 6522 2c80 7B68     		ldr	r3, [r7, #4]
 6523 2c82 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6524 2c84 1A46     		mov	r2, r3
2812:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                     256*asn[1];
 6525              		.loc 1 2812 0
 6526 2c86 7B68     		ldr	r3, [r7, #4]
 6527 2c88 03F10103 		add	r3, r3, #1
 6528 2c8c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
2811:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.asn.bytes0and1   =     asn[0]+
 6529              		.loc 1 2811 0
 6530 2c8e 4FEA0323 		lsl	r3, r3, #8
 6531 2c92 9BB2     		uxth	r3, r3
 6532 2c94 D318     		adds	r3, r2, r3
 6533 2c96 9AB2     		uxth	r2, r3
 6534 2c98 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6535 2c9c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6536 2ca0 A3F80320 		strh	r2, [r3, #3]	@ unaligned
2813:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.asn.bytes2and3   =     asn[2]+
 6537              		.loc 1 2813 0
 6538 2ca4 7B68     		ldr	r3, [r7, #4]
 6539 2ca6 03F10203 		add	r3, r3, #2
 6540 2caa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6541 2cac 1A46     		mov	r2, r3
2814:openstack/02a-MAClow/IEEE802154Ecsl.c ****                                     256*asn[3];
 6542              		.loc 1 2814 0
 6543 2cae 7B68     		ldr	r3, [r7, #4]
 6544 2cb0 03F10303 		add	r3, r3, #3
 6545 2cb4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
2813:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.asn.bytes2and3   =     asn[2]+
 6546              		.loc 1 2813 0
 6547 2cb6 4FEA0323 		lsl	r3, r3, #8
 6548 2cba 9BB2     		uxth	r3, r3
 6549 2cbc D318     		adds	r3, r2, r3
 6550 2cbe 9AB2     		uxth	r2, r3
 6551 2cc0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6552 2cc4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6553 2cc8 A3F80120 		strh	r2, [r3, #1]	@ unaligned
2815:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.asn.byte4        =     asn[4];
 6554              		.loc 1 2815 0
 6555 2ccc 7B68     		ldr	r3, [r7, #4]
 6556 2cce 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 6557 2cd0 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6558 2cd4 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6559 2cd8 1A70     		strb	r2, [r3, #0]
2816:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2817:openstack/02a-MAClow/IEEE802154Ecsl.c ****    // determine the current slotOffset
2818:openstack/02a-MAClow/IEEE802154Ecsl.c ****    /*
2819:openstack/02a-MAClow/IEEE802154Ecsl.c ****    Note: this is a bit of a hack. Normally, slotOffset=ASN%slotlength. But since
2820:openstack/02a-MAClow/IEEE802154Ecsl.c ****    the ADV is exchanged in slot 0, we know that we're currently at slotOffset==0
2821:openstack/02a-MAClow/IEEE802154Ecsl.c ****    */
2822:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.slotOffset       = 0;
 6560              		.loc 1 2822 0
 6561 2cda 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6562 2cde C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6563 2ce2 4FF00002 		mov	r2, #0
 6564 2ce6 DA80     		strh	r2, [r3, #6]	@ movhi
2823:openstack/02a-MAClow/IEEE802154Ecsl.c ****    schedule_syncSlotOffset(ieee154e_vars.slotOffset);
 6565              		.loc 1 2823 0
 6566 2ce8 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6567 2cec C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6568 2cf0 DB88     		ldrh	r3, [r3, #6]
 6569 2cf2 1846     		mov	r0, r3
 6570 2cf4 FFF7FEFF 		bl	schedule_syncSlotOffset
2824:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.nextActiveSlotOffset = schedule_getNextActiveSlotOffset();
 6571              		.loc 1 2824 0
 6572 2cf8 FFF7FEFF 		bl	schedule_getNextActiveSlotOffset
 6573 2cfc 0346     		mov	r3, r0
 6574 2cfe 1A46     		mov	r2, r3
 6575 2d00 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6576 2d04 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6577 2d08 1A81     		strh	r2, [r3, #8]	@ movhi
2825:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2826:openstack/02a-MAClow/IEEE802154Ecsl.c ****    /*
2827:openstack/02a-MAClow/IEEE802154Ecsl.c ****    infer the asnOffset based on the fact that
2828:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.freq = 11 + (asnOffset + channelOffset)%16
2829:openstack/02a-MAClow/IEEE802154Ecsl.c ****    */
2830:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ieee154e_vars.asnOffset = ieee154e_vars.freq - 11 - schedule_getChannelOffset();
 6578              		.loc 1 2830 0
 6579 2d0a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6580 2d0e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6581 2d12 93F82C40 		ldrb	r4, [r3, #44]	@ zero_extendqisi2
 6582 2d16 FFF7FEFF 		bl	schedule_getChannelOffset
 6583 2d1a 0346     		mov	r3, r0
 6584 2d1c E31A     		subs	r3, r4, r3
 6585 2d1e DBB2     		uxtb	r3, r3
 6586 2d20 A3F10B03 		sub	r3, r3, #11
 6587 2d24 DAB2     		uxtb	r2, r3
 6588 2d26 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6589 2d2a C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6590 2d2e 83F82D20 		strb	r2, [r3, #45]
2831:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 6591              		.loc 1 2831 0
 6592 2d32 07F10C07 		add	r7, r7, #12
 6593 2d36 BD46     		mov	sp, r7
 6594 2d38 90BD     		pop	{r4, r7, pc}
 6595              		.cfi_endproc
 6596              	.LFE72:
 6598 2d3a 00BF     		.align	2
 6599              		.global	ieee154e_asnDiff
 6600              		.thumb
 6601              		.thumb_func
 6603              	ieee154e_asnDiff:
 6604              	.LFB73:
2832:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2833:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2834:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2835:openstack/02a-MAClow/IEEE802154Ecsl.c **** /**
2836:openstack/02a-MAClow/IEEE802154Ecsl.c **** /brief Difference between some older ASN and the current ASN.
2837:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2838:openstack/02a-MAClow/IEEE802154Ecsl.c **** \param[in] someASN some ASN to compare to the current
2839:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2840:openstack/02a-MAClow/IEEE802154Ecsl.c **** \returns The ASN difference, or 0xffff if more than 65535 different
2841:openstack/02a-MAClow/IEEE802154Ecsl.c **** */
2842:openstack/02a-MAClow/IEEE802154Ecsl.c **** PORT_RADIOTIMER_WIDTH ieee154e_asnDiff(asn_t* someASN) {
 6605              		.loc 1 2842 0
 6606              		.cfi_startproc
 6607              		@ args = 0, pretend = 0, frame = 16
 6608              		@ frame_needed = 1, uses_anonymous_args = 0
 6609 2d3c 80B5     		push	{r7, lr}
 6610              	.LCFI180:
 6611              		.cfi_def_cfa_offset 8
 6612              		.cfi_offset 7, -8
 6613              		.cfi_offset 14, -4
 6614 2d3e 84B0     		sub	sp, sp, #16
 6615              	.LCFI181:
 6616              		.cfi_def_cfa_offset 24
 6617 2d40 00AF     		add	r7, sp, #0
 6618              	.LCFI182:
 6619              		.cfi_def_cfa_register 7
 6620 2d42 7860     		str	r0, [r7, #4]
2843:openstack/02a-MAClow/IEEE802154Ecsl.c ****    PORT_RADIOTIMER_WIDTH diff;
2844:openstack/02a-MAClow/IEEE802154Ecsl.c ****    INTERRUPT_DECLARATION();
2845:openstack/02a-MAClow/IEEE802154Ecsl.c ****    DISABLE_INTERRUPTS();
 6621              		.loc 1 2845 0
 6622 2d44 FFF7FEFF 		bl	IntMasterDisable
2846:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.asn.byte4 != someASN->byte4) {
 6623              		.loc 1 2846 0
 6624 2d48 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6625 2d4c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6626 2d50 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 6627 2d52 7B68     		ldr	r3, [r7, #4]
 6628 2d54 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6629 2d56 9A42     		cmp	r2, r3
 6630 2d58 04D0     		beq	.L316
2847:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ENABLE_INTERRUPTS();
 6631              		.loc 1 2847 0
 6632 2d5a FFF7FEFF 		bl	IntMasterEnable
2848:openstack/02a-MAClow/IEEE802154Ecsl.c ****       return (PORT_RADIOTIMER_WIDTH)0xFFFFFFFF;;
 6633              		.loc 1 2848 0
 6634 2d5e 4FF0FF33 		mov	r3, #-1
 6635 2d62 4CE0     		b	.L317
 6636              	.L316:
2849:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2850:openstack/02a-MAClow/IEEE802154Ecsl.c **** 
2851:openstack/02a-MAClow/IEEE802154Ecsl.c ****    diff = 0;
 6637              		.loc 1 2851 0
 6638 2d64 4FF00003 		mov	r3, #0
 6639 2d68 FB60     		str	r3, [r7, #12]
2852:openstack/02a-MAClow/IEEE802154Ecsl.c ****    if (ieee154e_vars.asn.bytes2and3 == someASN->bytes2and3) {
 6640              		.loc 1 2852 0
 6641 2d6a 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6642 2d6e C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6643 2d72 B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 6644 2d76 9AB2     		uxth	r2, r3
 6645 2d78 7B68     		ldr	r3, [r7, #4]
 6646 2d7a B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 6647 2d7e 9BB2     		uxth	r3, r3
 6648 2d80 9A42     		cmp	r2, r3
 6649 2d82 0FD1     		bne	.L318
2853:openstack/02a-MAClow/IEEE802154Ecsl.c ****       ENABLE_INTERRUPTS();
 6650              		.loc 1 2853 0
 6651 2d84 FFF7FEFF 		bl	IntMasterEnable
2854:openstack/02a-MAClow/IEEE802154Ecsl.c ****       return ieee154e_vars.asn.bytes0and1-someASN->bytes0and1;
 6652              		.loc 1 2854 0
 6653 2d88 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6654 2d8c C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6655 2d90 B3F80330 		ldrh	r3, [r3, #3]	@ unaligned
 6656 2d94 9BB2     		uxth	r3, r3
 6657 2d96 1A46     		mov	r2, r3
 6658 2d98 7B68     		ldr	r3, [r7, #4]
 6659 2d9a B3F80330 		ldrh	r3, [r3, #3]	@ unaligned
 6660 2d9e 9BB2     		uxth	r3, r3
 6661 2da0 D31A     		subs	r3, r2, r3
 6662 2da2 2CE0     		b	.L317
 6663              	.L318:
2855:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } else if (ieee154e_vars.asn.bytes2and3-someASN->bytes2and3==1) {
 6664              		.loc 1 2855 0
 6665 2da4 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6666 2da8 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6667 2dac B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 6668 2db0 9BB2     		uxth	r3, r3
 6669 2db2 1A46     		mov	r2, r3
 6670 2db4 7B68     		ldr	r3, [r7, #4]
 6671 2db6 B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 6672 2dba 9BB2     		uxth	r3, r3
 6673 2dbc D31A     		subs	r3, r2, r3
 6674 2dbe 012B     		cmp	r3, #1
 6675 2dc0 17D1     		bne	.L319
2856:openstack/02a-MAClow/IEEE802154Ecsl.c ****       diff  = ieee154e_vars.asn.bytes0and1;
 6676              		.loc 1 2856 0
 6677 2dc2 40F20003 		movw	r3, #:lower16:ieee154e_vars
 6678 2dc6 C0F20003 		movt	r3, #:upper16:ieee154e_vars
 6679 2dca B3F80330 		ldrh	r3, [r3, #3]	@ unaligned
 6680 2dce 9BB2     		uxth	r3, r3
 6681 2dd0 FB60     		str	r3, [r7, #12]
2857:openstack/02a-MAClow/IEEE802154Ecsl.c ****       diff += 0xffff-someASN->bytes0and1;
 6682              		.loc 1 2857 0
 6683 2dd2 7B68     		ldr	r3, [r7, #4]
 6684 2dd4 B3F80330 		ldrh	r3, [r3, #3]	@ unaligned
 6685 2dd8 9BB2     		uxth	r3, r3
 6686 2dda FA68     		ldr	r2, [r7, #12]
 6687 2ddc D31A     		subs	r3, r2, r3
 6688 2dde 03F57F43 		add	r3, r3, #65280
 6689 2de2 03F1FF03 		add	r3, r3, #255
 6690 2de6 FB60     		str	r3, [r7, #12]
2858:openstack/02a-MAClow/IEEE802154Ecsl.c ****       diff += 1;
 6691              		.loc 1 2858 0
 6692 2de8 FB68     		ldr	r3, [r7, #12]
 6693 2dea 03F10103 		add	r3, r3, #1
 6694 2dee FB60     		str	r3, [r7, #12]
 6695 2df0 02E0     		b	.L320
 6696              	.L319:
2859:openstack/02a-MAClow/IEEE802154Ecsl.c ****    } else {
2860:openstack/02a-MAClow/IEEE802154Ecsl.c ****       diff = (PORT_RADIOTIMER_WIDTH)0xFFFFFFFF;;
 6697              		.loc 1 2860 0
 6698 2df2 4FF0FF33 		mov	r3, #-1
 6699 2df6 FB60     		str	r3, [r7, #12]
 6700              	.L320:
2861:openstack/02a-MAClow/IEEE802154Ecsl.c ****    }
2862:openstack/02a-MAClow/IEEE802154Ecsl.c ****    ENABLE_INTERRUPTS();
 6701              		.loc 1 2862 0
 6702 2df8 FFF7FEFF 		bl	IntMasterEnable
2863:openstack/02a-MAClow/IEEE802154Ecsl.c ****    return diff;
 6703              		.loc 1 2863 0
 6704 2dfc FB68     		ldr	r3, [r7, #12]
 6705              	.L317:
2864:openstack/02a-MAClow/IEEE802154Ecsl.c **** }
 6706              		.loc 1 2864 0
 6707 2dfe 1846     		mov	r0, r3
 6708 2e00 07F11007 		add	r7, r7, #16
 6709 2e04 BD46     		mov	sp, r7
 6710 2e06 80BD     		pop	{r7, pc}
 6711              		.cfi_endproc
 6712              	.LFE73:
 6714              	.Letext0:
 6715              		.file 2 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
 6716              		.file 3 "inc/opendefs.h"
 6717              		.file 4 "openstack/02b-MAChigh/schedule.h"
 6718              		.file 5 "openstack/02b-MAChigh/processIE.h"
 6719              		.file 6 "drivers/common/opentimers.h"
 6720              		.file 7 "openstack/02a-MAClow/IEEE802154Ecsl.h"
 6721              		.file 8 "openstack/02a-MAClow/IEEE802154.h"
 6722              		.file 9 "kernel/scheduler.h"
 6723              		.file 10 "bsp/boards/OpenMote-CC2538/board_info.h"
 6724              		.file 11 "openstack/03b-IPv6/icmpv6rpl.h"
DEFINED SYMBOLS
                            *ABS*:00000000 IEEE802154Ecsl.c
     /tmp/ccqgXIj0.s:19     .rodata:00000000 $d
     /tmp/ccqgXIj0.s:22     .rodata:00000000 rreg_uriquery
     /tmp/ccqgXIj0.s:27     .rodata:00000008 infoBoardname
     /tmp/ccqgXIj0.s:32     .rodata:00000010 infouCName
     /tmp/ccqgXIj0.s:37     .rodata:00000018 infoRadioName
     /tmp/ccqgXIj0.s:42     .rodata:00000024 infoStackName
     /tmp/ccqgXIj0.s:47     .rodata:00000030 all_routers_multicast
                            *COM*:0000004c ieee154e_vars
                            *COM*:0000000f ieee154e_stats
                            *COM*:00000014 ieee154e_dbg
     /tmp/ccqgXIj0.s:68     .text:00000000 $t
     /tmp/ccqgXIj0.s:73     .text:00000000 ieee154e_init
     /tmp/ccqgXIj0.s:5339   .text:0000248c changeIsSync
     /tmp/ccqgXIj0.s:5507   .text:00002564 resetStats
     /tmp/ccqgXIj0.s:186    .text:00000108 isr_ieee154ecsl_newChannelSample
     /tmp/ccqgXIj0.s:247    .text:0000016c isr_ieee154ecsl_timer
     /tmp/ccqgXIj0.s:511    .text:00000368 ieee154ecsl_startOfFrame
     /tmp/ccqgXIj0.s:662    .text:0000049c ieee154ecsl_endOfFrame
     /tmp/ccqgXIj0.s:805    .text:00000598 isr_ieee154ecsl_txtimer_cb
     /tmp/ccqgXIj0.s:855    .text:000005dc isr_ieee154ecsl_addPacketToQueueForTestingCslTx_cb
     /tmp/ccqgXIj0.s:2579   .text:000011b0 activity_csl_wakeup_ri1
     /tmp/ccqgXIj0.s:278    .text:00000198 $d
     /tmp/ccqgXIj0.s:2647   .text:00001220 activity_csl_wakeup_ri2
     /tmp/ccqgXIj0.s:296    .text:000001d8 $t
     /tmp/ccqgXIj0.s:2697   .text:00001270 activity_csl_wakeup_rie1
     /tmp/ccqgXIj0.s:2738   .text:000012a0 activity_csl_wakeup_ri3
     /tmp/ccqgXIj0.s:2774   .text:000012c8 activity_csl_wakeup_rie2
     /tmp/ccqgXIj0.s:2852   .text:0000131c activity_csl_wakeup_rie3
     /tmp/ccqgXIj0.s:2893   .text:0000134c activity_csl_wakeup_rie4
     /tmp/ccqgXIj0.s:3251   .text:00001644 activity_csl_data_ri2
     /tmp/ccqgXIj0.s:3301   .text:00001694 activity_csl_data_rie1
     /tmp/ccqgXIj0.s:3342   .text:000016c4 activity_csl_data_ri3
     /tmp/ccqgXIj0.s:3378   .text:000016ec activity_csl_data_rie2
     /tmp/ccqgXIj0.s:3456   .text:00001740 activity_csl_data_rie3
     /tmp/ccqgXIj0.s:3851   .text:00001a74 activity_csl_data_ri6
     /tmp/ccqgXIj0.s:4084   .text:00001c90 activity_csl_data_rie4
     /tmp/ccqgXIj0.s:4125   .text:00001cc0 activity_csl_data_ri7
     /tmp/ccqgXIj0.s:4161   .text:00001ce8 activity_csl_data_rie5
     /tmp/ccqgXIj0.s:4249   .text:00001d54 activity_csl_data_rie6
     /tmp/ccqgXIj0.s:5885   .text:00002808 endOps
     /tmp/ccqgXIj0.s:397    .text:0000028c $d
     /tmp/ccqgXIj0.s:1168   .text:0000084c activity_csl_wakeup_ti2
     /tmp/ccqgXIj0.s:414    .text:000002c8 $t
     /tmp/ccqgXIj0.s:1360   .text:00000a18 activity_csl_wakeup_tie1
     /tmp/ccqgXIj0.s:1396   .text:00000a40 activity_csl_wakeup_ti3
     /tmp/ccqgXIj0.s:1432   .text:00000a68 activity_csl_wakeup_tie2
     /tmp/ccqgXIj0.s:1515   .text:00000acc activity_csl_wakeup_tie3
     /tmp/ccqgXIj0.s:1616   .text:00000b60 activity_csl_data_ti2
     /tmp/ccqgXIj0.s:1680   .text:00000bd0 activity_csl_data_tie1
     /tmp/ccqgXIj0.s:1718   .text:00000bfc activity_csl_data_ti3
     /tmp/ccqgXIj0.s:1754   .text:00000c24 activity_csl_data_tie2
     /tmp/ccqgXIj0.s:1839   .text:00000c8c activity_csl_data_tie3
     /tmp/ccqgXIj0.s:2003   .text:00000da4 activity_csl_data_ti6
     /tmp/ccqgXIj0.s:2053   .text:00000df4 activity_csl_data_tie4
     /tmp/ccqgXIj0.s:2091   .text:00000e20 activity_csl_data_ti7
     /tmp/ccqgXIj0.s:2127   .text:00000e48 activity_csl_data_tie5
     /tmp/ccqgXIj0.s:2232   .text:00000ee8 activity_csl_data_tie6
     /tmp/ccqgXIj0.s:546    .text:00000398 $d
     /tmp/ccqgXIj0.s:560    .text:000003c8 $t
     /tmp/ccqgXIj0.s:2800   .text:000012d4 activity_csl_wakeup_ri4
     /tmp/ccqgXIj0.s:3404   .text:000016f8 activity_csl_data_ri4
     /tmp/ccqgXIj0.s:4202   .text:00001d18 activity_csl_data_ri8
     /tmp/ccqgXIj0.s:592    .text:0000040c $d
     /tmp/ccqgXIj0.s:605    .text:00000438 $t
     /tmp/ccqgXIj0.s:2185   .text:00000eac activity_csl_data_ti8
     /tmp/ccqgXIj0.s:1468   .text:00000a90 activity_csl_wakeup_ti4
     /tmp/ccqgXIj0.s:1792   .text:00000c50 activity_csl_data_ti4
     /tmp/ccqgXIj0.s:2930   .text:00001374 activity_csl_wakeup_ri5
     /tmp/ccqgXIj0.s:3497   .text:00001770 activity_csl_data_ri5
     /tmp/ccqgXIj0.s:4290   .text:00001d84 activity_csl_data_ri9
     /tmp/ccqgXIj0.s:1551   .text:00000af4 activity_csl_wakeup_ti5
     /tmp/ccqgXIj0.s:1877   .text:00000cb8 activity_csl_data_ti5
     /tmp/ccqgXIj0.s:2258   .text:00000ef4 activity_csl_data_ti9
     /tmp/ccqgXIj0.s:1016   .text:00000714 activity_csl_wakeup_ti1
     /tmp/ccqgXIj0.s:5056   .text:00002260 incrementAsnOffset
     /tmp/ccqgXIj0.s:5630   .text:00002628 changeState
     /tmp/ccqgXIj0.s:4355   .text:00001df0 ieee802154_createWakeUpFrame
     /tmp/ccqgXIj0.s:4967   .text:000021e0 isValidAck
     /tmp/ccqgXIj0.s:6114   .text:000029e8 ieee154e_processIEs
     /tmp/ccqgXIj0.s:4471   .text:00001eb8 ieee802154_retrieveWakeUpFrame
     /tmp/ccqgXIj0.s:4874   .text:00002164 isValidRxFrame
     /tmp/ccqgXIj0.s:5446   .text:00002518 notif_receive
     /tmp/ccqgXIj0.s:5158   .text:00002348 ieee154e_getAsn
     /tmp/ccqgXIj0.s:5235   .text:000023d4 synchronizeAck
     /tmp/ccqgXIj0.s:5569   .text:000025d4 updateStats
     /tmp/ccqgXIj0.s:5392   .text:000024cc notif_sendDone
     /tmp/ccqgXIj0.s:5475   .text:00002534 $d
     /tmp/ccqgXIj0.s:5481   .text:00002544 $t
     /tmp/ccqgXIj0.s:5664   .text:00002654 $d
     /tmp/ccqgXIj0.s:5725   .text:00002740 $t
     /tmp/ccqgXIj0.s:5751   .text:0000275c debugPrint_asn
     /tmp/ccqgXIj0.s:5806   .text:000027b0 debugPrint_isSync
     /tmp/ccqgXIj0.s:5852   .text:000027e8 debugPrint_macStats
     /tmp/ccqgXIj0.s:6083   .text:000029d0 ieee154e_isSynch
     /tmp/ccqgXIj0.s:6502   .text:00002c78 asnStoreFromAdv
     /tmp/ccqgXIj0.s:6458   .text:00002c40 joinPriorityStoreFromAdv
     /tmp/ccqgXIj0.s:6603   .text:00002d3c ieee154e_asnDiff
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e96eee74da26538b12ac9582e3798382
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.toolchain_defs.h.2.e4ebbe6e0a48032a9b79077dc42e1ffd
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.string.h.17.f8d12df81104836a3f2a5d589ae830d8
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.board_info.h.21.2f0cbb5ab4c556c54c487f727dca8532
                           .group:00000000 wm4.opendefs.h.19.05852eb648ac65e48c7817e5cbf03346
                           .group:00000000 wm4.schedule.h.2.74f699399ee9cbf3b59178f1204d8511
                           .group:00000000 wm4.processIE.h.2.1848f1e3c653035e9779472584ce0441
                           .group:00000000 wm4.opentimers.h.8.044f2d040a134cdb0ddb58adfc2508be
                           .group:00000000 wm4.IEEE802154Ecsl.h.21.a46c6cdefbea13cd7501756681c86a21
                           .group:00000000 wm4.idmanager.h.2.8c0e2159b32ef3125cbb1e984805cbfe
                           .group:00000000 wm4.openserial.h.8.8c63e3800d2936b44b5370ce1aae62b7
                           .group:00000000 wm4.scheduler.h.2.ca320b72942c5204a6e225e3c9c0814e
                           .group:00000000 wm4.icmpv6rpl.h.2.0ce84dbe8c203c7079b39e7e96c7c01e
                           .group:00000000 wm4.neighbors.h.15.9f35f180a0332d1bc442efb0ec51905c
                           .group:00000000 wm4.sixtop.h.2.0b8613e8e48e9109b53e6143f3ed1895

UNDEFINED SYMBOLS
memset
idmanager_getIsDAGroot
radio_rfOn
radio_setOverflowCb
radio_setCompareCb
radio_setStartFrameCb
radio_setEndFrameCb
opentimers_start
radio_startTimer
radio_setTimerPeriod
openserial_printInfo
openserial_printError
leds_all_off
openqueue_macGetDataPacket
openqueue_getFreePacketBuffer
ieee802154_prependHeader
packetfunctions_reserveFooterSize
debugpins_slot_toggle
debugpins_frame_toggle
schedule_advanceSlot
openserial_stop
schedule_getType
schedule_getOkToSend
schedule_getNeighbor
radiotimer_schedule
radio_loadPacket
radio_txEnable
radio_getTimerValue
radio_txNow
radiotimer_cancel
radio_rfOff
packetfunctions_isBroadcastMulticast
leds_sync_blink
schedule_indicateTx
radio_rxEnable
radio_rxNow
radio_getReceivedFrame
packetfunctions_tossFooter
ieee802154_retrieveHeader
packetfunctions_tossHeader
openqueue_freePacketBuffer
radio_getWakeUpFrame
packetfunctions_sameAddress
idmanager_getMyID
packetfunctions_reserveHeaderSize
packetfunctions_writeAddress
packetfunctions_mac64bToMac16b
packetfunctions_readAddress
idmanager_isMyAddress
schedule_getFrameLength
radio_getTimerPeriod
adaptive_sync_indicateTimeCorrection
leds_sync_on
leds_sync_off
schedule_resetBackoff
task_sixtopNotifSendDone
scheduler_push_task
leds_radio_toggle
leds_sync_toggle
leds_error_toggle
debugpins_fsm_set
debugpins_fsm_clr
debugpins_fsm_toggle
openserial_printStatus
processIE_retrieveSlotframeLinkIE
neighbors_isPreferredParent
schedule_syncSlotOffset
schedule_getNextActiveSlotOffset
schedule_getChannelOffset
IntMasterDisable
IntMasterEnable
