   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"interrupt.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  22              	g_pui32Priority:
  23 0000 00070000 		.word	1792
  24 0004 00060000 		.word	1536
  25 0008 00050000 		.word	1280
  26 000c 00040000 		.word	1024
  27 0010 00030000 		.word	768
  28 0014 00020000 		.word	512
  29 0018 00010000 		.word	256
  30 001c 00000000 		.word	0
  31              		.align	2
  34              	g_pui32Regs:
  35 0020 00000000 		.word	0
  36 0024 18ED00E0 		.word	-536810216
  37 0028 1CED00E0 		.word	-536810212
  38 002c 20ED00E0 		.word	-536810208
  39 0030 00E400E0 		.word	-536812544
  40 0034 04E400E0 		.word	-536812540
  41 0038 08E400E0 		.word	-536812536
  42 003c 0CE400E0 		.word	-536812532
  43 0040 10E400E0 		.word	-536812528
  44 0044 14E400E0 		.word	-536812524
  45 0048 18E400E0 		.word	-536812520
  46 004c 1CE400E0 		.word	-536812516
  47 0050 20E400E0 		.word	-536812512
  48 0054 24E400E0 		.word	-536812508
  49 0058 28E400E0 		.word	-536812504
  50 005c 2CE400E0 		.word	-536812500
  51 0060 30E400E0 		.word	-536812496
  52 0064 34E400E0 		.word	-536812492
  53 0068 38E400E0 		.word	-536812488
  54 006c 3CE400E0 		.word	-536812484
  55 0070 40E400E0 		.word	-536812480
  56 0074 44E400E0 		.word	-536812476
  57 0078 48E400E0 		.word	-536812472
  58 007c 4CE400E0 		.word	-536812468
  59 0080 50E400E0 		.word	-536812464
  60 0084 54E400E0 		.word	-536812460
  61 0088 58E400E0 		.word	-536812456
  62 008c 5CE400E0 		.word	-536812452
  63 0090 60E400E0 		.word	-536812448
  64 0094 64E400E0 		.word	-536812444
  65 0098 68E400E0 		.word	-536812440
  66 009c 6CE400E0 		.word	-536812436
  67 00a0 70E400E0 		.word	-536812432
  68 00a4 74E400E0 		.word	-536812428
  69 00a8 78E400E0 		.word	-536812424
  70 00ac 7CE400E0 		.word	-536812420
  71 00b0 80E400E0 		.word	-536812416
  72 00b4 84E400E0 		.word	-536812412
  73 00b8 88E400E0 		.word	-536812408
  74 00bc 8CE400E0 		.word	-536812404
  75 00c0 90E400E0 		.word	-536812400
  76              		.align	2
  79              	g_pui32EnRegs:
  80 00c4 00E100E0 		.word	-536813312
  81 00c8 04E100E0 		.word	-536813308
  82 00cc 08E100E0 		.word	-536813304
  83 00d0 0CE100E0 		.word	-536813300
  84 00d4 10E100E0 		.word	-536813296
  85              		.align	2
  88              	g_pui32DisRegs:
  89 00d8 80E100E0 		.word	-536813184
  90 00dc 84E100E0 		.word	-536813180
  91 00e0 88E100E0 		.word	-536813176
  92 00e4 8CE100E0 		.word	-536813172
  93 00e8 90E100E0 		.word	-536813168
  94              		.align	2
  97              	g_pui32PendRegs:
  98 00ec 00E200E0 		.word	-536813056
  99 00f0 04E200E0 		.word	-536813052
 100 00f4 08E200E0 		.word	-536813048
 101 00f8 0CE200E0 		.word	-536813044
 102 00fc 10E200E0 		.word	-536813040
 103              		.align	2
 106              	g_pui32UnpendRegs:
 107 0100 80E200E0 		.word	-536812928
 108 0104 84E200E0 		.word	-536812924
 109 0108 88E200E0 		.word	-536812920
 110 010c 8CE200E0 		.word	-536812916
 111 0110 90E200E0 		.word	-536812912
 112              		.text
 113              		.align	2
 114              		.thumb
 115              		.thumb_func
 117              	IntDefaultHandler:
 118              	.LFB0:
 119              		.file 1 "bsp/boards/OpenMote-CC2538/source/interrupt.c"
   1:bsp/boards/OpenMote-CC2538/source/interrupt.c **** /******************************************************************************
   2:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  Filename:       interrupt.c
   3:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  Revised:        $Date: 2013-03-20 14:47:53 +0100 (Wed, 20 Mar 2013) $
   4:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  Revision:       $Revision: 9489 $
   5:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *
   6:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  Description:    Driver for the NVIC Interrupt Controller.
   7:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *
   8:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *
  10:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *
  11:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  Redistribution and use in source and binary forms, with or without
  12:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  modification, are permitted provided that the following conditions
  13:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  are met:
  14:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *
  15:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *    Redistributions of source code must retain the above copyright
  16:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *    notice, this list of conditions and the following disclaimer.
  17:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *
  18:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *    Redistributions in binary form must reproduce the above copyright
  19:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *    notice, this list of conditions and the following disclaimer in the
  20:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *    documentation and/or other materials provided with the distribution.
  21:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *
  22:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *    its contributors may be used to endorse or promote products derived
  24:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *    from this software without specific prior written permission.
  25:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *
  26:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:bsp/boards/OpenMote-CC2538/source/interrupt.c **** *
  38:bsp/boards/OpenMote-CC2538/source/interrupt.c **** ******************************************************************************/
  39:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
  40:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
  41:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
  42:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \addtogroup interrupt_api
  43:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! @{
  44:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
  45:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
  46:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
  47:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #include <headers/hw_ints.h>
  48:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #include <headers/hw_nvic.h>
  49:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #include <headers/hw_sys_ctrl.h>
  50:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #include "cpu.h"
  51:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #include "debug.h"
  52:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #include "interrupt.h"
  53:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
  54:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
  55:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
  56:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // This is a mapping between priority grouping encodings and the number of
  57:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // preemption priority bits.
  58:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
  59:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
  60:bsp/boards/OpenMote-CC2538/source/interrupt.c **** static const uint32_t g_pui32Priority[] =
  61:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
  62:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_APINT_PRIGROUP_0_8, NVIC_APINT_PRIGROUP_1_7, NVIC_APINT_PRIGROUP_2_6,
  63:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_APINT_PRIGROUP_3_5, NVIC_APINT_PRIGROUP_4_4, NVIC_APINT_PRIGROUP_5_3,
  64:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_APINT_PRIGROUP_6_2, NVIC_APINT_PRIGROUP_7_1
  65:bsp/boards/OpenMote-CC2538/source/interrupt.c **** };
  66:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
  67:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
  68:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
  69:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // This is a mapping between interrupt number and the register that contains
  70:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // the priority encoding for that interrupt.
  71:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
  72:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
  73:bsp/boards/OpenMote-CC2538/source/interrupt.c **** static const uint32_t g_pui32Regs[] =
  74:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
  75:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     0, NVIC_SYS_PRI1, NVIC_SYS_PRI2, NVIC_SYS_PRI3, NVIC_PRI0,  NVIC_PRI1,
  76:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_PRI2,  NVIC_PRI3,  NVIC_PRI4,  NVIC_PRI5,  NVIC_PRI6,  NVIC_PRI7,
  77:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_PRI8,  NVIC_PRI9,  NVIC_PRI10, NVIC_PRI11, NVIC_PRI12, NVIC_PRI13,
  78:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_PRI14, NVIC_PRI15, NVIC_PRI16, NVIC_PRI17, NVIC_PRI18, NVIC_PRI19,
  79:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_PRI20, NVIC_PRI21, NVIC_PRI22, NVIC_PRI23, NVIC_PRI24, NVIC_PRI25,
  80:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_PRI26, NVIC_PRI27, NVIC_PRI28, NVIC_PRI29, NVIC_PRI30, NVIC_PRI31,
  81:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_PRI32, NVIC_PRI33, NVIC_PRI34, NVIC_PRI35, NVIC_PRI36
  82:bsp/boards/OpenMote-CC2538/source/interrupt.c **** };
  83:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
  84:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
  85:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
  86:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // This is a mapping between interrupt number (for the peripheral interrupts
  87:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // only) and the register that contains the interrupt enable for that
  88:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // interrupt.
  89:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
  90:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
  91:bsp/boards/OpenMote-CC2538/source/interrupt.c **** static const uint32_t g_pui32EnRegs[] =
  92:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
  93:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_EN0, NVIC_EN1, NVIC_EN2, NVIC_EN3, NVIC_EN4
  94:bsp/boards/OpenMote-CC2538/source/interrupt.c **** };
  95:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
  96:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
  97:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
  98:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // This is a mapping between interrupt number (for the peripheral interrupts
  99:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // only) and the register that contains the interrupt disable for that
 100:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // interrupt.
 101:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 102:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 103:bsp/boards/OpenMote-CC2538/source/interrupt.c **** static const uint32_t g_pui32DisRegs[] =
 104:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 105:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_DIS0, NVIC_DIS1, NVIC_DIS2, NVIC_DIS3, NVIC_DIS4
 106:bsp/boards/OpenMote-CC2538/source/interrupt.c **** };
 107:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 108:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 109:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 110:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // This is a mapping between interrupt number (for the peripheral interrupts
 111:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // only) and the register that contains the interrupt pend for that interrupt.
 112:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 113:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 114:bsp/boards/OpenMote-CC2538/source/interrupt.c **** static const uint32_t g_pui32PendRegs[] =
 115:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 116:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_PEND0, NVIC_PEND1, NVIC_PEND2, NVIC_PEND3, NVIC_PEND4
 117:bsp/boards/OpenMote-CC2538/source/interrupt.c **** };
 118:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 119:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 120:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 121:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // This is a mapping between interrupt number (for the peripheral interrupts
 122:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // only) and the register that contains the interrupt unpend for that
 123:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // interrupt.
 124:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 125:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 126:bsp/boards/OpenMote-CC2538/source/interrupt.c **** static const uint32_t g_pui32UnpendRegs[] =
 127:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 128:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     NVIC_UNPEND0, NVIC_UNPEND1, NVIC_UNPEND2, NVIC_UNPEND3, NVIC_UNPEND4
 129:bsp/boards/OpenMote-CC2538/source/interrupt.c **** };
 130:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 131:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 132:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 133:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \internal
 134:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! The default interrupt handler
 135:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 136:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This is the default interrupt handler for all interrupts.  It simply loops
 137:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! forever so that the system state is preserved for observation by a
 138:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! debugger.  Since interrupts should be disabled before unregistering the
 139:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! corresponding handler, this should never be called.
 140:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 141:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 142:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 143:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 144:bsp/boards/OpenMote-CC2538/source/interrupt.c **** static void
 145:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntDefaultHandler(void)
 146:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 120              		.loc 1 146 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 0000 80B4     		push	{r7}
 126              	.LCFI0:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
 129 0002 00AF     		add	r7, sp, #0
 130              	.LCFI1:
 131              		.cfi_def_cfa_register 7
 132              	.L2:
 147:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 148:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Go into an infinite loop.
 149:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 150:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     while(1)
 151:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 152:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 133              		.loc 1 152 0 discriminator 1
 134 0004 FEE7     		b	.L2
 135              		.cfi_endproc
 136              	.LFE0:
 138              		.section	vtable,"aw",%progbits
 139              		.align	10
 142              	g_pfnRAMVectors:
 143 0000 00000000 		.space	652
 143      00000000 
 143      00000000 
 143      00000000 
 143      00000000 
 144 028c 00000000 		.text
 144      00000000 
 144      00000000 
 144      00000000 
 144      00000000 
 145 0006 00BF     		.align	2
 146              		.global	IntMasterEnable
 147              		.thumb
 148              		.thumb_func
 150              	IntMasterEnable:
 151              	.LFB1:
 153:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 154:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 155:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 156:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 157:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // The processor vector table
 158:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 159:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // This contains a list of the handlers for the various interrupt sources in
 160:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // the system.  The layout of this list is defined by the hardware; assertion
 161:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // of an interrupt causes the processor to start executing directly at the
 162:bsp/boards/OpenMote-CC2538/source/interrupt.c **** // address given in the corresponding location in this list.
 163:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 164:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 165:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #if defined(__ICCARM__)
 166:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #pragma data_alignment=1024
 167:bsp/boards/OpenMote-CC2538/source/interrupt.c **** static __no_init void (*g_pfnRAMVectors[NUM_INTERRUPTS])(void) @ "VTABLE";
 168:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #elif defined(__TI_COMPILER_VERSION__) || defined(DOXYGEN)
 169:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #pragma DATA_ALIGN(g_pfnRAMVectors, 1024)
 170:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #pragma DATA_SECTION(g_pfnRAMVectors, ".vtable")
 171:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void (*g_pfnRAMVectors[NUM_INTERRUPTS])(void);
 172:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #else
 173:bsp/boards/OpenMote-CC2538/source/interrupt.c **** static __attribute__((section("vtable")))
 174:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void (*g_pfnRAMVectors[NUM_INTERRUPTS])(void) __attribute__((aligned(1024)));
 175:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #endif
 176:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 177:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 178:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 179:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Enables the processor interrupt
 180:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 181:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function allows the processor to respond to interrupts.  This does not
 182:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! affect the set of interrupts enabled in the interrupt controller; it just
 183:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! gates the single interrupt from the controller to the processor.
 184:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 185:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return Returns \b true if interrupts were disabled when the function was
 186:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! called or \b false if they were initially enabled.
 187:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 188:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 189:bsp/boards/OpenMote-CC2538/source/interrupt.c **** bool
 190:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntMasterEnable(void)
 191:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 152              		.loc 1 191 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156 0008 80B5     		push	{r7, lr}
 157              	.LCFI2:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 7, -8
 160              		.cfi_offset 14, -4
 161 000a 00AF     		add	r7, sp, #0
 162              	.LCFI3:
 163              		.cfi_def_cfa_register 7
 192:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 193:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Enable processor interrupts.
 194:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 195:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     return(CPUcpsie());
 164              		.loc 1 195 0
 165 000c FFF7FEFF 		bl	CPUcpsie
 166 0010 0346     		mov	r3, r0
 167 0012 002B     		cmp	r3, #0
 168 0014 0CBF     		ite	eq
 169 0016 0023     		moveq	r3, #0
 170 0018 0123     		movne	r3, #1
 171 001a DBB2     		uxtb	r3, r3
 196:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 172              		.loc 1 196 0
 173 001c 1846     		mov	r0, r3
 174 001e 80BD     		pop	{r7, pc}
 175              		.cfi_endproc
 176              	.LFE1:
 178              		.align	2
 179              		.global	IntMasterDisable
 180              		.thumb
 181              		.thumb_func
 183              	IntMasterDisable:
 184              	.LFB2:
 197:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 198:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 199:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 200:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Disables the processor interrupt
 201:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 202:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function prevents the processor from receiving interrupts. This does
 203:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! not affect the set of interrupts enabled in the interrupt controller; it
 204:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! just gates the single interrupt from the controller to the processor.
 205:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 206:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return Returns \b true if interrupts were already disabled when the
 207:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! function was called or \b false if they were initially enabled.
 208:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 209:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 210:bsp/boards/OpenMote-CC2538/source/interrupt.c **** bool
 211:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntMasterDisable(void)
 212:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 185              		.loc 1 212 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0020 80B5     		push	{r7, lr}
 190              	.LCFI4:
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0022 00AF     		add	r7, sp, #0
 195              	.LCFI5:
 196              		.cfi_def_cfa_register 7
 213:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 214:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Disable processor interrupts.
 215:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 216:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     return(CPUcpsid());
 197              		.loc 1 216 0
 198 0024 FFF7FEFF 		bl	CPUcpsid
 199 0028 0346     		mov	r3, r0
 200 002a 002B     		cmp	r3, #0
 201 002c 0CBF     		ite	eq
 202 002e 0023     		moveq	r3, #0
 203 0030 0123     		movne	r3, #1
 204 0032 DBB2     		uxtb	r3, r3
 217:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 205              		.loc 1 217 0
 206 0034 1846     		mov	r0, r3
 207 0036 80BD     		pop	{r7, pc}
 208              		.cfi_endproc
 209              	.LFE2:
 211              		.align	2
 212              		.global	IntRegister
 213              		.thumb
 214              		.thumb_func
 216              	IntRegister:
 217              	.LFB3:
 218:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 219:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 220:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 221:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Registers a function to be called when an interrupt occurs
 222:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 223:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt in question.
 224:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param pfnHandler is a pointer to the function to be called.
 225:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 226:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function specifies the handler function to be called when the
 227:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! given interrupt is asserted to the processor.  When the interrupt occurs,
 228:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! if it is enabled (through IntEnable()), the handler function is called in
 229:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! interrupt context. Because the handler function can preempt other code, care
 230:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! must be taken to protect memory or peripherals that are accessed by the
 231:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! handler and other nonhandler code.
 232:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 233:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \note This function (directly or indirectly through a peripheral
 234:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! driver interrupt register function) moves the interrupt vector table from
 235:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! flash to SRAM.  Therefore, care must be taken when linking the application
 236:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! to ensure that the SRAM vector table is located at the beginning of SRAM;
 237:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! otherwise NVIC will not look in the correct portion of memory for the
 238:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! vector table (it requires the vector table be on a 1-kB memory alignment).
 239:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Normally, the SRAM vector table is so placed through the use of linker
 240:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! scripts. See the discussion of compile-time versus runtime interrupt handler
 241:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! registration in the introduction to this chapter.
 242:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 243:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 244:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 245:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 246:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void
 247:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntRegister(uint32_t ui32Interrupt, void (*pfnHandler)(void))
 248:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 218              		.loc 1 248 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 16
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222              		@ link register save eliminated.
 223 0038 80B4     		push	{r7}
 224              	.LCFI6:
 225              		.cfi_def_cfa_offset 4
 226              		.cfi_offset 7, -4
 227 003a 85B0     		sub	sp, sp, #20
 228              	.LCFI7:
 229              		.cfi_def_cfa_offset 24
 230 003c 00AF     		add	r7, sp, #0
 231              	.LCFI8:
 232              		.cfi_def_cfa_register 7
 233 003e 7860     		str	r0, [r7, #4]
 234 0040 3960     		str	r1, [r7, #0]
 249:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     uint32_t ui32Idx, ui32Value;
 250:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 251:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 252:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check the arguments.
 253:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 254:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 255:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 256:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check below could be removed in final application
 257:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #ifdef CC2538_USE_ALTERNATE_INTERRUPT_MAP
 258:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(IntAltMapIsEnabled());
 259:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #else
 260:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(~IntAltMapIsEnabled());
 261:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #endif
 262:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 263:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 264:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Make sure that the RAM vector table is correctly aligned.
 265:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 266:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(((uint32_t)g_pfnRAMVectors & 0x000003ff) == 0);
 267:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 268:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 269:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // See if the RAM vector table has been initialized.
 270:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 271:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     if(HWREG(NVIC_VTABLE) != (uint32_t)g_pfnRAMVectors)
 235              		.loc 1 271 0
 236 0042 4EF60853 		movw	r3, #60680
 237 0046 CEF20003 		movt	r3, 57344
 238 004a 1A68     		ldr	r2, [r3, #0]
 239 004c 40F20003 		movw	r3, #:lower16:g_pfnRAMVectors
 240 0050 C0F20003 		movt	r3, #:upper16:g_pfnRAMVectors
 241 0054 9A42     		cmp	r2, r3
 242 0056 27D0     		beq	.L8
 272:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 273:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 274:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Copy the vector table from the beginning of FLASH to the RAM vector
 275:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // table.
 276:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 277:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         ui32Value = HWREG(NVIC_VTABLE);
 243              		.loc 1 277 0
 244 0058 4EF60853 		movw	r3, #60680
 245 005c CEF20003 		movt	r3, 57344
 246 0060 1B68     		ldr	r3, [r3, #0]
 247 0062 BB60     		str	r3, [r7, #8]
 278:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         for(ui32Idx = 0; ui32Idx < NUM_INTERRUPTS; ui32Idx++)
 248              		.loc 1 278 0
 249 0064 4FF00003 		mov	r3, #0
 250 0068 FB60     		str	r3, [r7, #12]
 251 006a 11E0     		b	.L9
 252              	.L10:
 279:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         {
 280:bsp/boards/OpenMote-CC2538/source/interrupt.c ****             g_pfnRAMVectors[ui32Idx] = (void (*)(void))HWREG((ui32Idx * 4) +
 253              		.loc 1 280 0 discriminator 2
 254 006c FB68     		ldr	r3, [r7, #12]
 255 006e 4FEA8302 		lsl	r2, r3, #2
 256 0072 BB68     		ldr	r3, [r7, #8]
 257 0074 D318     		adds	r3, r2, r3
 258 0076 1B68     		ldr	r3, [r3, #0]
 259 0078 1946     		mov	r1, r3
 260 007a 40F20003 		movw	r3, #:lower16:g_pfnRAMVectors
 261 007e C0F20003 		movt	r3, #:upper16:g_pfnRAMVectors
 262 0082 FA68     		ldr	r2, [r7, #12]
 263 0084 43F82210 		str	r1, [r3, r2, lsl #2]
 278:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         for(ui32Idx = 0; ui32Idx < NUM_INTERRUPTS; ui32Idx++)
 264              		.loc 1 278 0 discriminator 2
 265 0088 FB68     		ldr	r3, [r7, #12]
 266 008a 03F10103 		add	r3, r3, #1
 267 008e FB60     		str	r3, [r7, #12]
 268              	.L9:
 278:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         for(ui32Idx = 0; ui32Idx < NUM_INTERRUPTS; ui32Idx++)
 269              		.loc 1 278 0 is_stmt 0 discriminator 1
 270 0090 FB68     		ldr	r3, [r7, #12]
 271 0092 A22B     		cmp	r3, #162
 272 0094 EAD9     		bls	.L10
 281:bsp/boards/OpenMote-CC2538/source/interrupt.c ****                                        ui32Value);
 282:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         }
 283:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 284:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 285:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Point NVIC at the RAM vector table.
 286:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 287:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_VTABLE) = (uint32_t)g_pfnRAMVectors;
 273              		.loc 1 287 0 is_stmt 1
 274 0096 4EF60853 		movw	r3, #60680
 275 009a CEF20003 		movt	r3, 57344
 276 009e 40F20002 		movw	r2, #:lower16:g_pfnRAMVectors
 277 00a2 C0F20002 		movt	r2, #:upper16:g_pfnRAMVectors
 278 00a6 1A60     		str	r2, [r3, #0]
 279              	.L8:
 288:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 289:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 290:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 291:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Save the interrupt handler.
 292:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 293:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     g_pfnRAMVectors[ui32Interrupt] = pfnHandler;
 280              		.loc 1 293 0
 281 00a8 40F20003 		movw	r3, #:lower16:g_pfnRAMVectors
 282 00ac C0F20003 		movt	r3, #:upper16:g_pfnRAMVectors
 283 00b0 7A68     		ldr	r2, [r7, #4]
 284 00b2 3968     		ldr	r1, [r7, #0]
 285 00b4 43F82210 		str	r1, [r3, r2, lsl #2]
 294:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 286              		.loc 1 294 0
 287 00b8 07F11407 		add	r7, r7, #20
 288 00bc BD46     		mov	sp, r7
 289 00be 80BC     		pop	{r7}
 290 00c0 7047     		bx	lr
 291              		.cfi_endproc
 292              	.LFE3:
 294 00c2 00BF     		.align	2
 295              		.global	IntUnregister
 296              		.thumb
 297              		.thumb_func
 299              	IntUnregister:
 300              	.LFB4:
 295:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 296:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 297:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 298:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Unregisters the function to be called when an interrupt occurs
 299:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 300:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt in question.
 301:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 302:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function indicates that no handler should be called when the
 303:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! given interrupt is asserted to the processor.  The interrupt source is
 304:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! automatically disabled (through IntDisable()) if necessary.
 305:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 306:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \sa See IntRegister() for important information about registering interrupt
 307:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! handlers.
 308:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 309:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 310:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 311:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 312:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void
 313:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntUnregister(uint32_t ui32Interrupt)
 314:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 301              		.loc 1 314 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 8
 304              		@ frame_needed = 1, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 306 00c4 80B4     		push	{r7}
 307              	.LCFI9:
 308              		.cfi_def_cfa_offset 4
 309              		.cfi_offset 7, -4
 310 00c6 83B0     		sub	sp, sp, #12
 311              	.LCFI10:
 312              		.cfi_def_cfa_offset 16
 313 00c8 00AF     		add	r7, sp, #0
 314              	.LCFI11:
 315              		.cfi_def_cfa_register 7
 316 00ca 7860     		str	r0, [r7, #4]
 315:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 316:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check the arguments.
 317:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 318:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 319:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 320:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 321:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check that at least one interrupt was dynamically registered
 322:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // (by calling IntRegister())
 323:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 324:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(HWREG(NVIC_VTABLE) == (uint32_t)g_pfnRAMVectors);
 325:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 326:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check below could be removed in final application
 327:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #ifdef CC2538_USE_ALTERNATE_INTERRUPT_MAP
 328:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(IntAltMapIsEnabled());
 329:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #else
 330:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(~IntAltMapIsEnabled());
 331:bsp/boards/OpenMote-CC2538/source/interrupt.c **** #endif
 332:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 333:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 334:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 335:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Reset the interrupt handler.
 336:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 337:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     g_pfnRAMVectors[ui32Interrupt] = IntDefaultHandler;
 317              		.loc 1 337 0
 318 00cc 40F20003 		movw	r3, #:lower16:g_pfnRAMVectors
 319 00d0 C0F20003 		movt	r3, #:upper16:g_pfnRAMVectors
 320 00d4 7968     		ldr	r1, [r7, #4]
 321 00d6 40F20002 		movw	r2, #:lower16:IntDefaultHandler
 322 00da C0F20002 		movt	r2, #:upper16:IntDefaultHandler
 323 00de 43F82120 		str	r2, [r3, r1, lsl #2]
 338:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 324              		.loc 1 338 0
 325 00e2 07F10C07 		add	r7, r7, #12
 326 00e6 BD46     		mov	sp, r7
 327 00e8 80BC     		pop	{r7}
 328 00ea 7047     		bx	lr
 329              		.cfi_endproc
 330              	.LFE4:
 332              		.align	2
 333              		.global	IntPriorityGroupingSet
 334              		.thumb
 335              		.thumb_func
 337              	IntPriorityGroupingSet:
 338              	.LFB5:
 339:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 340:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 341:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 342:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Sets the priority grouping of the interrupt controller
 343:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 344:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui32Bits specifies the number of bits of preemptable priority.
 345:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 346:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function specifies the split between preemptable priority levels and
 347:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! subpriority levels in the interrupt priority specification.  The range of
 348:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! the grouping values depend on the hardware implementation; on
 349:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! the CC2538 device family, 3 bits are available for hardware interrupt
 350:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! prioritization and therefore priority grouping values of three through
 351:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! seven have the same effect.
 352:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 353:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 354:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 355:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 356:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void
 357:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntPriorityGroupingSet(uint32_t ui32Bits)
 358:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 339              		.loc 1 358 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 8
 342              		@ frame_needed = 1, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 344 00ec 80B4     		push	{r7}
 345              	.LCFI12:
 346              		.cfi_def_cfa_offset 4
 347              		.cfi_offset 7, -4
 348 00ee 83B0     		sub	sp, sp, #12
 349              	.LCFI13:
 350              		.cfi_def_cfa_offset 16
 351 00f0 00AF     		add	r7, sp, #0
 352              	.LCFI14:
 353              		.cfi_def_cfa_register 7
 354 00f2 7860     		str	r0, [r7, #4]
 359:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 360:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check the arguments.
 361:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 362:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(ui32Bits < NUM_PRIORITY);
 363:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 364:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 365:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Set the priority grouping.
 366:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 367:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     HWREG(NVIC_APINT) = NVIC_APINT_VECTKEY | g_pui32Priority[ui32Bits];
 355              		.loc 1 367 0
 356 00f4 4EF60C53 		movw	r3, #60684
 357 00f8 CEF20003 		movt	r3, 57344
 358 00fc 40F20002 		movw	r2, #:lower16:g_pui32Priority
 359 0100 C0F20002 		movt	r2, #:upper16:g_pui32Priority
 360 0104 7968     		ldr	r1, [r7, #4]
 361 0106 52F82120 		ldr	r2, [r2, r1, lsl #2]
 362 010a 42F0BF62 		orr	r2, r2, #100139008
 363 010e 42F40032 		orr	r2, r2, #131072
 364 0112 1A60     		str	r2, [r3, #0]
 368:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 365              		.loc 1 368 0
 366 0114 07F10C07 		add	r7, r7, #12
 367 0118 BD46     		mov	sp, r7
 368 011a 80BC     		pop	{r7}
 369 011c 7047     		bx	lr
 370              		.cfi_endproc
 371              	.LFE5:
 373 011e 00BF     		.align	2
 374              		.global	IntPriorityGroupingGet
 375              		.thumb
 376              		.thumb_func
 378              	IntPriorityGroupingGet:
 379              	.LFB6:
 369:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 370:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 371:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 372:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Gets the priority grouping of the interrupt controller
 373:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 374:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function returns the split between preemptable priority levels and
 375:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! subpriority levels in the interrupt priority specification.
 376:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 377:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return Returns the number of bits of preemptable priority
 378:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 379:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 380:bsp/boards/OpenMote-CC2538/source/interrupt.c **** uint32_t
 381:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntPriorityGroupingGet(void)
 382:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 380              		.loc 1 382 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 8
 383              		@ frame_needed = 1, uses_anonymous_args = 0
 384              		@ link register save eliminated.
 385 0120 80B4     		push	{r7}
 386              	.LCFI15:
 387              		.cfi_def_cfa_offset 4
 388              		.cfi_offset 7, -4
 389 0122 83B0     		sub	sp, sp, #12
 390              	.LCFI16:
 391              		.cfi_def_cfa_offset 16
 392 0124 00AF     		add	r7, sp, #0
 393              	.LCFI17:
 394              		.cfi_def_cfa_register 7
 383:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     uint32_t ui32Loop, ui32Value;
 384:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 385:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 386:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Read the priority grouping.
 387:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 388:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ui32Value = HWREG(NVIC_APINT) & NVIC_APINT_PRIGROUP_M;
 395              		.loc 1 388 0
 396 0126 4EF60C53 		movw	r3, #60684
 397 012a CEF20003 		movt	r3, 57344
 398 012e 1B68     		ldr	r3, [r3, #0]
 399 0130 03F4E063 		and	r3, r3, #1792
 400 0134 3B60     		str	r3, [r7, #0]
 389:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 390:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 391:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Loop through the priority grouping values.
 392:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 393:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     for(ui32Loop = 0; ui32Loop < NUM_PRIORITY; ui32Loop++)
 401              		.loc 1 393 0
 402 0136 4FF00003 		mov	r3, #0
 403 013a 7B60     		str	r3, [r7, #4]
 404 013c 0DE0     		b	.L14
 405              	.L17:
 394:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 395:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 396:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Stop looping if this value matches.
 397:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 398:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         if(ui32Value == g_pui32Priority[ui32Loop])
 406              		.loc 1 398 0
 407 013e 40F20003 		movw	r3, #:lower16:g_pui32Priority
 408 0142 C0F20003 		movt	r3, #:upper16:g_pui32Priority
 409 0146 7A68     		ldr	r2, [r7, #4]
 410 0148 53F82220 		ldr	r2, [r3, r2, lsl #2]
 411 014c 3B68     		ldr	r3, [r7, #0]
 412 014e 9A42     		cmp	r2, r3
 413 0150 07D0     		beq	.L19
 414              	.L15:
 393:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     for(ui32Loop = 0; ui32Loop < NUM_PRIORITY; ui32Loop++)
 415              		.loc 1 393 0
 416 0152 7B68     		ldr	r3, [r7, #4]
 417 0154 03F10103 		add	r3, r3, #1
 418 0158 7B60     		str	r3, [r7, #4]
 419              	.L14:
 393:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     for(ui32Loop = 0; ui32Loop < NUM_PRIORITY; ui32Loop++)
 420              		.loc 1 393 0 is_stmt 0 discriminator 1
 421 015a 7B68     		ldr	r3, [r7, #4]
 422 015c 072B     		cmp	r3, #7
 423 015e EED9     		bls	.L17
 424 0160 00E0     		b	.L16
 425              	.L19:
 399:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         {
 400:bsp/boards/OpenMote-CC2538/source/interrupt.c ****             break;
 426              		.loc 1 400 0 is_stmt 1
 427 0162 00BF     		nop
 428              	.L16:
 401:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         }
 402:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 403:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 404:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 405:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Return the number of priority bits.
 406:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 407:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     return(ui32Loop);
 429              		.loc 1 407 0
 430 0164 7B68     		ldr	r3, [r7, #4]
 408:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 431              		.loc 1 408 0
 432 0166 1846     		mov	r0, r3
 433 0168 07F10C07 		add	r7, r7, #12
 434 016c BD46     		mov	sp, r7
 435 016e 80BC     		pop	{r7}
 436 0170 7047     		bx	lr
 437              		.cfi_endproc
 438              	.LFE6:
 440 0172 00BF     		.align	2
 441              		.global	IntPrioritySet
 442              		.thumb
 443              		.thumb_func
 445              	IntPrioritySet:
 446              	.LFB7:
 409:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 410:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 411:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 412:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Sets the priority of an interrupt
 413:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 414:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt in question.
 415:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui8Priority specifies the priority of the interrupt.
 416:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 417:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function sets the priority of an interrupt.  When multiple
 418:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! interrupts are asserted simultaneously, those with the highest priority
 419:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! are processed before the lower priority interrupts.  Smaller numbers
 420:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! correspond to higher interrupt priorities; priority 0 is the highest
 421:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! interrupt priority.
 422:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 423:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! The hardware priority mechanism will looks only at the upper N bits of the
 424:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! priority level (where N is 3 for the CC2538 device family), so any
 425:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! prioritization must be performed in those bits.  The remaining bits can be
 426:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! used to subprioritize the interrupt sources, and may be used by the
 427:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! hardware priority mechanism on a future part.  This arrangement allows
 428:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! priorities to migrate to different NVIC implementations without changing
 429:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! the gross prioritization of the interrupts.
 430:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Thus for CC2538 to set a priority of 3, the parameter \e ui8Priority must
 431:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! be set to (3<<5).
 432:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 433:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 434:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 435:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 436:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void
 437:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntPrioritySet(uint32_t ui32Interrupt, uint8_t ui8Priority)
 438:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 447              		.loc 1 438 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 16
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452 0174 80B4     		push	{r7}
 453              	.LCFI18:
 454              		.cfi_def_cfa_offset 4
 455              		.cfi_offset 7, -4
 456 0176 85B0     		sub	sp, sp, #20
 457              	.LCFI19:
 458              		.cfi_def_cfa_offset 24
 459 0178 00AF     		add	r7, sp, #0
 460              	.LCFI20:
 461              		.cfi_def_cfa_register 7
 462 017a 7860     		str	r0, [r7, #4]
 463 017c 0B46     		mov	r3, r1
 464 017e FB70     		strb	r3, [r7, #3]
 439:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     uint32_t ui32Temp;
 440:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 441:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 442:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check the arguments.
 443:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 444:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT((ui32Interrupt >= 4) && (ui32Interrupt < NUM_INTERRUPTS));
 445:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 446:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 447:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Set the interrupt priority.
 448:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 449:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ui32Temp = HWREG(g_pui32Regs[ui32Interrupt >> 2]);
 465              		.loc 1 449 0
 466 0180 7B68     		ldr	r3, [r7, #4]
 467 0182 4FEA9302 		lsr	r2, r3, #2
 468 0186 40F20003 		movw	r3, #:lower16:g_pui32Regs
 469 018a C0F20003 		movt	r3, #:upper16:g_pui32Regs
 470 018e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 471 0192 1B68     		ldr	r3, [r3, #0]
 472 0194 FB60     		str	r3, [r7, #12]
 450:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ui32Temp &= ~(0xFF << (8 * (ui32Interrupt & 3)));
 473              		.loc 1 450 0
 474 0196 7B68     		ldr	r3, [r7, #4]
 475 0198 03F00303 		and	r3, r3, #3
 476 019c 4FEAC303 		lsl	r3, r3, #3
 477 01a0 4FF0FF02 		mov	r2, #255
 478 01a4 02FA03F3 		lsl	r3, r2, r3
 479 01a8 6FEA0303 		mvn	r3, r3
 480 01ac FA68     		ldr	r2, [r7, #12]
 481 01ae 1340     		ands	r3, r3, r2
 482 01b0 FB60     		str	r3, [r7, #12]
 451:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ui32Temp |= ui8Priority << (8 * (ui32Interrupt & 3));
 483              		.loc 1 451 0
 484 01b2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 485 01b4 7B68     		ldr	r3, [r7, #4]
 486 01b6 03F00303 		and	r3, r3, #3
 487 01ba 4FEAC303 		lsl	r3, r3, #3
 488 01be 02FA03F3 		lsl	r3, r2, r3
 489 01c2 FA68     		ldr	r2, [r7, #12]
 490 01c4 1343     		orrs	r3, r3, r2
 491 01c6 FB60     		str	r3, [r7, #12]
 452:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     HWREG(g_pui32Regs[ui32Interrupt >> 2]) = ui32Temp;
 492              		.loc 1 452 0
 493 01c8 7B68     		ldr	r3, [r7, #4]
 494 01ca 4FEA9302 		lsr	r2, r3, #2
 495 01ce 40F20003 		movw	r3, #:lower16:g_pui32Regs
 496 01d2 C0F20003 		movt	r3, #:upper16:g_pui32Regs
 497 01d6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 498 01da FA68     		ldr	r2, [r7, #12]
 499 01dc 1A60     		str	r2, [r3, #0]
 453:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 500              		.loc 1 453 0
 501 01de 07F11407 		add	r7, r7, #20
 502 01e2 BD46     		mov	sp, r7
 503 01e4 80BC     		pop	{r7}
 504 01e6 7047     		bx	lr
 505              		.cfi_endproc
 506              	.LFE7:
 508              		.align	2
 509              		.global	IntPriorityGet
 510              		.thumb
 511              		.thumb_func
 513              	IntPriorityGet:
 514              	.LFB8:
 454:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 455:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 456:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 457:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Gets the priority of an interrupt
 458:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 459:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt in question.
 460:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 461:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function gets the priority of an interrupt.  See IntPrioritySet() for
 462:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! a definition of the priority value.
 463:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 464:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return Returns the interrupt priority, or -1 if an invalid interrupt was
 465:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! specified
 466:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 467:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 468:bsp/boards/OpenMote-CC2538/source/interrupt.c **** int32_t
 469:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntPriorityGet(uint32_t ui32Interrupt)
 470:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 515              		.loc 1 470 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 8
 518              		@ frame_needed = 1, uses_anonymous_args = 0
 519              		@ link register save eliminated.
 520 01e8 80B4     		push	{r7}
 521              	.LCFI21:
 522              		.cfi_def_cfa_offset 4
 523              		.cfi_offset 7, -4
 524 01ea 83B0     		sub	sp, sp, #12
 525              	.LCFI22:
 526              		.cfi_def_cfa_offset 16
 527 01ec 00AF     		add	r7, sp, #0
 528              	.LCFI23:
 529              		.cfi_def_cfa_register 7
 530 01ee 7860     		str	r0, [r7, #4]
 471:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 472:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check the arguments.
 473:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 474:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT((ui32Interrupt >= 4) && (ui32Interrupt < NUM_INTERRUPTS));
 475:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 476:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 477:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Return the interrupt priority.
 478:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 479:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     return((HWREG(g_pui32Regs[ui32Interrupt >> 2]) >> (8 * (ui32Interrupt & 3))) &
 531              		.loc 1 479 0
 532 01f0 7B68     		ldr	r3, [r7, #4]
 533 01f2 4FEA9302 		lsr	r2, r3, #2
 534 01f6 40F20003 		movw	r3, #:lower16:g_pui32Regs
 535 01fa C0F20003 		movt	r3, #:upper16:g_pui32Regs
 536 01fe 53F82230 		ldr	r3, [r3, r2, lsl #2]
 537 0202 1A68     		ldr	r2, [r3, #0]
 538 0204 7B68     		ldr	r3, [r7, #4]
 539 0206 03F00303 		and	r3, r3, #3
 540 020a 4FEAC303 		lsl	r3, r3, #3
 541 020e 22FA03F3 		lsr	r3, r2, r3
 542 0212 DBB2     		uxtb	r3, r3
 480:bsp/boards/OpenMote-CC2538/source/interrupt.c ****            0xFF);
 481:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 543              		.loc 1 481 0
 544 0214 1846     		mov	r0, r3
 545 0216 07F10C07 		add	r7, r7, #12
 546 021a BD46     		mov	sp, r7
 547 021c 80BC     		pop	{r7}
 548 021e 7047     		bx	lr
 549              		.cfi_endproc
 550              	.LFE8:
 552              		.align	2
 553              		.global	IntEnable
 554              		.thumb
 555              		.thumb_func
 557              	IntEnable:
 558              	.LFB9:
 482:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 483:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 484:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 485:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Enables an interrupt
 486:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 487:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt to be enabled.
 488:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 489:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function enables the specified interrupt in the interrupt controller.
 490:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Other enables for the interrupt (such as at the peripheral level) are
 491:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! unaffected by this function.
 492:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 493:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 494:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 495:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 496:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void
 497:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntEnable(uint32_t ui32Interrupt)
 498:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 559              		.loc 1 498 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 8
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 564 0220 80B4     		push	{r7}
 565              	.LCFI24:
 566              		.cfi_def_cfa_offset 4
 567              		.cfi_offset 7, -4
 568 0222 83B0     		sub	sp, sp, #12
 569              	.LCFI25:
 570              		.cfi_def_cfa_offset 16
 571 0224 00AF     		add	r7, sp, #0
 572              	.LCFI26:
 573              		.cfi_def_cfa_register 7
 574 0226 7860     		str	r0, [r7, #4]
 499:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 500:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check the arguments.
 501:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 502:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 503:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 504:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 505:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Determine the interrupt to enable.
 506:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 507:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     if(ui32Interrupt == FAULT_MPU)
 575              		.loc 1 507 0
 576 0228 7B68     		ldr	r3, [r7, #4]
 577 022a 042B     		cmp	r3, #4
 578 022c 0CD1     		bne	.L24
 508:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 509:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 510:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Enable the MemManage interrupt.
 511:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 512:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) |= NVIC_SYS_HND_CTRL_MEM;
 579              		.loc 1 512 0
 580 022e 4EF62453 		movw	r3, #60708
 581 0232 CEF20003 		movt	r3, 57344
 582 0236 4EF62452 		movw	r2, #60708
 583 023a CEF20002 		movt	r2, 57344
 584 023e 1268     		ldr	r2, [r2, #0]
 585 0240 42F48032 		orr	r2, r2, #65536
 586 0244 1A60     		str	r2, [r3, #0]
 587 0246 47E0     		b	.L23
 588              	.L24:
 513:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 514:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_BUS)
 589              		.loc 1 514 0
 590 0248 7B68     		ldr	r3, [r7, #4]
 591 024a 052B     		cmp	r3, #5
 592 024c 0CD1     		bne	.L26
 515:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 516:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 517:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Enable the bus fault interrupt.
 518:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 519:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) |= NVIC_SYS_HND_CTRL_BUS;
 593              		.loc 1 519 0
 594 024e 4EF62453 		movw	r3, #60708
 595 0252 CEF20003 		movt	r3, 57344
 596 0256 4EF62452 		movw	r2, #60708
 597 025a CEF20002 		movt	r2, 57344
 598 025e 1268     		ldr	r2, [r2, #0]
 599 0260 42F40032 		orr	r2, r2, #131072
 600 0264 1A60     		str	r2, [r3, #0]
 601 0266 37E0     		b	.L23
 602              	.L26:
 520:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 521:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_USAGE)
 603              		.loc 1 521 0
 604 0268 7B68     		ldr	r3, [r7, #4]
 605 026a 062B     		cmp	r3, #6
 606 026c 0CD1     		bne	.L27
 522:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 523:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 524:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Enable the usage fault interrupt.
 525:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 526:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) |= NVIC_SYS_HND_CTRL_USAGE;
 607              		.loc 1 526 0
 608 026e 4EF62453 		movw	r3, #60708
 609 0272 CEF20003 		movt	r3, 57344
 610 0276 4EF62452 		movw	r2, #60708
 611 027a CEF20002 		movt	r2, 57344
 612 027e 1268     		ldr	r2, [r2, #0]
 613 0280 42F48022 		orr	r2, r2, #262144
 614 0284 1A60     		str	r2, [r3, #0]
 615 0286 27E0     		b	.L23
 616              	.L27:
 527:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 528:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_SYSTICK)
 617              		.loc 1 528 0
 618 0288 7B68     		ldr	r3, [r7, #4]
 619 028a 0F2B     		cmp	r3, #15
 620 028c 0CD1     		bne	.L28
 529:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 530:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 531:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Enable the System Tick interrupt.
 532:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 533:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_ST_CTRL) |= NVIC_ST_CTRL_INTEN;
 621              		.loc 1 533 0
 622 028e 4EF21003 		movw	r3, #57360
 623 0292 CEF20003 		movt	r3, 57344
 624 0296 4EF21002 		movw	r2, #57360
 625 029a CEF20002 		movt	r2, 57344
 626 029e 1268     		ldr	r2, [r2, #0]
 627 02a0 42F00202 		orr	r2, r2, #2
 628 02a4 1A60     		str	r2, [r3, #0]
 629 02a6 17E0     		b	.L23
 630              	.L28:
 534:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 535:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt >= 16)
 631              		.loc 1 535 0
 632 02a8 7B68     		ldr	r3, [r7, #4]
 633 02aa 0F2B     		cmp	r3, #15
 634 02ac 14D9     		bls	.L23
 536:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 537:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 538:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Enable the general interrupt.
 539:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 540:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(g_pui32EnRegs[(ui32Interrupt - 16) / 32]) =
 635              		.loc 1 540 0
 636 02ae 7B68     		ldr	r3, [r7, #4]
 637 02b0 A3F11003 		sub	r3, r3, #16
 638 02b4 4FEA5312 		lsr	r2, r3, #5
 639 02b8 40F20003 		movw	r3, #:lower16:g_pui32EnRegs
 640 02bc C0F20003 		movt	r3, #:upper16:g_pui32EnRegs
 641 02c0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 541:bsp/boards/OpenMote-CC2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 642              		.loc 1 541 0
 643 02c4 7A68     		ldr	r2, [r7, #4]
 644 02c6 A2F11002 		sub	r2, r2, #16
 645 02ca 02F01F02 		and	r2, r2, #31
 646 02ce 4FF00101 		mov	r1, #1
 647 02d2 01FA02F2 		lsl	r2, r1, r2
 540:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(g_pui32EnRegs[(ui32Interrupt - 16) / 32]) =
 648              		.loc 1 540 0
 649 02d6 1A60     		str	r2, [r3, #0]
 650              	.L23:
 542:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 543:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 651              		.loc 1 543 0
 652 02d8 07F10C07 		add	r7, r7, #12
 653 02dc BD46     		mov	sp, r7
 654 02de 80BC     		pop	{r7}
 655 02e0 7047     		bx	lr
 656              		.cfi_endproc
 657              	.LFE9:
 659 02e2 00BF     		.align	2
 660              		.global	IntDisable
 661              		.thumb
 662              		.thumb_func
 664              	IntDisable:
 665              	.LFB10:
 544:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 545:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 546:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 547:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Disables an interrupt
 548:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 549:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt to be disabled.
 550:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 551:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function disables specified interrupt in the interrupt controller.
 552:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Other enables for the interrupt (such as at the peripheral level) are
 553:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! unaffected by this function.
 554:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 555:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 556:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 557:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 558:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void
 559:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntDisable(uint32_t ui32Interrupt)
 560:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 666              		.loc 1 560 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 8
 669              		@ frame_needed = 1, uses_anonymous_args = 0
 670              		@ link register save eliminated.
 671 02e4 80B4     		push	{r7}
 672              	.LCFI27:
 673              		.cfi_def_cfa_offset 4
 674              		.cfi_offset 7, -4
 675 02e6 83B0     		sub	sp, sp, #12
 676              	.LCFI28:
 677              		.cfi_def_cfa_offset 16
 678 02e8 00AF     		add	r7, sp, #0
 679              	.LCFI29:
 680              		.cfi_def_cfa_register 7
 681 02ea 7860     		str	r0, [r7, #4]
 561:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 562:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check the arguments.
 563:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 564:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 565:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 566:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 567:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Determine the interrupt to disable.
 568:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 569:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     if(ui32Interrupt == FAULT_MPU)
 682              		.loc 1 569 0
 683 02ec 7B68     		ldr	r3, [r7, #4]
 684 02ee 042B     		cmp	r3, #4
 685 02f0 0CD1     		bne	.L30
 570:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 571:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 572:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Disable the MemManage interrupt.
 573:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 574:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) &= ~(NVIC_SYS_HND_CTRL_MEM);
 686              		.loc 1 574 0
 687 02f2 4EF62453 		movw	r3, #60708
 688 02f6 CEF20003 		movt	r3, 57344
 689 02fa 4EF62452 		movw	r2, #60708
 690 02fe CEF20002 		movt	r2, 57344
 691 0302 1268     		ldr	r2, [r2, #0]
 692 0304 22F48032 		bic	r2, r2, #65536
 693 0308 1A60     		str	r2, [r3, #0]
 694 030a 47E0     		b	.L29
 695              	.L30:
 575:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 576:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_BUS)
 696              		.loc 1 576 0
 697 030c 7B68     		ldr	r3, [r7, #4]
 698 030e 052B     		cmp	r3, #5
 699 0310 0CD1     		bne	.L32
 577:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 578:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 579:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Disable the bus fault interrupt.
 580:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 581:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) &= ~(NVIC_SYS_HND_CTRL_BUS);
 700              		.loc 1 581 0
 701 0312 4EF62453 		movw	r3, #60708
 702 0316 CEF20003 		movt	r3, 57344
 703 031a 4EF62452 		movw	r2, #60708
 704 031e CEF20002 		movt	r2, 57344
 705 0322 1268     		ldr	r2, [r2, #0]
 706 0324 22F40032 		bic	r2, r2, #131072
 707 0328 1A60     		str	r2, [r3, #0]
 708 032a 37E0     		b	.L29
 709              	.L32:
 582:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 583:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_USAGE)
 710              		.loc 1 583 0
 711 032c 7B68     		ldr	r3, [r7, #4]
 712 032e 062B     		cmp	r3, #6
 713 0330 0CD1     		bne	.L33
 584:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 585:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 586:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Disable the usage fault interrupt.
 587:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 588:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) &= ~(NVIC_SYS_HND_CTRL_USAGE);
 714              		.loc 1 588 0
 715 0332 4EF62453 		movw	r3, #60708
 716 0336 CEF20003 		movt	r3, 57344
 717 033a 4EF62452 		movw	r2, #60708
 718 033e CEF20002 		movt	r2, 57344
 719 0342 1268     		ldr	r2, [r2, #0]
 720 0344 22F48022 		bic	r2, r2, #262144
 721 0348 1A60     		str	r2, [r3, #0]
 722 034a 27E0     		b	.L29
 723              	.L33:
 589:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 590:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_SYSTICK)
 724              		.loc 1 590 0
 725 034c 7B68     		ldr	r3, [r7, #4]
 726 034e 0F2B     		cmp	r3, #15
 727 0350 0CD1     		bne	.L34
 591:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 592:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 593:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Disable the System Tick interrupt.
 594:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 595:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_ST_CTRL) &= ~(NVIC_ST_CTRL_INTEN);
 728              		.loc 1 595 0
 729 0352 4EF21003 		movw	r3, #57360
 730 0356 CEF20003 		movt	r3, 57344
 731 035a 4EF21002 		movw	r2, #57360
 732 035e CEF20002 		movt	r2, 57344
 733 0362 1268     		ldr	r2, [r2, #0]
 734 0364 22F00202 		bic	r2, r2, #2
 735 0368 1A60     		str	r2, [r3, #0]
 736 036a 17E0     		b	.L29
 737              	.L34:
 596:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 597:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt >= 16)
 738              		.loc 1 597 0
 739 036c 7B68     		ldr	r3, [r7, #4]
 740 036e 0F2B     		cmp	r3, #15
 741 0370 14D9     		bls	.L29
 598:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 599:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 600:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Disable the general interrupt.
 601:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 602:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(g_pui32DisRegs[(ui32Interrupt - 16) / 32]) =
 742              		.loc 1 602 0
 743 0372 7B68     		ldr	r3, [r7, #4]
 744 0374 A3F11003 		sub	r3, r3, #16
 745 0378 4FEA5312 		lsr	r2, r3, #5
 746 037c 40F20003 		movw	r3, #:lower16:g_pui32DisRegs
 747 0380 C0F20003 		movt	r3, #:upper16:g_pui32DisRegs
 748 0384 53F82230 		ldr	r3, [r3, r2, lsl #2]
 603:bsp/boards/OpenMote-CC2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 749              		.loc 1 603 0
 750 0388 7A68     		ldr	r2, [r7, #4]
 751 038a A2F11002 		sub	r2, r2, #16
 752 038e 02F01F02 		and	r2, r2, #31
 753 0392 4FF00101 		mov	r1, #1
 754 0396 01FA02F2 		lsl	r2, r1, r2
 602:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(g_pui32DisRegs[(ui32Interrupt - 16) / 32]) =
 755              		.loc 1 602 0
 756 039a 1A60     		str	r2, [r3, #0]
 757              	.L29:
 604:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 605:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 758              		.loc 1 605 0
 759 039c 07F10C07 		add	r7, r7, #12
 760 03a0 BD46     		mov	sp, r7
 761 03a2 80BC     		pop	{r7}
 762 03a4 7047     		bx	lr
 763              		.cfi_endproc
 764              	.LFE10:
 766 03a6 00BF     		.align	2
 767              		.global	IntPendSet
 768              		.thumb
 769              		.thumb_func
 771              	IntPendSet:
 772              	.LFB11:
 606:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 607:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 608:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 609:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Pends an interrupt
 610:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 611:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt to be pended.
 612:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 613:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function pends the specified interrupt in the interrupt controller.
 614:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This causes the interrupt controller to execute the corresponding interrupt
 615:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! handler at the next available time, based on the current interrupt state
 616:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! priorities.  For example, if called by a higher priority interrupt handler,
 617:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! the specified interrupt handler is not called until after the current
 618:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! interrupt handler executes. The interrupt must have been enabled for
 619:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! it to be called.
 620:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 621:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 622:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 623:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 624:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void
 625:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntPendSet(uint32_t ui32Interrupt)
 626:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 773              		.loc 1 626 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 8
 776              		@ frame_needed = 1, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 778 03a8 80B4     		push	{r7}
 779              	.LCFI30:
 780              		.cfi_def_cfa_offset 4
 781              		.cfi_offset 7, -4
 782 03aa 83B0     		sub	sp, sp, #12
 783              	.LCFI31:
 784              		.cfi_def_cfa_offset 16
 785 03ac 00AF     		add	r7, sp, #0
 786              	.LCFI32:
 787              		.cfi_def_cfa_register 7
 788 03ae 7860     		str	r0, [r7, #4]
 627:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 628:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check the arguments.
 629:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 630:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 631:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 632:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 633:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Determine the interrupt to pend.
 634:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 635:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     if(ui32Interrupt == FAULT_NMI)
 789              		.loc 1 635 0
 790 03b0 7B68     		ldr	r3, [r7, #4]
 791 03b2 022B     		cmp	r3, #2
 792 03b4 0CD1     		bne	.L36
 636:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 637:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 638:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Pend the NMI interrupt.
 639:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 640:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_INT_CTRL) |= NVIC_INT_CTRL_NMI_SET;
 793              		.loc 1 640 0
 794 03b6 4EF60453 		movw	r3, #60676
 795 03ba CEF20003 		movt	r3, 57344
 796 03be 4EF60452 		movw	r2, #60676
 797 03c2 CEF20002 		movt	r2, 57344
 798 03c6 1268     		ldr	r2, [r2, #0]
 799 03c8 42F00042 		orr	r2, r2, #-2147483648
 800 03cc 1A60     		str	r2, [r3, #0]
 801 03ce 37E0     		b	.L35
 802              	.L36:
 641:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 642:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_PENDSV)
 803              		.loc 1 642 0
 804 03d0 7B68     		ldr	r3, [r7, #4]
 805 03d2 0E2B     		cmp	r3, #14
 806 03d4 0CD1     		bne	.L38
 643:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 644:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 645:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Pend the PendSV interrupt.
 646:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 647:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_INT_CTRL) |= NVIC_INT_CTRL_PEND_SV;
 807              		.loc 1 647 0
 808 03d6 4EF60453 		movw	r3, #60676
 809 03da CEF20003 		movt	r3, 57344
 810 03de 4EF60452 		movw	r2, #60676
 811 03e2 CEF20002 		movt	r2, 57344
 812 03e6 1268     		ldr	r2, [r2, #0]
 813 03e8 42F08052 		orr	r2, r2, #268435456
 814 03ec 1A60     		str	r2, [r3, #0]
 815 03ee 27E0     		b	.L35
 816              	.L38:
 648:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 649:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_SYSTICK)
 817              		.loc 1 649 0
 818 03f0 7B68     		ldr	r3, [r7, #4]
 819 03f2 0F2B     		cmp	r3, #15
 820 03f4 0CD1     		bne	.L39
 650:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 651:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 652:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Pend the SysTick interrupt.
 653:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 654:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_INT_CTRL) |= NVIC_INT_CTRL_PENDSTSET;
 821              		.loc 1 654 0
 822 03f6 4EF60453 		movw	r3, #60676
 823 03fa CEF20003 		movt	r3, 57344
 824 03fe 4EF60452 		movw	r2, #60676
 825 0402 CEF20002 		movt	r2, 57344
 826 0406 1268     		ldr	r2, [r2, #0]
 827 0408 42F08062 		orr	r2, r2, #67108864
 828 040c 1A60     		str	r2, [r3, #0]
 829 040e 17E0     		b	.L35
 830              	.L39:
 655:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 656:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt >= 16)
 831              		.loc 1 656 0
 832 0410 7B68     		ldr	r3, [r7, #4]
 833 0412 0F2B     		cmp	r3, #15
 834 0414 14D9     		bls	.L35
 657:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 658:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 659:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Pend the general interrupt.
 660:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 661:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(g_pui32PendRegs[(ui32Interrupt - 16) / 32]) =
 835              		.loc 1 661 0
 836 0416 7B68     		ldr	r3, [r7, #4]
 837 0418 A3F11003 		sub	r3, r3, #16
 838 041c 4FEA5312 		lsr	r2, r3, #5
 839 0420 40F20003 		movw	r3, #:lower16:g_pui32PendRegs
 840 0424 C0F20003 		movt	r3, #:upper16:g_pui32PendRegs
 841 0428 53F82230 		ldr	r3, [r3, r2, lsl #2]
 662:bsp/boards/OpenMote-CC2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 842              		.loc 1 662 0
 843 042c 7A68     		ldr	r2, [r7, #4]
 844 042e A2F11002 		sub	r2, r2, #16
 845 0432 02F01F02 		and	r2, r2, #31
 846 0436 4FF00101 		mov	r1, #1
 847 043a 01FA02F2 		lsl	r2, r1, r2
 661:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(g_pui32PendRegs[(ui32Interrupt - 16) / 32]) =
 848              		.loc 1 661 0
 849 043e 1A60     		str	r2, [r3, #0]
 850              	.L35:
 663:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 664:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 851              		.loc 1 664 0
 852 0440 07F10C07 		add	r7, r7, #12
 853 0444 BD46     		mov	sp, r7
 854 0446 80BC     		pop	{r7}
 855 0448 7047     		bx	lr
 856              		.cfi_endproc
 857              	.LFE11:
 859 044a 00BF     		.align	2
 860              		.global	IntPendClear
 861              		.thumb
 862              		.thumb_func
 864              	IntPendClear:
 865              	.LFB12:
 665:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 666:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 667:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 668:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Unpends an interrupt
 669:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 670:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt to be unpended.
 671:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 672:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function unpends the specified interrupt in the interrupt controller.
 673:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This will cause any previously generated interrupts that have not been
 674:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! handled yet (due to higher priority interrupts or the interrupt no having
 675:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! been enabled yet) to be discarded.
 676:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 677:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 678:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 679:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 680:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void
 681:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntPendClear(uint32_t ui32Interrupt)
 682:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 866              		.loc 1 682 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 8
 869              		@ frame_needed = 1, uses_anonymous_args = 0
 870              		@ link register save eliminated.
 871 044c 80B4     		push	{r7}
 872              	.LCFI33:
 873              		.cfi_def_cfa_offset 4
 874              		.cfi_offset 7, -4
 875 044e 83B0     		sub	sp, sp, #12
 876              	.LCFI34:
 877              		.cfi_def_cfa_offset 16
 878 0450 00AF     		add	r7, sp, #0
 879              	.LCFI35:
 880              		.cfi_def_cfa_register 7
 881 0452 7860     		str	r0, [r7, #4]
 683:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 684:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Check the arguments.
 685:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 686:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 687:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 688:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 689:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     // Determine the interrupt to unpend.
 690:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     //
 691:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     if(ui32Interrupt == FAULT_PENDSV)
 882              		.loc 1 691 0
 883 0454 7B68     		ldr	r3, [r7, #4]
 884 0456 0E2B     		cmp	r3, #14
 885 0458 0CD1     		bne	.L41
 692:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 693:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 694:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Unpend the PendSV interrupt.
 695:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 696:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_INT_CTRL) |= NVIC_INT_CTRL_UNPEND_SV;
 886              		.loc 1 696 0
 887 045a 4EF60453 		movw	r3, #60676
 888 045e CEF20003 		movt	r3, 57344
 889 0462 4EF60452 		movw	r2, #60676
 890 0466 CEF20002 		movt	r2, 57344
 891 046a 1268     		ldr	r2, [r2, #0]
 892 046c 42F00062 		orr	r2, r2, #134217728
 893 0470 1A60     		str	r2, [r3, #0]
 894 0472 27E0     		b	.L40
 895              	.L41:
 697:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 698:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_SYSTICK)
 896              		.loc 1 698 0
 897 0474 7B68     		ldr	r3, [r7, #4]
 898 0476 0F2B     		cmp	r3, #15
 899 0478 0CD1     		bne	.L43
 699:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 700:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 701:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Unpend the SysTick interrupt.
 702:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 703:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(NVIC_INT_CTRL) |= NVIC_INT_CTRL_PENDSTCLR;
 900              		.loc 1 703 0
 901 047a 4EF60453 		movw	r3, #60676
 902 047e CEF20003 		movt	r3, 57344
 903 0482 4EF60452 		movw	r2, #60676
 904 0486 CEF20002 		movt	r2, 57344
 905 048a 1268     		ldr	r2, [r2, #0]
 906 048c 42F00072 		orr	r2, r2, #33554432
 907 0490 1A60     		str	r2, [r3, #0]
 908 0492 17E0     		b	.L40
 909              	.L43:
 704:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 705:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else if(ui32Interrupt >= 16)
 910              		.loc 1 705 0
 911 0494 7B68     		ldr	r3, [r7, #4]
 912 0496 0F2B     		cmp	r3, #15
 913 0498 14D9     		bls	.L40
 706:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 707:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 708:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         // Unpend the general interrupt.
 709:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         //
 710:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(g_pui32UnpendRegs[(ui32Interrupt - 16) / 32]) =
 914              		.loc 1 710 0
 915 049a 7B68     		ldr	r3, [r7, #4]
 916 049c A3F11003 		sub	r3, r3, #16
 917 04a0 4FEA5312 		lsr	r2, r3, #5
 918 04a4 40F20003 		movw	r3, #:lower16:g_pui32UnpendRegs
 919 04a8 C0F20003 		movt	r3, #:upper16:g_pui32UnpendRegs
 920 04ac 53F82230 		ldr	r3, [r3, r2, lsl #2]
 711:bsp/boards/OpenMote-CC2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 921              		.loc 1 711 0
 922 04b0 7A68     		ldr	r2, [r7, #4]
 923 04b2 A2F11002 		sub	r2, r2, #16
 924 04b6 02F01F02 		and	r2, r2, #31
 925 04ba 4FF00101 		mov	r1, #1
 926 04be 01FA02F2 		lsl	r2, r1, r2
 710:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         HWREG(g_pui32UnpendRegs[(ui32Interrupt - 16) / 32]) =
 927              		.loc 1 710 0
 928 04c2 1A60     		str	r2, [r3, #0]
 929              	.L40:
 712:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 713:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 930              		.loc 1 713 0
 931 04c4 07F10C07 		add	r7, r7, #12
 932 04c8 BD46     		mov	sp, r7
 933 04ca 80BC     		pop	{r7}
 934 04cc 7047     		bx	lr
 935              		.cfi_endproc
 936              	.LFE12:
 938 04ce 00BF     		.align	2
 939              		.global	IntPriorityMaskSet
 940              		.thumb
 941              		.thumb_func
 943              	IntPriorityMaskSet:
 944              	.LFB13:
 714:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 715:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 716:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 717:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Sets the priority masking level
 718:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 719:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \param ui32PriorityMask is the priority level that will be masked.
 720:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 721:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function sets the interrupt priority masking level so that all
 722:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! interrupts at the specified or lesser priority level is masked.  This
 723:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! can be used to globally disable a set of interrupts with priority below
 724:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! a predetermined threshold.  A value of 0 disables priority
 725:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! masking.
 726:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 727:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Smaller numbers correspond to higher interrupt priorities.  For example,
 728:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! a priority level mask of 4 allows interrupts of priority level 0-3,
 729:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! and interrupts with a numerical priority of 4 and greater are blocked.
 730:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 731:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! The hardware priority mechanism looks only at the upper N bits of the
 732:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! priority level (where N is 3 for the CC2538 device family), so any
 733:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! prioritization must be performed in those bits.
 734:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 735:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 736:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 737:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 738:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void
 739:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntPriorityMaskSet(uint32_t ui32PriorityMask)
 740:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 945              		.loc 1 740 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 8
 948              		@ frame_needed = 1, uses_anonymous_args = 0
 949 04d0 80B5     		push	{r7, lr}
 950              	.LCFI36:
 951              		.cfi_def_cfa_offset 8
 952              		.cfi_offset 7, -8
 953              		.cfi_offset 14, -4
 954 04d2 82B0     		sub	sp, sp, #8
 955              	.LCFI37:
 956              		.cfi_def_cfa_offset 16
 957 04d4 00AF     		add	r7, sp, #0
 958              	.LCFI38:
 959              		.cfi_def_cfa_register 7
 960 04d6 7860     		str	r0, [r7, #4]
 741:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     CPUbasepriSet(ui32PriorityMask);
 961              		.loc 1 741 0
 962 04d8 7868     		ldr	r0, [r7, #4]
 963 04da FFF7FEFF 		bl	CPUbasepriSet
 742:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 964              		.loc 1 742 0
 965 04de 07F10807 		add	r7, r7, #8
 966 04e2 BD46     		mov	sp, r7
 967 04e4 80BD     		pop	{r7, pc}
 968              		.cfi_endproc
 969              	.LFE13:
 971 04e6 00BF     		.align	2
 972              		.global	IntPriorityMaskGet
 973              		.thumb
 974              		.thumb_func
 976              	IntPriorityMaskGet:
 977              	.LFB14:
 743:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 744:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 745:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 746:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Gets the priority masking level
 747:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 748:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function gets the current setting of the interrupt priority masking
 749:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! level.  The value returned is the priority level such that all interrupts
 750:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! of that priority and lesser priorities are masked.  A value of 0 disables
 751:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! priority masking.
 752:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 753:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Smaller numbers correspond to higher interrupt priorities.  For example,
 754:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! a priority level mask of 4 allows interrupts of priority level 0-3,
 755:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! and interrupts with a numerical priority of 4 and greater will be blocked.
 756:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 757:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! The hardware priority mechanism looks only at the upper N bits of the
 758:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! priority level (where N is 3 for the CC2538 device family), so any
 759:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! prioritization must be performed in those bits.
 760:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 761:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return Returns the value of the interrupt priority level mask
 762:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 763:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 764:bsp/boards/OpenMote-CC2538/source/interrupt.c **** uint32_t
 765:bsp/boards/OpenMote-CC2538/source/interrupt.c **** IntPriorityMaskGet(void)
 766:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 978              		.loc 1 766 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 1, uses_anonymous_args = 0
 982 04e8 80B5     		push	{r7, lr}
 983              	.LCFI39:
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 7, -8
 986              		.cfi_offset 14, -4
 987 04ea 00AF     		add	r7, sp, #0
 988              	.LCFI40:
 989              		.cfi_def_cfa_register 7
 767:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     return(CPUbasepriGet());
 990              		.loc 1 767 0
 991 04ec FFF7FEFF 		bl	CPUbasepriGet
 992 04f0 0346     		mov	r3, r0
 768:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 993              		.loc 1 768 0
 994 04f2 1846     		mov	r0, r3
 995 04f4 80BD     		pop	{r7, pc}
 996              		.cfi_endproc
 997              	.LFE14:
 999 04f6 00BF     		.align	2
 1000              		.global	IntAltMapEnable
 1001              		.thumb
 1002              		.thumb_func
 1004              	IntAltMapEnable:
 1005              	.LFB15:
 769:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 770:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 771:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 772:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Enables the alternate interrupt mapping
 773:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 774:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function enables the alternate (that is, smaller) interrupt map.
 775:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 776:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \sa See also IntAltMapDisable() and IntAltMapIsEnabled().
 777:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 778:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 779:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 780:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 781:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void IntAltMapEnable(void)
 782:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 1006              		.loc 1 782 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 0
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010              		@ link register save eliminated.
 1011 04f8 80B4     		push	{r7}
 1012              	.LCFI41:
 1013              		.cfi_def_cfa_offset 4
 1014              		.cfi_offset 7, -4
 1015 04fa 00AF     		add	r7, sp, #0
 1016              	.LCFI42:
 1017              		.cfi_def_cfa_register 7
 783:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     HWREG(SYS_CTRL_I_MAP) |= SYS_CTRL_I_MAP_ALTMAP;
 1018              		.loc 1 783 0
 1019 04fc 42F29803 		movw	r3, #8344
 1020 0500 C4F20D03 		movt	r3, 16397
 1021 0504 42F29802 		movw	r2, #8344
 1022 0508 C4F20D02 		movt	r2, 16397
 1023 050c 1268     		ldr	r2, [r2, #0]
 1024 050e 42F00102 		orr	r2, r2, #1
 1025 0512 1A60     		str	r2, [r3, #0]
 784:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 1026              		.loc 1 784 0
 1027 0514 BD46     		mov	sp, r7
 1028 0516 80BC     		pop	{r7}
 1029 0518 7047     		bx	lr
 1030              		.cfi_endproc
 1031              	.LFE15:
 1033 051a 00BF     		.align	2
 1034              		.global	IntAltMapDisable
 1035              		.thumb
 1036              		.thumb_func
 1038              	IntAltMapDisable:
 1039              	.LFB16:
 785:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 786:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 787:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 788:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Disable the alternate interrupt mapping
 789:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 790:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! This function disables the alternate (that is, smaller) interrupt map.
 791:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 792:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \sa See also IntAltMapDisable() and IntAltMapIsEnabled().
 793:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 794:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return None
 795:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 796:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 797:bsp/boards/OpenMote-CC2538/source/interrupt.c **** void IntAltMapDisable(void)
 798:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 1040              		.loc 1 798 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 0
 1043              		@ frame_needed = 1, uses_anonymous_args = 0
 1044              		@ link register save eliminated.
 1045 051c 80B4     		push	{r7}
 1046              	.LCFI43:
 1047              		.cfi_def_cfa_offset 4
 1048              		.cfi_offset 7, -4
 1049 051e 00AF     		add	r7, sp, #0
 1050              	.LCFI44:
 1051              		.cfi_def_cfa_register 7
 799:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     HWREG(SYS_CTRL_I_MAP) &= ~SYS_CTRL_I_MAP_ALTMAP;
 1052              		.loc 1 799 0
 1053 0520 42F29803 		movw	r3, #8344
 1054 0524 C4F20D03 		movt	r3, 16397
 1055 0528 42F29802 		movw	r2, #8344
 1056 052c C4F20D02 		movt	r2, 16397
 1057 0530 1268     		ldr	r2, [r2, #0]
 1058 0532 22F00102 		bic	r2, r2, #1
 1059 0536 1A60     		str	r2, [r3, #0]
 800:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 1060              		.loc 1 800 0
 1061 0538 BD46     		mov	sp, r7
 1062 053a 80BC     		pop	{r7}
 1063 053c 7047     		bx	lr
 1064              		.cfi_endproc
 1065              	.LFE16:
 1067 053e 00BF     		.align	2
 1068              		.global	IntAltMapIsEnabled
 1069              		.thumb
 1070              		.thumb_func
 1072              	IntAltMapIsEnabled:
 1073              	.LFB17:
 801:bsp/boards/OpenMote-CC2538/source/interrupt.c **** 
 802:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 803:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 804:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! Checks to see if the Alternate Interrupt Mapping is in use
 805:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 806:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \sa See also IntAltMapDisable() and IntAltMapIsEnabled().
 807:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //!
 808:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! \return Returns \b true if the Alternate Mapping is in use and \b false
 809:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //! otherwise.
 810:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //
 811:bsp/boards/OpenMote-CC2538/source/interrupt.c **** //*****************************************************************************
 812:bsp/boards/OpenMote-CC2538/source/interrupt.c **** bool IntAltMapIsEnabled(void)
 813:bsp/boards/OpenMote-CC2538/source/interrupt.c **** {
 1074              		.loc 1 813 0
 1075              		.cfi_startproc
 1076              		@ args = 0, pretend = 0, frame = 0
 1077              		@ frame_needed = 1, uses_anonymous_args = 0
 1078              		@ link register save eliminated.
 1079 0540 80B4     		push	{r7}
 1080              	.LCFI45:
 1081              		.cfi_def_cfa_offset 4
 1082              		.cfi_offset 7, -4
 1083 0542 00AF     		add	r7, sp, #0
 1084              	.LCFI46:
 1085              		.cfi_def_cfa_register 7
 814:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     if(HWREG(SYS_CTRL_I_MAP) & SYS_CTRL_I_MAP_ALTMAP)
 1086              		.loc 1 814 0
 1087 0544 42F29803 		movw	r3, #8344
 1088 0548 C4F20D03 		movt	r3, 16397
 1089 054c 1B68     		ldr	r3, [r3, #0]
 1090 054e 03F00103 		and	r3, r3, #1
 1091 0552 002B     		cmp	r3, #0
 1092 0554 02D0     		beq	.L50
 815:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 816:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         return (true);
 1093              		.loc 1 816 0
 1094 0556 4FF00103 		mov	r3, #1
 1095 055a 01E0     		b	.L51
 1096              	.L50:
 817:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 818:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     else
 819:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     {
 820:bsp/boards/OpenMote-CC2538/source/interrupt.c ****         return (false);
 1097              		.loc 1 820 0
 1098 055c 4FF00003 		mov	r3, #0
 1099              	.L51:
 821:bsp/boards/OpenMote-CC2538/source/interrupt.c ****     }
 822:bsp/boards/OpenMote-CC2538/source/interrupt.c **** }
 1100              		.loc 1 822 0
 1101 0560 1846     		mov	r0, r3
 1102 0562 BD46     		mov	sp, r7
 1103 0564 80BC     		pop	{r7}
 1104 0566 7047     		bx	lr
 1105              		.cfi_endproc
 1106              	.LFE17:
 1108              	.Letext0:
 1109              		.file 2 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
DEFINED SYMBOLS
                            *ABS*:00000000 interrupt.c
     /tmp/ccEwuH9r.s:19     .rodata:00000000 $d
     /tmp/ccEwuH9r.s:22     .rodata:00000000 g_pui32Priority
     /tmp/ccEwuH9r.s:34     .rodata:00000020 g_pui32Regs
     /tmp/ccEwuH9r.s:79     .rodata:000000c4 g_pui32EnRegs
     /tmp/ccEwuH9r.s:88     .rodata:000000d8 g_pui32DisRegs
     /tmp/ccEwuH9r.s:97     .rodata:000000ec g_pui32PendRegs
     /tmp/ccEwuH9r.s:106    .rodata:00000100 g_pui32UnpendRegs
     /tmp/ccEwuH9r.s:113    .text:00000000 $t
     /tmp/ccEwuH9r.s:117    .text:00000000 IntDefaultHandler
     /tmp/ccEwuH9r.s:139    vtable:00000000 $d
     /tmp/ccEwuH9r.s:142    vtable:00000000 g_pfnRAMVectors
     /tmp/ccEwuH9r.s:150    .text:00000008 IntMasterEnable
     /tmp/ccEwuH9r.s:183    .text:00000020 IntMasterDisable
     /tmp/ccEwuH9r.s:216    .text:00000038 IntRegister
     /tmp/ccEwuH9r.s:299    .text:000000c4 IntUnregister
     /tmp/ccEwuH9r.s:337    .text:000000ec IntPriorityGroupingSet
     /tmp/ccEwuH9r.s:378    .text:00000120 IntPriorityGroupingGet
     /tmp/ccEwuH9r.s:445    .text:00000174 IntPrioritySet
     /tmp/ccEwuH9r.s:513    .text:000001e8 IntPriorityGet
     /tmp/ccEwuH9r.s:557    .text:00000220 IntEnable
     /tmp/ccEwuH9r.s:664    .text:000002e4 IntDisable
     /tmp/ccEwuH9r.s:771    .text:000003a8 IntPendSet
     /tmp/ccEwuH9r.s:864    .text:0000044c IntPendClear
     /tmp/ccEwuH9r.s:943    .text:000004d0 IntPriorityMaskSet
     /tmp/ccEwuH9r.s:976    .text:000004e8 IntPriorityMaskGet
     /tmp/ccEwuH9r.s:1004   .text:000004f8 IntAltMapEnable
     /tmp/ccEwuH9r.s:1038   .text:0000051c IntAltMapDisable
     /tmp/ccEwuH9r.s:1072   .text:00000540 IntAltMapIsEnabled
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e96eee74da26538b12ac9582e3798382
                           .group:00000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:00000000 wm4.hw_nvic.h.42.f3b9efa2537e728866c85de74b3e5811
                           .group:00000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.debug.h.41.b891e613993738d067c45a5ff528d11a
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf

UNDEFINED SYMBOLS
CPUcpsie
CPUcpsid
CPUbasepriSet
CPUbasepriGet
