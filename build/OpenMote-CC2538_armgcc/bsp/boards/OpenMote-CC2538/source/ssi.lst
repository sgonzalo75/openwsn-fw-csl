   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ssi.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	SSIConfigSetExpClk
  20              		.thumb
  21              		.thumb_func
  23              	SSIConfigSetExpClk:
  24              	.LFB0:
  25              		.file 1 "bsp/boards/OpenMote-CC2538/source/ssi.c"
   1:bsp/boards/OpenMote-CC2538/source/ssi.c **** /******************************************************************************
   2:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  Filename:       ssi.c
   3:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  Revised:        $Date: 2013-03-20 14:47:53 +0100 (Wed, 20 Mar 2013) $
   4:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  Revision:       $Revision: 9489 $
   5:bsp/boards/OpenMote-CC2538/source/ssi.c **** *
   6:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  Description:    Driver for Synchronous Serial Interface.
   7:bsp/boards/OpenMote-CC2538/source/ssi.c **** *
   8:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:bsp/boards/OpenMote-CC2538/source/ssi.c **** *
  10:bsp/boards/OpenMote-CC2538/source/ssi.c **** *
  11:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  Redistribution and use in source and binary forms, with or without
  12:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  modification, are permitted provided that the following conditions
  13:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  are met:
  14:bsp/boards/OpenMote-CC2538/source/ssi.c **** *
  15:bsp/boards/OpenMote-CC2538/source/ssi.c **** *    Redistributions of source code must retain the above copyright
  16:bsp/boards/OpenMote-CC2538/source/ssi.c **** *    notice, this list of conditions and the following disclaimer.
  17:bsp/boards/OpenMote-CC2538/source/ssi.c **** *
  18:bsp/boards/OpenMote-CC2538/source/ssi.c **** *    Redistributions in binary form must reproduce the above copyright
  19:bsp/boards/OpenMote-CC2538/source/ssi.c **** *    notice, this list of conditions and the following disclaimer in the
  20:bsp/boards/OpenMote-CC2538/source/ssi.c **** *    documentation and/or other materials provided with the distribution.
  21:bsp/boards/OpenMote-CC2538/source/ssi.c **** *
  22:bsp/boards/OpenMote-CC2538/source/ssi.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:bsp/boards/OpenMote-CC2538/source/ssi.c **** *    its contributors may be used to endorse or promote products derived
  24:bsp/boards/OpenMote-CC2538/source/ssi.c **** *    from this software without specific prior written permission.
  25:bsp/boards/OpenMote-CC2538/source/ssi.c **** *
  26:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:bsp/boards/OpenMote-CC2538/source/ssi.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:bsp/boards/OpenMote-CC2538/source/ssi.c **** *
  38:bsp/boards/OpenMote-CC2538/source/ssi.c **** ******************************************************************************/
  39:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
  40:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
  41:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
  42:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \addtogroup ssi_api
  43:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! @{
  44:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
  45:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
  46:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
  47:bsp/boards/OpenMote-CC2538/source/ssi.c **** #include <headers/hw_ints.h>
  48:bsp/boards/OpenMote-CC2538/source/ssi.c **** #include <headers/hw_memmap.h>
  49:bsp/boards/OpenMote-CC2538/source/ssi.c **** #include <headers/hw_ssi.h>
  50:bsp/boards/OpenMote-CC2538/source/ssi.c **** #include "debug.h"
  51:bsp/boards/OpenMote-CC2538/source/ssi.c **** #include "interrupt.h"
  52:bsp/boards/OpenMote-CC2538/source/ssi.c **** #include "ssi.h"
  53:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
  54:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
  55:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
  56:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Configures the synchronous serial interface
  57:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
  58:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
  59:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32SSIClk is the rate of the clock supplied to the SSI module.
  60:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Protocol specifies the data transfer protocol.
  61:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Mode specifies the mode of operation.
  62:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32BitRate specifies the clock rate.
  63:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32DataWidth specifies number of bits transferred per frame.
  64:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
  65:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function configures the synchronous serial interface.  It sets
  66:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! the SSI protocol, mode of operation, bit rate, and data width.
  67:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
  68:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! The \e ui32Protocol parameter defines the data frame format.  The
  69:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \e ui32Protocol parameter can be one of the following values:
  70:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \b SSI_FRF_MOTO_MODE_0, \b SSI_FRF_MOTO_MODE_1, \b SSI_FRF_MOTO_MODE_2,
  71:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \b SSI_FRF_MOTO_MODE_3, \b SSI_FRF_TI, or \b SSI_FRF_NMW.  The Motorola
  72:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! frame formats imply the following polarity and phase configurations:
  73:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
  74:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! <pre>
  75:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Polarity Phase       Mode
  76:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!   0       0   SSI_FRF_MOTO_MODE_0
  77:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!   0       1   SSI_FRF_MOTO_MODE_1
  78:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!   1       0   SSI_FRF_MOTO_MODE_2
  79:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!   1       1   SSI_FRF_MOTO_MODE_3
  80:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! </pre>
  81:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
  82:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! The \e ui32Mode parameter defines the operating mode of the SSI module.  The
  83:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! SSI module can operate as a master or slave; if a slave, the SSI can be
  84:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! configured to disable output on its serial output line.  The \e ui32Mode
  85:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! parameter can be one of the following values: \b SSI_MODE_MASTER,
  86:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \b SSI_MODE_SLAVE, or \b SSI_MODE_SLAVE_OD.
  87:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
  88:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! The \e ui32BitRate parameter defines the bit rate for the SSI.  This bit rate
  89:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! must satisfy the following clock ratio criteria:
  90:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
  91:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! - FSSI >= 2 * bit rate (master mode)
  92:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! - FSSI >= 12 * bit rate (slave modes)
  93:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
  94:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! where FSSI is the frequency of the clock supplied to the SSI module.
  95:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
  96:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! The \e ui32DataWidth parameter defines the width of the data transfers, and
  97:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! can be a value between 4 and 16, inclusive.
  98:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
  99:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 100:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 101:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 102:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! SSIClockSourceSet(), or it can be explicitly hard coded if it is constant
 103:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! and known (to save the code/execution overhead of a call to
 104:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 105:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 106:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 107:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 108:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 109:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 110:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIConfigSetExpClk(uint32_t ui32Base, uint32_t ui32SSIClk,
 111:bsp/boards/OpenMote-CC2538/source/ssi.c ****                    uint32_t ui32Protocol, uint32_t ui32Mode,
 112:bsp/boards/OpenMote-CC2538/source/ssi.c ****                    uint32_t ui32BitRate, uint32_t ui32DataWidth)
 113:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
  26              		.loc 1 113 0
  27              		.cfi_startproc
  28              		@ args = 8, pretend = 0, frame = 40
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 8BB0     		sub	sp, sp, #44
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 48
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 F860     		str	r0, [r7, #12]
  42 0008 B960     		str	r1, [r7, #8]
  43 000a 7A60     		str	r2, [r7, #4]
  44 000c 3B60     		str	r3, [r7, #0]
 114:bsp/boards/OpenMote-CC2538/source/ssi.c ****     uint32_t ui32MaxBitRate;
 115:bsp/boards/OpenMote-CC2538/source/ssi.c ****     uint32_t ui32RegVal;
 116:bsp/boards/OpenMote-CC2538/source/ssi.c ****     uint32_t ui32PreDiv;
 117:bsp/boards/OpenMote-CC2538/source/ssi.c ****     uint32_t ui32SCR;
 118:bsp/boards/OpenMote-CC2538/source/ssi.c ****     uint32_t ui32SPH_SPO;
 119:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 120:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 121:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 122:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 123:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 124:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Protocol == SSI_FRF_MOTO_MODE_0) ||
 125:bsp/boards/OpenMote-CC2538/source/ssi.c ****            (ui32Protocol == SSI_FRF_MOTO_MODE_1) ||
 126:bsp/boards/OpenMote-CC2538/source/ssi.c ****            (ui32Protocol == SSI_FRF_MOTO_MODE_2) ||
 127:bsp/boards/OpenMote-CC2538/source/ssi.c ****            (ui32Protocol == SSI_FRF_MOTO_MODE_3) ||
 128:bsp/boards/OpenMote-CC2538/source/ssi.c ****            (ui32Protocol == SSI_FRF_TI) ||
 129:bsp/boards/OpenMote-CC2538/source/ssi.c ****            (ui32Protocol == SSI_FRF_NMW));
 130:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Mode == SSI_MODE_MASTER) ||
 131:bsp/boards/OpenMote-CC2538/source/ssi.c ****            (ui32Mode == SSI_MODE_SLAVE) ||
 132:bsp/boards/OpenMote-CC2538/source/ssi.c ****            (ui32Mode == SSI_MODE_SLAVE_OD));
 133:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT(((ui32Mode == SSI_MODE_MASTER) && (ui32BitRate <= (ui32SSIClk / 2))) ||
 134:bsp/boards/OpenMote-CC2538/source/ssi.c ****            ((ui32Mode != SSI_MODE_MASTER) && (ui32BitRate <= (ui32SSIClk / 12))));
 135:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32SSIClk / ui32BitRate) <= (254 * 256));
 136:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32DataWidth >= 4) && (ui32DataWidth <= 16));
 137:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 138:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 139:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Set the mode.
 140:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 141:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ui32RegVal = (ui32Mode == SSI_MODE_SLAVE_OD) ? SSI_CR1_SOD : 0;
  45              		.loc 1 141 0
  46 000e 3B68     		ldr	r3, [r7, #0]
  47 0010 022B     		cmp	r3, #2
  48 0012 02D1     		bne	.L2
  49              		.loc 1 141 0 is_stmt 0 discriminator 1
  50 0014 4FF00803 		mov	r3, #8
  51 0018 01E0     		b	.L3
  52              	.L2:
  53              		.loc 1 141 0 discriminator 2
  54 001a 4FF00003 		mov	r3, #0
  55              	.L3:
  56              		.loc 1 141 0 discriminator 3
  57 001e 3B62     		str	r3, [r7, #32]
 142:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ui32RegVal |= (ui32Mode == SSI_MODE_MASTER) ? 0 : SSI_CR1_MS;
  58              		.loc 1 142 0 is_stmt 1 discriminator 3
  59 0020 3B68     		ldr	r3, [r7, #0]
  60 0022 002B     		cmp	r3, #0
  61 0024 02D1     		bne	.L4
  62              		.loc 1 142 0 is_stmt 0 discriminator 1
  63 0026 4FF00003 		mov	r3, #0
  64 002a 01E0     		b	.L5
  65              	.L4:
  66              		.loc 1 142 0 discriminator 2
  67 002c 4FF00403 		mov	r3, #4
  68              	.L5:
  69              		.loc 1 142 0 discriminator 3
  70 0030 3A6A     		ldr	r2, [r7, #32]
  71 0032 1343     		orrs	r3, r3, r2
  72 0034 3B62     		str	r3, [r7, #32]
 143:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CR1) = ui32RegVal;
  73              		.loc 1 143 0 is_stmt 1 discriminator 3
  74 0036 FB68     		ldr	r3, [r7, #12]
  75 0038 03F10403 		add	r3, r3, #4
  76 003c 3A6A     		ldr	r2, [r7, #32]
  77 003e 1A60     		str	r2, [r3, #0]
 144:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 145:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 146:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Set the clock predivider.
 147:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 148:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ui32MaxBitRate = ui32SSIClk / ui32BitRate;
  78              		.loc 1 148 0 discriminator 3
  79 0040 BA68     		ldr	r2, [r7, #8]
  80 0042 3B6B     		ldr	r3, [r7, #48]
  81 0044 B2FBF3F3 		udiv	r3, r2, r3
  82 0048 FB61     		str	r3, [r7, #28]
 149:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ui32PreDiv = 0;
  83              		.loc 1 149 0 discriminator 3
  84 004a 4FF00003 		mov	r3, #0
  85 004e 7B62     		str	r3, [r7, #36]
  86              	.L6:
 150:bsp/boards/OpenMote-CC2538/source/ssi.c ****     do
 151:bsp/boards/OpenMote-CC2538/source/ssi.c ****     {
 152:bsp/boards/OpenMote-CC2538/source/ssi.c ****         ui32PreDiv += 2;
  87              		.loc 1 152 0 discriminator 1
  88 0050 7B6A     		ldr	r3, [r7, #36]
  89 0052 03F10203 		add	r3, r3, #2
  90 0056 7B62     		str	r3, [r7, #36]
 153:bsp/boards/OpenMote-CC2538/source/ssi.c ****         ui32SCR = (ui32MaxBitRate / ui32PreDiv) - 1;
  91              		.loc 1 153 0 discriminator 1
  92 0058 FA69     		ldr	r2, [r7, #28]
  93 005a 7B6A     		ldr	r3, [r7, #36]
  94 005c B2FBF3F3 		udiv	r3, r2, r3
  95 0060 03F1FF33 		add	r3, r3, #-1
  96 0064 BB61     		str	r3, [r7, #24]
 154:bsp/boards/OpenMote-CC2538/source/ssi.c ****     }
 155:bsp/boards/OpenMote-CC2538/source/ssi.c ****     while(ui32SCR > 255);
  97              		.loc 1 155 0 discriminator 1
  98 0066 BB69     		ldr	r3, [r7, #24]
  99 0068 FF2B     		cmp	r3, #255
 100 006a F1D8     		bhi	.L6
 156:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CPSR) = ui32PreDiv;
 101              		.loc 1 156 0
 102 006c FB68     		ldr	r3, [r7, #12]
 103 006e 03F11003 		add	r3, r3, #16
 104 0072 7A6A     		ldr	r2, [r7, #36]
 105 0074 1A60     		str	r2, [r3, #0]
 157:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 158:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 159:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Set protocol and clock rate.
 160:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 161:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ui32SPH_SPO = (ui32Protocol & 3) << 6;
 106              		.loc 1 161 0
 107 0076 7B68     		ldr	r3, [r7, #4]
 108 0078 4FEA8313 		lsl	r3, r3, #6
 109 007c DBB2     		uxtb	r3, r3
 110 007e 7B61     		str	r3, [r7, #20]
 162:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ui32Protocol &= SSI_CR0_FRF_M;
 111              		.loc 1 162 0
 112 0080 7B68     		ldr	r3, [r7, #4]
 113 0082 03F03003 		and	r3, r3, #48
 114 0086 7B60     		str	r3, [r7, #4]
 163:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ui32RegVal = (ui32SCR << 8) | ui32SPH_SPO | ui32Protocol | (ui32DataWidth - 1);
 115              		.loc 1 163 0
 116 0088 BB69     		ldr	r3, [r7, #24]
 117 008a 4FEA0322 		lsl	r2, r3, #8
 118 008e 7B69     		ldr	r3, [r7, #20]
 119 0090 1A43     		orrs	r2, r2, r3
 120 0092 7B68     		ldr	r3, [r7, #4]
 121 0094 1A43     		orrs	r2, r2, r3
 122 0096 7B6B     		ldr	r3, [r7, #52]
 123 0098 03F1FF33 		add	r3, r3, #-1
 124 009c 1343     		orrs	r3, r3, r2
 125 009e 3B62     		str	r3, [r7, #32]
 164:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CR0) = ui32RegVal;
 126              		.loc 1 164 0
 127 00a0 FB68     		ldr	r3, [r7, #12]
 128 00a2 3A6A     		ldr	r2, [r7, #32]
 129 00a4 1A60     		str	r2, [r3, #0]
 165:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 130              		.loc 1 165 0
 131 00a6 07F12C07 		add	r7, r7, #44
 132 00aa BD46     		mov	sp, r7
 133 00ac 80BC     		pop	{r7}
 134 00ae 7047     		bx	lr
 135              		.cfi_endproc
 136              	.LFE0:
 138              		.align	2
 139              		.global	SSIEnable
 140              		.thumb
 141              		.thumb_func
 143              	SSIEnable:
 144              	.LFB1:
 166:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 167:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 168:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 169:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Enables the synchronous serial interface
 170:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 171:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 172:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 173:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function enables operation of the synchronous serial interface.  The
 174:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! synchronous serial interface must be configured before it is enabled.
 175:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 176:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 177:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 178:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 179:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 180:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIEnable(uint32_t ui32Base)
 181:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 145              		.loc 1 181 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 8
 148              		@ frame_needed = 1, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150 00b0 80B4     		push	{r7}
 151              	.LCFI3:
 152              		.cfi_def_cfa_offset 4
 153              		.cfi_offset 7, -4
 154 00b2 83B0     		sub	sp, sp, #12
 155              	.LCFI4:
 156              		.cfi_def_cfa_offset 16
 157 00b4 00AF     		add	r7, sp, #0
 158              	.LCFI5:
 159              		.cfi_def_cfa_register 7
 160 00b6 7860     		str	r0, [r7, #4]
 182:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 183:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 184:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 185:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 186:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 187:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 188:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Read-modify-write the enable bit.
 189:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 190:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CR1) |= SSI_CR1_SSE;
 161              		.loc 1 190 0
 162 00b8 7B68     		ldr	r3, [r7, #4]
 163 00ba 03F10403 		add	r3, r3, #4
 164 00be 7A68     		ldr	r2, [r7, #4]
 165 00c0 02F10402 		add	r2, r2, #4
 166 00c4 1268     		ldr	r2, [r2, #0]
 167 00c6 42F00202 		orr	r2, r2, #2
 168 00ca 1A60     		str	r2, [r3, #0]
 191:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 169              		.loc 1 191 0
 170 00cc 07F10C07 		add	r7, r7, #12
 171 00d0 BD46     		mov	sp, r7
 172 00d2 80BC     		pop	{r7}
 173 00d4 7047     		bx	lr
 174              		.cfi_endproc
 175              	.LFE1:
 177 00d6 00BF     		.align	2
 178              		.global	SSIDisable
 179              		.thumb
 180              		.thumb_func
 182              	SSIDisable:
 183              	.LFB2:
 192:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 193:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 194:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 195:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Disables the synchronous serial interface
 196:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 197:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 198:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 199:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function disables operation of the synchronous serial interface.
 200:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 201:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 202:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 203:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 204:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 205:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIDisable(uint32_t ui32Base)
 206:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 184              		.loc 1 206 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 8
 187              		@ frame_needed = 1, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189 00d8 80B4     		push	{r7}
 190              	.LCFI6:
 191              		.cfi_def_cfa_offset 4
 192              		.cfi_offset 7, -4
 193 00da 83B0     		sub	sp, sp, #12
 194              	.LCFI7:
 195              		.cfi_def_cfa_offset 16
 196 00dc 00AF     		add	r7, sp, #0
 197              	.LCFI8:
 198              		.cfi_def_cfa_register 7
 199 00de 7860     		str	r0, [r7, #4]
 207:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 208:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 209:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 210:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 211:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 212:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 213:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Read-modify-write the enable bit.
 214:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 215:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CR1) &= ~(SSI_CR1_SSE);
 200              		.loc 1 215 0
 201 00e0 7B68     		ldr	r3, [r7, #4]
 202 00e2 03F10403 		add	r3, r3, #4
 203 00e6 7A68     		ldr	r2, [r7, #4]
 204 00e8 02F10402 		add	r2, r2, #4
 205 00ec 1268     		ldr	r2, [r2, #0]
 206 00ee 22F00202 		bic	r2, r2, #2
 207 00f2 1A60     		str	r2, [r3, #0]
 216:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 208              		.loc 1 216 0
 209 00f4 07F10C07 		add	r7, r7, #12
 210 00f8 BD46     		mov	sp, r7
 211 00fa 80BC     		pop	{r7}
 212 00fc 7047     		bx	lr
 213              		.cfi_endproc
 214              	.LFE2:
 216 00fe 00BF     		.align	2
 217              		.global	SSIIntRegister
 218              		.thumb
 219              		.thumb_func
 221              	SSIIntRegister:
 222              	.LFB3:
 217:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 218:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 219:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 220:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Registers an interrupt handler for the synchronous serial interface
 221:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 222:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 223:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param pfnHandler is a pointer to the function to be called when the
 224:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! synchronous serial interface interrupt occurs.
 225:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 226:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This sets the handler to be called when an SSI interrupt
 227:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! occurs.  This will enable the global interrupt in the interrupt controller;
 228:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! specific SSI interrupts must be enabled via SSIIntEnable().  If necessary,
 229:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! it is the interrupt handler's responsibility to clear the interrupt source
 230:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! via SSIIntClear().
 231:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 232:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \sa See IntRegister() for important information about registering interrupt
 233:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! handlers.
 234:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 235:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 236:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 237:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 238:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 239:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIIntRegister(uint32_t ui32Base, void (*pfnHandler)(void))
 240:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 223              		.loc 1 240 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 16
 226              		@ frame_needed = 1, uses_anonymous_args = 0
 227 0100 80B5     		push	{r7, lr}
 228              	.LCFI9:
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 7, -8
 231              		.cfi_offset 14, -4
 232 0102 84B0     		sub	sp, sp, #16
 233              	.LCFI10:
 234              		.cfi_def_cfa_offset 24
 235 0104 00AF     		add	r7, sp, #0
 236              	.LCFI11:
 237              		.cfi_def_cfa_register 7
 238 0106 7860     		str	r0, [r7, #4]
 239 0108 3960     		str	r1, [r7, #0]
 241:bsp/boards/OpenMote-CC2538/source/ssi.c ****     uint32_t ui32Int;
 242:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 243:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 244:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 245:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 246:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 247:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 248:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 249:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Determine the interrupt number based on the SSI port.
 250:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 251:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ui32Int = (ui32Base == SSI0_BASE) ? INT_SSI0 : INT_SSI1;
 240              		.loc 1 251 0
 241 010a 7A68     		ldr	r2, [r7, #4]
 242 010c 4FF40043 		mov	r3, #32768
 243 0110 C4F20003 		movt	r3, 16384
 244 0114 9A42     		cmp	r2, r3
 245 0116 02D1     		bne	.L10
 246              		.loc 1 251 0 is_stmt 0 discriminator 1
 247 0118 4FF01703 		mov	r3, #23
 248 011c 01E0     		b	.L11
 249              	.L10:
 250              		.loc 1 251 0 discriminator 2
 251 011e 4FF03203 		mov	r3, #50
 252              	.L11:
 253              		.loc 1 251 0 discriminator 3
 254 0122 FB60     		str	r3, [r7, #12]
 252:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 253:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 254:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Register the interrupt handler, returning an error if an error occurs.
 255:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 256:bsp/boards/OpenMote-CC2538/source/ssi.c ****     IntRegister(ui32Int, pfnHandler);
 255              		.loc 1 256 0 is_stmt 1 discriminator 3
 256 0124 F868     		ldr	r0, [r7, #12]
 257 0126 3968     		ldr	r1, [r7, #0]
 258 0128 FFF7FEFF 		bl	IntRegister
 257:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 258:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 259:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Enable the synchronous serial interface interrupt.
 260:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 261:bsp/boards/OpenMote-CC2538/source/ssi.c ****     IntEnable(ui32Int);
 259              		.loc 1 261 0 discriminator 3
 260 012c F868     		ldr	r0, [r7, #12]
 261 012e FFF7FEFF 		bl	IntEnable
 262:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 262              		.loc 1 262 0 discriminator 3
 263 0132 07F11007 		add	r7, r7, #16
 264 0136 BD46     		mov	sp, r7
 265 0138 80BD     		pop	{r7, pc}
 266              		.cfi_endproc
 267              	.LFE3:
 269 013a 00BF     		.align	2
 270              		.global	SSIIntUnregister
 271              		.thumb
 272              		.thumb_func
 274              	SSIIntUnregister:
 275              	.LFB4:
 263:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 264:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 265:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 266:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Unregisters an interrupt handler for the synchronous serial interface
 267:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 268:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 269:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 270:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function will clear the handler to be called when a SSI
 271:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! interrupt occurs.  This will also mask off the interrupt in the interrupt
 272:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! controller so that the interrupt handler no longer is called.
 273:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 274:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \sa See IntRegister() for important information about registering interrupt
 275:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! handlers.
 276:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 277:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 278:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 279:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 280:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 281:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIIntUnregister(uint32_t ui32Base)
 282:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 276              		.loc 1 282 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 16
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280 013c 80B5     		push	{r7, lr}
 281              	.LCFI12:
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 013e 84B0     		sub	sp, sp, #16
 286              	.LCFI13:
 287              		.cfi_def_cfa_offset 24
 288 0140 00AF     		add	r7, sp, #0
 289              	.LCFI14:
 290              		.cfi_def_cfa_register 7
 291 0142 7860     		str	r0, [r7, #4]
 283:bsp/boards/OpenMote-CC2538/source/ssi.c ****     uint32_t ui32Int;
 284:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 285:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 286:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 287:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 288:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 289:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 290:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 291:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Determine the interrupt number based on the SSI port.
 292:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 293:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ui32Int = (ui32Base == SSI0_BASE) ? INT_SSI0 : INT_SSI1;
 292              		.loc 1 293 0
 293 0144 7A68     		ldr	r2, [r7, #4]
 294 0146 4FF40043 		mov	r3, #32768
 295 014a C4F20003 		movt	r3, 16384
 296 014e 9A42     		cmp	r2, r3
 297 0150 02D1     		bne	.L13
 298              		.loc 1 293 0 is_stmt 0 discriminator 1
 299 0152 4FF01703 		mov	r3, #23
 300 0156 01E0     		b	.L14
 301              	.L13:
 302              		.loc 1 293 0 discriminator 2
 303 0158 4FF03203 		mov	r3, #50
 304              	.L14:
 305              		.loc 1 293 0 discriminator 3
 306 015c FB60     		str	r3, [r7, #12]
 294:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 295:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 296:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Disable the interrupt.
 297:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 298:bsp/boards/OpenMote-CC2538/source/ssi.c ****     IntDisable(ui32Int);
 307              		.loc 1 298 0 is_stmt 1 discriminator 3
 308 015e F868     		ldr	r0, [r7, #12]
 309 0160 FFF7FEFF 		bl	IntDisable
 299:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 300:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 301:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Unregister the interrupt handler.
 302:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 303:bsp/boards/OpenMote-CC2538/source/ssi.c ****     IntUnregister(ui32Int);
 310              		.loc 1 303 0 discriminator 3
 311 0164 F868     		ldr	r0, [r7, #12]
 312 0166 FFF7FEFF 		bl	IntUnregister
 304:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 313              		.loc 1 304 0 discriminator 3
 314 016a 07F11007 		add	r7, r7, #16
 315 016e BD46     		mov	sp, r7
 316 0170 80BD     		pop	{r7, pc}
 317              		.cfi_endproc
 318              	.LFE4:
 320 0172 00BF     		.align	2
 321              		.global	SSIIntEnable
 322              		.thumb
 323              		.thumb_func
 325              	SSIIntEnable:
 326              	.LFB5:
 305:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 306:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 307:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 308:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Enables individual SSI interrupt sources
 309:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 310:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 311:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be enabled.
 312:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 313:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Enables the indicated SSI interrupt sources.  Only the sources that are
 314:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! enabled can be reflected to the processor interrupt; disabled sources have
 315:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! no effect on the processor.  The \e ui32IntFlags parameter can be any of the
 316:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \b SSI_TXFF, \b SSI_RXFF, \b SSI_RXTO, or \b SSI_RXOR values.
 317:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 318:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 319:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 320:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 321:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 322:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags)
 323:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 327              		.loc 1 323 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 8
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332 0174 80B4     		push	{r7}
 333              	.LCFI15:
 334              		.cfi_def_cfa_offset 4
 335              		.cfi_offset 7, -4
 336 0176 83B0     		sub	sp, sp, #12
 337              	.LCFI16:
 338              		.cfi_def_cfa_offset 16
 339 0178 00AF     		add	r7, sp, #0
 340              	.LCFI17:
 341              		.cfi_def_cfa_register 7
 342 017a 7860     		str	r0, [r7, #4]
 343 017c 3960     		str	r1, [r7, #0]
 324:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 325:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 326:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 327:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 328:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 329:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 330:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Enable the specified interrupts.
 331:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 332:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_IM) |= ui32IntFlags;
 344              		.loc 1 332 0
 345 017e 7B68     		ldr	r3, [r7, #4]
 346 0180 03F11403 		add	r3, r3, #20
 347 0184 7A68     		ldr	r2, [r7, #4]
 348 0186 02F11402 		add	r2, r2, #20
 349 018a 1168     		ldr	r1, [r2, #0]
 350 018c 3A68     		ldr	r2, [r7, #0]
 351 018e 0A43     		orrs	r2, r2, r1
 352 0190 1A60     		str	r2, [r3, #0]
 333:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 353              		.loc 1 333 0
 354 0192 07F10C07 		add	r7, r7, #12
 355 0196 BD46     		mov	sp, r7
 356 0198 80BC     		pop	{r7}
 357 019a 7047     		bx	lr
 358              		.cfi_endproc
 359              	.LFE5:
 361              		.align	2
 362              		.global	SSIIntDisable
 363              		.thumb
 364              		.thumb_func
 366              	SSIIntDisable:
 367              	.LFB6:
 334:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 335:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 336:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 337:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Disables individual SSI interrupt sources
 338:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 339:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 340:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be disabled.
 341:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 342:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Disables the indicated SSI interrupt sources.  The \e ui32IntFlags parameter
 343:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! can be any of the \b SSI_TXFF, \b SSI_RXFF, \b SSI_RXTO, or \b SSI_RXOR
 344:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! values.
 345:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 346:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 347:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 348:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 349:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 350:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags)
 351:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 368              		.loc 1 351 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 8
 371              		@ frame_needed = 1, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 373 019c 80B4     		push	{r7}
 374              	.LCFI18:
 375              		.cfi_def_cfa_offset 4
 376              		.cfi_offset 7, -4
 377 019e 83B0     		sub	sp, sp, #12
 378              	.LCFI19:
 379              		.cfi_def_cfa_offset 16
 380 01a0 00AF     		add	r7, sp, #0
 381              	.LCFI20:
 382              		.cfi_def_cfa_register 7
 383 01a2 7860     		str	r0, [r7, #4]
 384 01a4 3960     		str	r1, [r7, #0]
 352:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 353:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 354:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 355:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 356:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 357:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 358:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Disable the specified interrupts.
 359:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 360:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_IM) &= ~(ui32IntFlags);
 385              		.loc 1 360 0
 386 01a6 7B68     		ldr	r3, [r7, #4]
 387 01a8 03F11403 		add	r3, r3, #20
 388 01ac 7A68     		ldr	r2, [r7, #4]
 389 01ae 02F11402 		add	r2, r2, #20
 390 01b2 1168     		ldr	r1, [r2, #0]
 391 01b4 3A68     		ldr	r2, [r7, #0]
 392 01b6 6FEA0202 		mvn	r2, r2
 393 01ba 0A40     		ands	r2, r2, r1
 394 01bc 1A60     		str	r2, [r3, #0]
 361:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 395              		.loc 1 361 0
 396 01be 07F10C07 		add	r7, r7, #12
 397 01c2 BD46     		mov	sp, r7
 398 01c4 80BC     		pop	{r7}
 399 01c6 7047     		bx	lr
 400              		.cfi_endproc
 401              	.LFE6:
 403              		.align	2
 404              		.global	SSIIntStatus
 405              		.thumb
 406              		.thumb_func
 408              	SSIIntStatus:
 409              	.LFB7:
 362:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 363:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 364:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 365:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Gets the current interrupt status
 366:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 367:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 368:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param bMasked is \b false if the raw interrupt status is required or
 369:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \b true if the masked interrupt status is required.
 370:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 371:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function returns the interrupt status for the SSI module.  Either the
 372:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! raw interrupt status or the status of interrupts that are allowed to
 373:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! reflect to the processor can be returned.
 374:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 375:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return The current interrupt status, enumerated as a bit field of
 376:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \b SSI_TXFF, \b SSI_RXFF, \b SSI_RXTO, and \b SSI_RXOR.
 377:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 378:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 379:bsp/boards/OpenMote-CC2538/source/ssi.c **** uint32_t
 380:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIIntStatus(uint32_t ui32Base, bool bMasked)
 381:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 410              		.loc 1 381 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 8
 413              		@ frame_needed = 1, uses_anonymous_args = 0
 414              		@ link register save eliminated.
 415 01c8 80B4     		push	{r7}
 416              	.LCFI21:
 417              		.cfi_def_cfa_offset 4
 418              		.cfi_offset 7, -4
 419 01ca 83B0     		sub	sp, sp, #12
 420              	.LCFI22:
 421              		.cfi_def_cfa_offset 16
 422 01cc 00AF     		add	r7, sp, #0
 423              	.LCFI23:
 424              		.cfi_def_cfa_register 7
 425 01ce 7860     		str	r0, [r7, #4]
 426 01d0 0B46     		mov	r3, r1
 427 01d2 FB70     		strb	r3, [r7, #3]
 382:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 383:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 384:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 385:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 386:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 387:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 388:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Return either the interrupt status or the raw interrupt status as
 389:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // requested.
 390:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 391:bsp/boards/OpenMote-CC2538/source/ssi.c ****     if(bMasked)
 428              		.loc 1 391 0
 429 01d4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 430 01d6 002B     		cmp	r3, #0
 431 01d8 04D0     		beq	.L18
 392:bsp/boards/OpenMote-CC2538/source/ssi.c ****     {
 393:bsp/boards/OpenMote-CC2538/source/ssi.c ****         return(HWREG(ui32Base + SSI_O_MIS));
 432              		.loc 1 393 0
 433 01da 7B68     		ldr	r3, [r7, #4]
 434 01dc 03F11C03 		add	r3, r3, #28
 435 01e0 1B68     		ldr	r3, [r3, #0]
 436 01e2 03E0     		b	.L19
 437              	.L18:
 394:bsp/boards/OpenMote-CC2538/source/ssi.c ****     }
 395:bsp/boards/OpenMote-CC2538/source/ssi.c ****     else
 396:bsp/boards/OpenMote-CC2538/source/ssi.c ****     {
 397:bsp/boards/OpenMote-CC2538/source/ssi.c ****         return(HWREG(ui32Base + SSI_O_RIS));
 438              		.loc 1 397 0
 439 01e4 7B68     		ldr	r3, [r7, #4]
 440 01e6 03F11803 		add	r3, r3, #24
 441 01ea 1B68     		ldr	r3, [r3, #0]
 442              	.L19:
 398:bsp/boards/OpenMote-CC2538/source/ssi.c ****     }
 399:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 443              		.loc 1 399 0
 444 01ec 1846     		mov	r0, r3
 445 01ee 07F10C07 		add	r7, r7, #12
 446 01f2 BD46     		mov	sp, r7
 447 01f4 80BC     		pop	{r7}
 448 01f6 7047     		bx	lr
 449              		.cfi_endproc
 450              	.LFE7:
 452              		.align	2
 453              		.global	SSIIntClear
 454              		.thumb
 455              		.thumb_func
 457              	SSIIntClear:
 458              	.LFB8:
 400:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 401:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 402:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 403:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Clears SSI interrupt sources
 404:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 405:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 406:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be cleared.
 407:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 408:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! The specified SSI interrupt sources are cleared so that they no longer
 409:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! assert.  This function must be called in the interrupt handler to keep the
 410:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! interrupts from being recognized again immediately upon exit.  The
 411:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \e ui32IntFlags parameter can consist of either or both the \b SSI_RXTO and
 412:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \b SSI_RXOR values.
 413:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 414:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \note Because there is a write buffer in the Cortex-M3 processor, it may
 415:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! take several clock cycles before the interrupt source is actually cleared.
 416:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Therefore, it is recommended that the interrupt source be cleared early in
 417:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! the interrupt handler (as opposed to the very last action) to avoid
 418:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! returning from the interrupt handler before the interrupt source is
 419:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! actually cleared.  Failure to do so may result in the interrupt handler
 420:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! being immediately reentered (because the interrupt controller still sees
 421:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! the interrupt source asserted).
 422:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 423:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 424:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 425:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 426:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 427:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIIntClear(uint32_t ui32Base, uint32_t ui32IntFlags)
 428:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 459              		.loc 1 428 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 8
 462              		@ frame_needed = 1, uses_anonymous_args = 0
 463              		@ link register save eliminated.
 464 01f8 80B4     		push	{r7}
 465              	.LCFI24:
 466              		.cfi_def_cfa_offset 4
 467              		.cfi_offset 7, -4
 468 01fa 83B0     		sub	sp, sp, #12
 469              	.LCFI25:
 470              		.cfi_def_cfa_offset 16
 471 01fc 00AF     		add	r7, sp, #0
 472              	.LCFI26:
 473              		.cfi_def_cfa_register 7
 474 01fe 7860     		str	r0, [r7, #4]
 475 0200 3960     		str	r1, [r7, #0]
 429:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 430:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 431:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 432:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 433:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 434:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 435:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Clear the requested interrupt sources.
 436:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 437:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_ICR) = ui32IntFlags;
 476              		.loc 1 437 0
 477 0202 7B68     		ldr	r3, [r7, #4]
 478 0204 03F12003 		add	r3, r3, #32
 479 0208 3A68     		ldr	r2, [r7, #0]
 480 020a 1A60     		str	r2, [r3, #0]
 438:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 481              		.loc 1 438 0
 482 020c 07F10C07 		add	r7, r7, #12
 483 0210 BD46     		mov	sp, r7
 484 0212 80BC     		pop	{r7}
 485 0214 7047     		bx	lr
 486              		.cfi_endproc
 487              	.LFE8:
 489 0216 00BF     		.align	2
 490              		.global	SSIDataPut
 491              		.thumb
 492              		.thumb_func
 494              	SSIDataPut:
 495              	.LFB9:
 439:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 440:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 441:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 442:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Puts a data element into the SSI transmit FIFO
 443:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 444:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 445:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Data is the data to be transmitted over the SSI interface.
 446:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 447:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function places the supplied data into the transmit FIFO of the
 448:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! specified SSI module.
 449:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 450:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \note The upper 32 - N bits of the \e ui32Data are discarded by the hardware,
 451:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! where N is the data width as configured by SSIConfigSetExpClk().  For
 452:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! example, if the interface is configured for 8-bit data width, the upper 24
 453:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! bits of \e ui32Data are discarded.
 454:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 455:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 456:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 457:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 458:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 459:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIDataPut(uint32_t ui32Base, uint32_t ui32Data)
 460:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 496              		.loc 1 460 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 8
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501 0218 80B4     		push	{r7}
 502              	.LCFI27:
 503              		.cfi_def_cfa_offset 4
 504              		.cfi_offset 7, -4
 505 021a 83B0     		sub	sp, sp, #12
 506              	.LCFI28:
 507              		.cfi_def_cfa_offset 16
 508 021c 00AF     		add	r7, sp, #0
 509              	.LCFI29:
 510              		.cfi_def_cfa_register 7
 511 021e 7860     		str	r0, [r7, #4]
 512 0220 3960     		str	r1, [r7, #0]
 461:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 462:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 463:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 464:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 465:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Data & (0xfffffffe << (HWREG(ui32Base + SSI_O_CR0) &
 466:bsp/boards/OpenMote-CC2538/source/ssi.c ****                                        SSI_CR0_DSS_M))) == 0);
 467:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 468:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 469:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Wait until there is space.
 470:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 471:bsp/boards/OpenMote-CC2538/source/ssi.c ****     while(!(HWREG(ui32Base + SSI_O_SR) & SSI_SR_TNF))
 513              		.loc 1 471 0
 514 0222 00BF     		nop
 515              	.L22:
 516              		.loc 1 471 0 is_stmt 0 discriminator 1
 517 0224 7B68     		ldr	r3, [r7, #4]
 518 0226 03F10C03 		add	r3, r3, #12
 519 022a 1B68     		ldr	r3, [r3, #0]
 520 022c 03F00203 		and	r3, r3, #2
 521 0230 002B     		cmp	r3, #0
 522 0232 F7D0     		beq	.L22
 472:bsp/boards/OpenMote-CC2538/source/ssi.c ****     {
 473:bsp/boards/OpenMote-CC2538/source/ssi.c ****     }
 474:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 475:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 476:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Write the data to the SSI.
 477:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 478:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_DR) = ui32Data;
 523              		.loc 1 478 0 is_stmt 1
 524 0234 7B68     		ldr	r3, [r7, #4]
 525 0236 03F10803 		add	r3, r3, #8
 526 023a 3A68     		ldr	r2, [r7, #0]
 527 023c 1A60     		str	r2, [r3, #0]
 479:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 528              		.loc 1 479 0
 529 023e 07F10C07 		add	r7, r7, #12
 530 0242 BD46     		mov	sp, r7
 531 0244 80BC     		pop	{r7}
 532 0246 7047     		bx	lr
 533              		.cfi_endproc
 534              	.LFE9:
 536              		.align	2
 537              		.global	SSIDataPutNonBlocking
 538              		.thumb
 539              		.thumb_func
 541              	SSIDataPutNonBlocking:
 542              	.LFB10:
 480:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 481:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 482:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 483:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Puts a data element into the SSI transmit FIFO
 484:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 485:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 486:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Data is the data to be transmitted over the SSI interface.
 487:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 488:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function places the supplied data into the transmit FIFO of the
 489:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! specified SSI module.  If there is no space in the FIFO, then this function
 490:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! returns a zero.
 491:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 492:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \note The upper 32 - N bits of the \e ui32Data are discarded by the hardware,
 493:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! where N is the data width as configured by SSIConfigSetExpClk().  For
 494:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! example, if the interface is configured for 8-bit data width, the upper 24
 495:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! bits of \e ui32Data are discarded.
 496:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 497:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return Returns the number of elements written to the SSI transmit FIFO.
 498:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 499:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 500:bsp/boards/OpenMote-CC2538/source/ssi.c **** int32_t
 501:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIDataPutNonBlocking(uint32_t ui32Base, uint32_t ui32Data)
 502:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 543              		.loc 1 502 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 8
 546              		@ frame_needed = 1, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548 0248 80B4     		push	{r7}
 549              	.LCFI30:
 550              		.cfi_def_cfa_offset 4
 551              		.cfi_offset 7, -4
 552 024a 83B0     		sub	sp, sp, #12
 553              	.LCFI31:
 554              		.cfi_def_cfa_offset 16
 555 024c 00AF     		add	r7, sp, #0
 556              	.LCFI32:
 557              		.cfi_def_cfa_register 7
 558 024e 7860     		str	r0, [r7, #4]
 559 0250 3960     		str	r1, [r7, #0]
 503:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 504:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 505:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 506:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 507:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Data & (0xfffffffe << (HWREG(ui32Base + SSI_O_CR0) &
 508:bsp/boards/OpenMote-CC2538/source/ssi.c ****                                        SSI_CR0_DSS_M))) == 0);
 509:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 510:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 511:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check for space to write.
 512:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 513:bsp/boards/OpenMote-CC2538/source/ssi.c ****     if(HWREG(ui32Base + SSI_O_SR) & SSI_SR_TNF)
 560              		.loc 1 513 0
 561 0252 7B68     		ldr	r3, [r7, #4]
 562 0254 03F10C03 		add	r3, r3, #12
 563 0258 1B68     		ldr	r3, [r3, #0]
 564 025a 03F00203 		and	r3, r3, #2
 565 025e 002B     		cmp	r3, #0
 566 0260 07D0     		beq	.L24
 514:bsp/boards/OpenMote-CC2538/source/ssi.c ****     {
 515:bsp/boards/OpenMote-CC2538/source/ssi.c ****         HWREG(ui32Base + SSI_O_DR) = ui32Data;
 567              		.loc 1 515 0
 568 0262 7B68     		ldr	r3, [r7, #4]
 569 0264 03F10803 		add	r3, r3, #8
 570 0268 3A68     		ldr	r2, [r7, #0]
 571 026a 1A60     		str	r2, [r3, #0]
 516:bsp/boards/OpenMote-CC2538/source/ssi.c ****         return(1);
 572              		.loc 1 516 0
 573 026c 4FF00103 		mov	r3, #1
 574 0270 01E0     		b	.L25
 575              	.L24:
 517:bsp/boards/OpenMote-CC2538/source/ssi.c ****     }
 518:bsp/boards/OpenMote-CC2538/source/ssi.c ****     else
 519:bsp/boards/OpenMote-CC2538/source/ssi.c ****     {
 520:bsp/boards/OpenMote-CC2538/source/ssi.c ****         return(0);
 576              		.loc 1 520 0
 577 0272 4FF00003 		mov	r3, #0
 578              	.L25:
 521:bsp/boards/OpenMote-CC2538/source/ssi.c ****     }
 522:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 579              		.loc 1 522 0
 580 0276 1846     		mov	r0, r3
 581 0278 07F10C07 		add	r7, r7, #12
 582 027c BD46     		mov	sp, r7
 583 027e 80BC     		pop	{r7}
 584 0280 7047     		bx	lr
 585              		.cfi_endproc
 586              	.LFE10:
 588 0282 00BF     		.align	2
 589              		.global	SSIDataGet
 590              		.thumb
 591              		.thumb_func
 593              	SSIDataGet:
 594              	.LFB11:
 523:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 524:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 525:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 526:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Gets a data element from the SSI receive FIFO
 527:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 528:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 529:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param pui32Data is a pointer to a storage location for data that was
 530:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! received over the SSI interface.
 531:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 532:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function gets received data from the receive FIFO of the specified
 533:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! SSI module and places that data into the location specified by the
 534:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \e pui32Data parameter.
 535:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 536:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \note Only the lower N bits of the value written to \e pui32Data contain
 537:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! valid data, where N is the data width as configured by
 538:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! SSIConfigSetExpClk().  For example, if the interface is configured for
 539:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! 8-bit data width, only the lower 8 bits of the value written to \e pui32Data
 540:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! contain valid data.
 541:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 542:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 543:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 544:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 545:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 546:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIDataGet(uint32_t ui32Base, uint32_t *pui32Data)
 547:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 595              		.loc 1 547 0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 8
 598              		@ frame_needed = 1, uses_anonymous_args = 0
 599              		@ link register save eliminated.
 600 0284 80B4     		push	{r7}
 601              	.LCFI33:
 602              		.cfi_def_cfa_offset 4
 603              		.cfi_offset 7, -4
 604 0286 83B0     		sub	sp, sp, #12
 605              	.LCFI34:
 606              		.cfi_def_cfa_offset 16
 607 0288 00AF     		add	r7, sp, #0
 608              	.LCFI35:
 609              		.cfi_def_cfa_register 7
 610 028a 7860     		str	r0, [r7, #4]
 611 028c 3960     		str	r1, [r7, #0]
 548:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 549:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 550:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 551:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 552:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 553:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 554:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Wait until there is data to be read.
 555:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 556:bsp/boards/OpenMote-CC2538/source/ssi.c ****     while(!(HWREG(ui32Base + SSI_O_SR) & SSI_SR_RNE))
 612              		.loc 1 556 0
 613 028e 00BF     		nop
 614              	.L27:
 615              		.loc 1 556 0 is_stmt 0 discriminator 1
 616 0290 7B68     		ldr	r3, [r7, #4]
 617 0292 03F10C03 		add	r3, r3, #12
 618 0296 1B68     		ldr	r3, [r3, #0]
 619 0298 03F00403 		and	r3, r3, #4
 620 029c 002B     		cmp	r3, #0
 621 029e F7D0     		beq	.L27
 557:bsp/boards/OpenMote-CC2538/source/ssi.c ****     {
 558:bsp/boards/OpenMote-CC2538/source/ssi.c ****     }
 559:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 560:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 561:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Read data from SSI.
 562:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 563:bsp/boards/OpenMote-CC2538/source/ssi.c ****     *pui32Data = HWREG(ui32Base + SSI_O_DR);
 622              		.loc 1 563 0 is_stmt 1
 623 02a0 7B68     		ldr	r3, [r7, #4]
 624 02a2 03F10803 		add	r3, r3, #8
 625 02a6 1A68     		ldr	r2, [r3, #0]
 626 02a8 3B68     		ldr	r3, [r7, #0]
 627 02aa 1A60     		str	r2, [r3, #0]
 564:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 628              		.loc 1 564 0
 629 02ac 07F10C07 		add	r7, r7, #12
 630 02b0 BD46     		mov	sp, r7
 631 02b2 80BC     		pop	{r7}
 632 02b4 7047     		bx	lr
 633              		.cfi_endproc
 634              	.LFE11:
 636 02b6 00BF     		.align	2
 637              		.global	SSIDataGetNonBlocking
 638              		.thumb
 639              		.thumb_func
 641              	SSIDataGetNonBlocking:
 642              	.LFB12:
 565:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 566:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 567:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 568:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Gets a data element from the SSI receive FIFO
 569:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 570:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 571:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param pui32Data is a pointer to a storage location for data that was
 572:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! received over the SSI interface.
 573:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 574:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function gets received data from the receive FIFO of the specified SSI
 575:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! module and places that data into the location specified by the \e ui32Data
 576:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! parameter.  If there is no data in the FIFO, then this function returns a
 577:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! zero.
 578:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 579:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \note Only the lower N bits of the value written to \e pui32Data contain
 580:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! valid data, where N is the data width as configured by
 581:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! SSIConfigSetExpClk().  For example, if the interface is configured for
 582:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! 8-bit data width, only the lower 8 bits of the value written to \e pui32Data
 583:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! contain valid data.
 584:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 585:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return Returns the number of elements read from the SSI receive FIFO.
 586:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 587:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 588:bsp/boards/OpenMote-CC2538/source/ssi.c **** int32_t
 589:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIDataGetNonBlocking(uint32_t ui32Base, uint32_t *pui32Data)
 590:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 643              		.loc 1 590 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 8
 646              		@ frame_needed = 1, uses_anonymous_args = 0
 647              		@ link register save eliminated.
 648 02b8 80B4     		push	{r7}
 649              	.LCFI36:
 650              		.cfi_def_cfa_offset 4
 651              		.cfi_offset 7, -4
 652 02ba 83B0     		sub	sp, sp, #12
 653              	.LCFI37:
 654              		.cfi_def_cfa_offset 16
 655 02bc 00AF     		add	r7, sp, #0
 656              	.LCFI38:
 657              		.cfi_def_cfa_register 7
 658 02be 7860     		str	r0, [r7, #4]
 659 02c0 3960     		str	r1, [r7, #0]
 591:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 592:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 593:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 594:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 595:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 596:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 597:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check for data to read.
 598:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 599:bsp/boards/OpenMote-CC2538/source/ssi.c ****     if(HWREG(ui32Base + SSI_O_SR) & SSI_SR_RNE)
 660              		.loc 1 599 0
 661 02c2 7B68     		ldr	r3, [r7, #4]
 662 02c4 03F10C03 		add	r3, r3, #12
 663 02c8 1B68     		ldr	r3, [r3, #0]
 664 02ca 03F00403 		and	r3, r3, #4
 665 02ce 002B     		cmp	r3, #0
 666 02d0 08D0     		beq	.L29
 600:bsp/boards/OpenMote-CC2538/source/ssi.c ****     {
 601:bsp/boards/OpenMote-CC2538/source/ssi.c ****         *pui32Data = HWREG(ui32Base + SSI_O_DR);
 667              		.loc 1 601 0
 668 02d2 7B68     		ldr	r3, [r7, #4]
 669 02d4 03F10803 		add	r3, r3, #8
 670 02d8 1A68     		ldr	r2, [r3, #0]
 671 02da 3B68     		ldr	r3, [r7, #0]
 672 02dc 1A60     		str	r2, [r3, #0]
 602:bsp/boards/OpenMote-CC2538/source/ssi.c ****         return(1);
 673              		.loc 1 602 0
 674 02de 4FF00103 		mov	r3, #1
 675 02e2 01E0     		b	.L30
 676              	.L29:
 603:bsp/boards/OpenMote-CC2538/source/ssi.c ****     }
 604:bsp/boards/OpenMote-CC2538/source/ssi.c ****     else
 605:bsp/boards/OpenMote-CC2538/source/ssi.c ****     {
 606:bsp/boards/OpenMote-CC2538/source/ssi.c ****         return(0);
 677              		.loc 1 606 0
 678 02e4 4FF00003 		mov	r3, #0
 679              	.L30:
 607:bsp/boards/OpenMote-CC2538/source/ssi.c ****     }
 608:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 680              		.loc 1 608 0
 681 02e8 1846     		mov	r0, r3
 682 02ea 07F10C07 		add	r7, r7, #12
 683 02ee BD46     		mov	sp, r7
 684 02f0 80BC     		pop	{r7}
 685 02f2 7047     		bx	lr
 686              		.cfi_endproc
 687              	.LFE12:
 689              		.align	2
 690              		.global	SSIDMAEnable
 691              		.thumb
 692              		.thumb_func
 694              	SSIDMAEnable:
 695              	.LFB13:
 609:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 610:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 611:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 612:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Enable SSI DMA operation
 613:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 614:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 615:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to enable.
 616:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 617:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! The specified SSI DMA features are enabled.  The SSI can be
 618:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! configured to use DMA for transmit and/or receive data transfers.
 619:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! The \e ui32DMAFlags parameter is the logical OR of any of the following
 620:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! values:
 621:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 622:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! - SSI_DMA_RX - enable DMA for receive
 623:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! - SSI_DMA_TX - enable DMA for transmit
 624:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 625:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \note The uDMA controller must also be set up before DMA can be used
 626:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! with the SSI.
 627:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 628:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 629:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 630:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 631:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 632:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIDMAEnable(uint32_t ui32Base, uint32_t ui32DMAFlags)
 633:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 696              		.loc 1 633 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 8
 699              		@ frame_needed = 1, uses_anonymous_args = 0
 700              		@ link register save eliminated.
 701 02f4 80B4     		push	{r7}
 702              	.LCFI39:
 703              		.cfi_def_cfa_offset 4
 704              		.cfi_offset 7, -4
 705 02f6 83B0     		sub	sp, sp, #12
 706              	.LCFI40:
 707              		.cfi_def_cfa_offset 16
 708 02f8 00AF     		add	r7, sp, #0
 709              	.LCFI41:
 710              		.cfi_def_cfa_register 7
 711 02fa 7860     		str	r0, [r7, #4]
 712 02fc 3960     		str	r1, [r7, #0]
 634:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 635:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 636:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 637:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 638:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 639:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 640:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Set the requested bits in the SSI DMA control register.
 641:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 642:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_DMACTL) |= ui32DMAFlags;
 713              		.loc 1 642 0
 714 02fe 7B68     		ldr	r3, [r7, #4]
 715 0300 03F12403 		add	r3, r3, #36
 716 0304 7A68     		ldr	r2, [r7, #4]
 717 0306 02F12402 		add	r2, r2, #36
 718 030a 1168     		ldr	r1, [r2, #0]
 719 030c 3A68     		ldr	r2, [r7, #0]
 720 030e 0A43     		orrs	r2, r2, r1
 721 0310 1A60     		str	r2, [r3, #0]
 643:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 722              		.loc 1 643 0
 723 0312 07F10C07 		add	r7, r7, #12
 724 0316 BD46     		mov	sp, r7
 725 0318 80BC     		pop	{r7}
 726 031a 7047     		bx	lr
 727              		.cfi_endproc
 728              	.LFE13:
 730              		.align	2
 731              		.global	SSIDMADisable
 732              		.thumb
 733              		.thumb_func
 735              	SSIDMADisable:
 736              	.LFB14:
 644:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 645:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 646:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 647:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Disable SSI DMA operation
 648:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 649:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 650:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to disable.
 651:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 652:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function is used to disable SSI DMA features that were enabled
 653:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! by SSIDMAEnable().  The specified SSI DMA features are disabled.  The
 654:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \e ui32DMAFlags parameter is the logical OR of any of the following values:
 655:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 656:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! - SSI_DMA_RX - disable DMA for receive
 657:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! - SSI_DMA_TX - disable DMA for transmit
 658:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 659:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 660:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 661:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 662:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 663:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIDMADisable(uint32_t ui32Base, uint32_t ui32DMAFlags)
 664:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 737              		.loc 1 664 0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 8
 740              		@ frame_needed = 1, uses_anonymous_args = 0
 741              		@ link register save eliminated.
 742 031c 80B4     		push	{r7}
 743              	.LCFI42:
 744              		.cfi_def_cfa_offset 4
 745              		.cfi_offset 7, -4
 746 031e 83B0     		sub	sp, sp, #12
 747              	.LCFI43:
 748              		.cfi_def_cfa_offset 16
 749 0320 00AF     		add	r7, sp, #0
 750              	.LCFI44:
 751              		.cfi_def_cfa_register 7
 752 0322 7860     		str	r0, [r7, #4]
 753 0324 3960     		str	r1, [r7, #0]
 665:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 666:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 667:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 668:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 669:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 670:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 671:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Clear the requested bits in the SSI DMA control register.
 672:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 673:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_DMACTL) &= ~ui32DMAFlags;
 754              		.loc 1 673 0
 755 0326 7B68     		ldr	r3, [r7, #4]
 756 0328 03F12403 		add	r3, r3, #36
 757 032c 7A68     		ldr	r2, [r7, #4]
 758 032e 02F12402 		add	r2, r2, #36
 759 0332 1168     		ldr	r1, [r2, #0]
 760 0334 3A68     		ldr	r2, [r7, #0]
 761 0336 6FEA0202 		mvn	r2, r2
 762 033a 0A40     		ands	r2, r2, r1
 763 033c 1A60     		str	r2, [r3, #0]
 674:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 764              		.loc 1 674 0
 765 033e 07F10C07 		add	r7, r7, #12
 766 0342 BD46     		mov	sp, r7
 767 0344 80BC     		pop	{r7}
 768 0346 7047     		bx	lr
 769              		.cfi_endproc
 770              	.LFE14:
 772              		.align	2
 773              		.global	SSIBusy
 774              		.thumb
 775              		.thumb_func
 777              	SSIBusy:
 778              	.LFB15:
 675:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 676:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 677:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 678:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Determines whether the SSI transmitter is busy or not
 679:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 680:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 681:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 682:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Allows the caller to determine whether all transmitted bytes have cleared
 683:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! the transmitter hardware.  If \b false is returned, then the transmit FIFO
 684:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! is empty and all bits of the last transmitted word have left the hardware
 685:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! shift register.
 686:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 687:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return Returns \b true if the SSI is transmitting or \b false if all
 688:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! transmissions are complete.
 689:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 690:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 691:bsp/boards/OpenMote-CC2538/source/ssi.c **** bool
 692:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIBusy(uint32_t ui32Base)
 693:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 779              		.loc 1 693 0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 8
 782              		@ frame_needed = 1, uses_anonymous_args = 0
 783              		@ link register save eliminated.
 784 0348 80B4     		push	{r7}
 785              	.LCFI45:
 786              		.cfi_def_cfa_offset 4
 787              		.cfi_offset 7, -4
 788 034a 83B0     		sub	sp, sp, #12
 789              	.LCFI46:
 790              		.cfi_def_cfa_offset 16
 791 034c 00AF     		add	r7, sp, #0
 792              	.LCFI47:
 793              		.cfi_def_cfa_register 7
 794 034e 7860     		str	r0, [r7, #4]
 694:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 695:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 696:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 697:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 698:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 699:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 700:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Determine if the SSI is busy.
 701:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 702:bsp/boards/OpenMote-CC2538/source/ssi.c ****     return((HWREG(ui32Base + SSI_O_SR) & SSI_SR_BSY) ? true : false);
 795              		.loc 1 702 0
 796 0350 7B68     		ldr	r3, [r7, #4]
 797 0352 03F10C03 		add	r3, r3, #12
 798 0356 1B68     		ldr	r3, [r3, #0]
 799 0358 03F01003 		and	r3, r3, #16
 800 035c 002B     		cmp	r3, #0
 801 035e 0CBF     		ite	eq
 802 0360 0023     		moveq	r3, #0
 803 0362 0123     		movne	r3, #1
 804 0364 DBB2     		uxtb	r3, r3
 703:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 805              		.loc 1 703 0
 806 0366 1846     		mov	r0, r3
 807 0368 07F10C07 		add	r7, r7, #12
 808 036c BD46     		mov	sp, r7
 809 036e 80BC     		pop	{r7}
 810 0370 7047     		bx	lr
 811              		.cfi_endproc
 812              	.LFE15:
 814 0372 00BF     		.align	2
 815              		.global	SSIClockSourceSet
 816              		.thumb
 817              		.thumb_func
 819              	SSIClockSourceSet:
 820              	.LFB16:
 704:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 705:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 706:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 707:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Sets the data clock source for the specified SSI peripheral
 708:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 709:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 710:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Source is the baud clock source for the SSI.
 711:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 712:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function allows the baud clock source for the SSI to be selected.
 713:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! The possible clock source are the system clock (\b SSI_CLOCK_SYSTEM) or
 714:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! the precision internal oscillator (\b SSI_CLOCK_PIOSC), i.e. the IO clock
 715:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! in the SysCtrl.
 716:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! If \b SSI_CLOCK_SYSTEM is chosen, the IO clock frequency must thus be
 717:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! queried by SysCtrlClockSet().
 718:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! If \b SSI_CLOCK_PIOSC the SysCtrlIOClockSet() function must be used.
 719:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 720:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Changing the baud clock source will change the data rate generated by the
 721:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! SSI.  Therefore, the data rate should be reconfigured after any change to
 722:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! the SSI clock source.
 723:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 724:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 725:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 726:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 727:bsp/boards/OpenMote-CC2538/source/ssi.c **** void
 728:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIClockSourceSet(uint32_t ui32Base, uint32_t ui32Source)
 729:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 821              		.loc 1 729 0
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 8
 824              		@ frame_needed = 1, uses_anonymous_args = 0
 825              		@ link register save eliminated.
 826 0374 80B4     		push	{r7}
 827              	.LCFI48:
 828              		.cfi_def_cfa_offset 4
 829              		.cfi_offset 7, -4
 830 0376 83B0     		sub	sp, sp, #12
 831              	.LCFI49:
 832              		.cfi_def_cfa_offset 16
 833 0378 00AF     		add	r7, sp, #0
 834              	.LCFI50:
 835              		.cfi_def_cfa_register 7
 836 037a 7860     		str	r0, [r7, #4]
 837 037c 3960     		str	r1, [r7, #0]
 730:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 731:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 732:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 733:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 734:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Source == SSI_CLOCK_SYSTEM) || (ui32Source == SSI_CLOCK_PIOSC));
 735:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 736:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 737:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Set the SSI clock source.
 738:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 739:bsp/boards/OpenMote-CC2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CC) = ui32Source;
 838              		.loc 1 739 0
 839 037e 7B68     		ldr	r3, [r7, #4]
 840 0380 03F6C873 		addw	r3, r3, #4040
 841 0384 3A68     		ldr	r2, [r7, #0]
 842 0386 1A60     		str	r2, [r3, #0]
 740:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 843              		.loc 1 740 0
 844 0388 07F10C07 		add	r7, r7, #12
 845 038c BD46     		mov	sp, r7
 846 038e 80BC     		pop	{r7}
 847 0390 7047     		bx	lr
 848              		.cfi_endproc
 849              	.LFE16:
 851 0392 00BF     		.align	2
 852              		.global	SSIClockSourceGet
 853              		.thumb
 854              		.thumb_func
 856              	SSIClockSourceGet:
 857              	.LFB17:
 741:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 742:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 743:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 744:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! Gets the data clock source for the specified SSI peripheral
 745:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 746:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 747:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 748:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! This function returns the data clock source for the specified SSI.  The
 749:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! possible data clock source are the system clock (\b SSI_CLOCK_SYSTEM) or
 750:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! the precision internal oscillator (\b SSI_CLOCK_PIOSC).
 751:bsp/boards/OpenMote-CC2538/source/ssi.c **** //!
 752:bsp/boards/OpenMote-CC2538/source/ssi.c **** //! \return None
 753:bsp/boards/OpenMote-CC2538/source/ssi.c **** //
 754:bsp/boards/OpenMote-CC2538/source/ssi.c **** //*****************************************************************************
 755:bsp/boards/OpenMote-CC2538/source/ssi.c **** uint32_t
 756:bsp/boards/OpenMote-CC2538/source/ssi.c **** SSIClockSourceGet(uint32_t ui32Base)
 757:bsp/boards/OpenMote-CC2538/source/ssi.c **** {
 858              		.loc 1 757 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 8
 861              		@ frame_needed = 1, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 863 0394 80B4     		push	{r7}
 864              	.LCFI51:
 865              		.cfi_def_cfa_offset 4
 866              		.cfi_offset 7, -4
 867 0396 83B0     		sub	sp, sp, #12
 868              	.LCFI52:
 869              		.cfi_def_cfa_offset 16
 870 0398 00AF     		add	r7, sp, #0
 871              	.LCFI53:
 872              		.cfi_def_cfa_register 7
 873 039a 7860     		str	r0, [r7, #4]
 758:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 759:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Check the arguments.
 760:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 761:bsp/boards/OpenMote-CC2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 762:bsp/boards/OpenMote-CC2538/source/ssi.c **** 
 763:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 764:bsp/boards/OpenMote-CC2538/source/ssi.c ****     // Return the SSI clock source.
 765:bsp/boards/OpenMote-CC2538/source/ssi.c ****     //
 766:bsp/boards/OpenMote-CC2538/source/ssi.c ****     return(HWREG(ui32Base + SSI_O_CC));
 874              		.loc 1 766 0
 875 039c 7B68     		ldr	r3, [r7, #4]
 876 039e 03F6C873 		addw	r3, r3, #4040
 877 03a2 1B68     		ldr	r3, [r3, #0]
 767:bsp/boards/OpenMote-CC2538/source/ssi.c **** }
 878              		.loc 1 767 0
 879 03a4 1846     		mov	r0, r3
 880 03a6 07F10C07 		add	r7, r7, #12
 881 03aa BD46     		mov	sp, r7
 882 03ac 80BC     		pop	{r7}
 883 03ae 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE17:
 887              	.Letext0:
 888              		.file 2 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
DEFINED SYMBOLS
                            *ABS*:00000000 ssi.c
     /tmp/ccK2l3hf.s:18     .text:00000000 $t
     /tmp/ccK2l3hf.s:23     .text:00000000 SSIConfigSetExpClk
     /tmp/ccK2l3hf.s:143    .text:000000b0 SSIEnable
     /tmp/ccK2l3hf.s:182    .text:000000d8 SSIDisable
     /tmp/ccK2l3hf.s:221    .text:00000100 SSIIntRegister
     /tmp/ccK2l3hf.s:274    .text:0000013c SSIIntUnregister
     /tmp/ccK2l3hf.s:325    .text:00000174 SSIIntEnable
     /tmp/ccK2l3hf.s:366    .text:0000019c SSIIntDisable
     /tmp/ccK2l3hf.s:408    .text:000001c8 SSIIntStatus
     /tmp/ccK2l3hf.s:457    .text:000001f8 SSIIntClear
     /tmp/ccK2l3hf.s:494    .text:00000218 SSIDataPut
     /tmp/ccK2l3hf.s:541    .text:00000248 SSIDataPutNonBlocking
     /tmp/ccK2l3hf.s:593    .text:00000284 SSIDataGet
     /tmp/ccK2l3hf.s:641    .text:000002b8 SSIDataGetNonBlocking
     /tmp/ccK2l3hf.s:694    .text:000002f4 SSIDMAEnable
     /tmp/ccK2l3hf.s:735    .text:0000031c SSIDMADisable
     /tmp/ccK2l3hf.s:777    .text:00000348 SSIBusy
     /tmp/ccK2l3hf.s:819    .text:00000374 SSIClockSourceSet
     /tmp/ccK2l3hf.s:856    .text:00000394 SSIClockSourceGet
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e96eee74da26538b12ac9582e3798382
                           .group:00000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:00000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:00000000 wm4.hw_ssi.h.39.9082f14e87d6077894a6e46eebe76d2f
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.ssi.h.41.9d9fef101e9b51d683ad9b5927a1b748

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
