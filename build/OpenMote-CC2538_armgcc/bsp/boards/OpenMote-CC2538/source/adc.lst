   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	SOCADCIntRegister
  20              		.thumb
  21              		.thumb_func
  23              	SOCADCIntRegister:
  24              	.LFB0:
  25              		.file 1 "bsp/boards/OpenMote-CC2538/source/adc.c"
   1:bsp/boards/OpenMote-CC2538/source/adc.c **** /******************************************************************************
   2:bsp/boards/OpenMote-CC2538/source/adc.c **** *  Filename:       adc.c
   3:bsp/boards/OpenMote-CC2538/source/adc.c **** *  Revised:        $Date: 2013-03-24 11:41:19 +0100 (Sun, 24 Mar 2013) $
   4:bsp/boards/OpenMote-CC2538/source/adc.c **** *  Revision:       $Revision: 9521 $
   5:bsp/boards/OpenMote-CC2538/source/adc.c **** *
   6:bsp/boards/OpenMote-CC2538/source/adc.c **** *  Description:    Driver for the SOC ADC Module.
   7:bsp/boards/OpenMote-CC2538/source/adc.c **** *
   8:bsp/boards/OpenMote-CC2538/source/adc.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:bsp/boards/OpenMote-CC2538/source/adc.c **** *
  10:bsp/boards/OpenMote-CC2538/source/adc.c **** *
  11:bsp/boards/OpenMote-CC2538/source/adc.c **** *  Redistribution and use in source and binary forms, with or without
  12:bsp/boards/OpenMote-CC2538/source/adc.c **** *  modification, are permitted provided that the following conditions
  13:bsp/boards/OpenMote-CC2538/source/adc.c **** *  are met:
  14:bsp/boards/OpenMote-CC2538/source/adc.c **** *
  15:bsp/boards/OpenMote-CC2538/source/adc.c **** *    Redistributions of source code must retain the above copyright
  16:bsp/boards/OpenMote-CC2538/source/adc.c **** *    notice, this list of conditions and the following disclaimer.
  17:bsp/boards/OpenMote-CC2538/source/adc.c **** *
  18:bsp/boards/OpenMote-CC2538/source/adc.c **** *    Redistributions in binary form must reproduce the above copyright
  19:bsp/boards/OpenMote-CC2538/source/adc.c **** *    notice, this list of conditions and the following disclaimer in the
  20:bsp/boards/OpenMote-CC2538/source/adc.c **** *    documentation and/or other materials provided with the distribution.
  21:bsp/boards/OpenMote-CC2538/source/adc.c **** *
  22:bsp/boards/OpenMote-CC2538/source/adc.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:bsp/boards/OpenMote-CC2538/source/adc.c **** *    its contributors may be used to endorse or promote products derived
  24:bsp/boards/OpenMote-CC2538/source/adc.c **** *    from this software without specific prior written permission.
  25:bsp/boards/OpenMote-CC2538/source/adc.c **** *
  26:bsp/boards/OpenMote-CC2538/source/adc.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:bsp/boards/OpenMote-CC2538/source/adc.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:bsp/boards/OpenMote-CC2538/source/adc.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:bsp/boards/OpenMote-CC2538/source/adc.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:bsp/boards/OpenMote-CC2538/source/adc.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:bsp/boards/OpenMote-CC2538/source/adc.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:bsp/boards/OpenMote-CC2538/source/adc.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:bsp/boards/OpenMote-CC2538/source/adc.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:bsp/boards/OpenMote-CC2538/source/adc.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:bsp/boards/OpenMote-CC2538/source/adc.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:bsp/boards/OpenMote-CC2538/source/adc.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:bsp/boards/OpenMote-CC2538/source/adc.c **** *
  38:bsp/boards/OpenMote-CC2538/source/adc.c **** ******************************************************************************/
  39:bsp/boards/OpenMote-CC2538/source/adc.c **** 
  40:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
  41:bsp/boards/OpenMote-CC2538/source/adc.c **** //
  42:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \addtogroup adc_api
  43:bsp/boards/OpenMote-CC2538/source/adc.c **** //! @{
  44:bsp/boards/OpenMote-CC2538/source/adc.c **** //
  45:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
  46:bsp/boards/OpenMote-CC2538/source/adc.c **** 
  47:bsp/boards/OpenMote-CC2538/source/adc.c **** #include <headers/hw_ints.h>
  48:bsp/boards/OpenMote-CC2538/source/adc.c **** #include <headers/hw_memmap.h>
  49:bsp/boards/OpenMote-CC2538/source/adc.c **** #include <headers/hw_soc_adc.h>
  50:bsp/boards/OpenMote-CC2538/source/adc.c **** #include "debug.h"
  51:bsp/boards/OpenMote-CC2538/source/adc.c **** #include "interrupt.h"
  52:bsp/boards/OpenMote-CC2538/source/adc.c **** #include "adc.h"
  53:bsp/boards/OpenMote-CC2538/source/adc.c **** 
  54:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
  55:bsp/boards/OpenMote-CC2538/source/adc.c **** //
  56:bsp/boards/OpenMote-CC2538/source/adc.c **** //! Registers an interrupt handler for ADC interrupt
  57:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
  58:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \param pfnHandler is a pointer to the function called when the
  59:bsp/boards/OpenMote-CC2538/source/adc.c **** //! SOC ADC interrupt occurs.
  60:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
  61:bsp/boards/OpenMote-CC2538/source/adc.c **** //! This function does the actual registering of the interrupt handler, which
  62:bsp/boards/OpenMote-CC2538/source/adc.c **** //! enables the global interrupt in the interrupt controller.
  63:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
  64:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \sa IntRegister() for important information about registering interrupt
  65:bsp/boards/OpenMote-CC2538/source/adc.c **** //! handlers.
  66:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
  67:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \return None
  68:bsp/boards/OpenMote-CC2538/source/adc.c **** //
  69:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
  70:bsp/boards/OpenMote-CC2538/source/adc.c **** void
  71:bsp/boards/OpenMote-CC2538/source/adc.c **** SOCADCIntRegister(void (*pfnHandler)(void))
  72:bsp/boards/OpenMote-CC2538/source/adc.c **** {
  26              		.loc 1 72 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
  73:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
  74:bsp/boards/OpenMote-CC2538/source/adc.c ****     // Register the interrupt handler.
  75:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
  76:bsp/boards/OpenMote-CC2538/source/adc.c ****     IntRegister(INT_ADC0, pfnHandler);
  42              		.loc 1 76 0
  43 0008 4FF01E00 		mov	r0, #30
  44 000c 7968     		ldr	r1, [r7, #4]
  45 000e FFF7FEFF 		bl	IntRegister
  77:bsp/boards/OpenMote-CC2538/source/adc.c **** 
  78:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
  79:bsp/boards/OpenMote-CC2538/source/adc.c ****     // Enable the ADC interrupt.
  80:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
  81:bsp/boards/OpenMote-CC2538/source/adc.c ****     IntEnable(INT_ADC0);
  46              		.loc 1 81 0
  47 0012 4FF01E00 		mov	r0, #30
  48 0016 FFF7FEFF 		bl	IntEnable
  82:bsp/boards/OpenMote-CC2538/source/adc.c **** }
  49              		.loc 1 82 0
  50 001a 07F10807 		add	r7, r7, #8
  51 001e BD46     		mov	sp, r7
  52 0020 80BD     		pop	{r7, pc}
  53              		.cfi_endproc
  54              	.LFE0:
  56 0022 00BF     		.align	2
  57              		.global	SOCADCIntUnregister
  58              		.thumb
  59              		.thumb_func
  61              	SOCADCIntUnregister:
  62              	.LFB1:
  83:bsp/boards/OpenMote-CC2538/source/adc.c **** 
  84:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
  85:bsp/boards/OpenMote-CC2538/source/adc.c **** //
  86:bsp/boards/OpenMote-CC2538/source/adc.c **** //! Unregisters an interrupt handler for the ADC interrupt
  87:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
  88:bsp/boards/OpenMote-CC2538/source/adc.c **** //! This function does the actual unregistering of the interrupt handler. This
  89:bsp/boards/OpenMote-CC2538/source/adc.c **** //! function clears the handler to be called when an ADC interrupt occurs
  90:bsp/boards/OpenMote-CC2538/source/adc.c **** //! and masks off the interrupt in the interrupt controller so that the
  91:bsp/boards/OpenMote-CC2538/source/adc.c **** //! interrupt handler no longer is called.
  92:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
  93:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \sa IntRegister() for important information about registering interrupt
  94:bsp/boards/OpenMote-CC2538/source/adc.c **** //! handlers.
  95:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
  96:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \return None
  97:bsp/boards/OpenMote-CC2538/source/adc.c **** //
  98:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
  99:bsp/boards/OpenMote-CC2538/source/adc.c **** void
 100:bsp/boards/OpenMote-CC2538/source/adc.c **** SOCADCIntUnregister(void)
 101:bsp/boards/OpenMote-CC2538/source/adc.c **** {
  63              		.loc 1 101 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 1, uses_anonymous_args = 0
  67 0024 80B5     		push	{r7, lr}
  68              	.LCFI3:
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 7, -8
  71              		.cfi_offset 14, -4
  72 0026 00AF     		add	r7, sp, #0
  73              	.LCFI4:
  74              		.cfi_def_cfa_register 7
 102:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 103:bsp/boards/OpenMote-CC2538/source/adc.c ****     // Disable the interrupt.
 104:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 105:bsp/boards/OpenMote-CC2538/source/adc.c ****     IntDisable(INT_ADC0);
  75              		.loc 1 105 0
  76 0028 4FF01E00 		mov	r0, #30
  77 002c FFF7FEFF 		bl	IntDisable
 106:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 107:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 108:bsp/boards/OpenMote-CC2538/source/adc.c ****     // Unregister the interrupt handler.
 109:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 110:bsp/boards/OpenMote-CC2538/source/adc.c ****     IntUnregister(INT_ADC0);
  78              		.loc 1 110 0
  79 0030 4FF01E00 		mov	r0, #30
  80 0034 FFF7FEFF 		bl	IntUnregister
 111:bsp/boards/OpenMote-CC2538/source/adc.c **** }
  81              		.loc 1 111 0
  82 0038 80BD     		pop	{r7, pc}
  83              		.cfi_endproc
  84              	.LFE1:
  86 003a 00BF     		.align	2
  87              		.global	SOCADCSingleConfigure
  88              		.thumb
  89              		.thumb_func
  91              	SOCADCSingleConfigure:
  92              	.LFB2:
 112:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 113:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
 114:bsp/boards/OpenMote-CC2538/source/adc.c **** //
 115:bsp/boards/OpenMote-CC2538/source/adc.c **** //! Configure ADC conversion for a single channel
 116:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 117:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \param ui32Resolution is the resolution of the conversion.
 118:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \param ui32Reference is the reference voltage to be used for the conversion.
 119:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 120:bsp/boards/OpenMote-CC2538/source/adc.c **** //! This function configures the ADC for a single channel conversion.
 121:bsp/boards/OpenMote-CC2538/source/adc.c **** //! The \e ui32Resolution parameter must be one of:
 122:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_7_BIT, \b SOCADC_9_BIT, \b SOCADC_10_BIT or \b SOCADC_12_BIT.
 123:bsp/boards/OpenMote-CC2538/source/adc.c **** //! The reference voltage is set using the \e ui32Reference parameter, which
 124:bsp/boards/OpenMote-CC2538/source/adc.c **** //! must be configured as one of the following:
 125:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_REF_INTERNAL  for internal reference,
 126:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_REF_EXT_AIN7  for external reference on pin AIN7 (pad PA7),
 127:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_REF_AVDD5     for external AVDD5 pin,
 128:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_REF_EXT_AIN67 for external reference on differential input pins
 129:bsp/boards/OpenMote-CC2538/source/adc.c **** //!  AIN6-AIN7 (Pads PA6-PA7).
 130:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 131:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \note A single conversion triggers an interrupt if this has been registered
 132:bsp/boards/OpenMote-CC2538/source/adc.c **** //! using SOCADCIntRegister().
 133:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 134:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \sa SOCADCSingleStart() and SOCADCIntRegister().
 135:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 136:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \return None
 137:bsp/boards/OpenMote-CC2538/source/adc.c **** //
 138:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
 139:bsp/boards/OpenMote-CC2538/source/adc.c **** void
 140:bsp/boards/OpenMote-CC2538/source/adc.c **** SOCADCSingleConfigure(uint32_t ui32Resolution, uint32_t ui32Reference)
 141:bsp/boards/OpenMote-CC2538/source/adc.c **** {
  93              		.loc 1 141 0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 16
  96              		@ frame_needed = 1, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  98 003c 80B4     		push	{r7}
  99              	.LCFI5:
 100              		.cfi_def_cfa_offset 4
 101              		.cfi_offset 7, -4
 102 003e 85B0     		sub	sp, sp, #20
 103              	.LCFI6:
 104              		.cfi_def_cfa_offset 24
 105 0040 00AF     		add	r7, sp, #0
 106              	.LCFI7:
 107              		.cfi_def_cfa_register 7
 108 0042 7860     		str	r0, [r7, #4]
 109 0044 3960     		str	r1, [r7, #0]
 142:bsp/boards/OpenMote-CC2538/source/adc.c ****     uint32_t ui32Reg;
 143:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 144:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 145:bsp/boards/OpenMote-CC2538/source/adc.c ****     // Check the arguments.
 146:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 147:bsp/boards/OpenMote-CC2538/source/adc.c ****     ASSERT((ui32Resolution == SOCADC_7_BIT)  ||
 148:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Resolution == SOCADC_9_BIT)  ||
 149:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Resolution == SOCADC_10_BIT) ||
 150:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Resolution == SOCADC_12_BIT));
 151:bsp/boards/OpenMote-CC2538/source/adc.c ****     ASSERT((ui32Reference == SOCADC_REF_INTERNAL) ||
 152:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Reference == SOCADC_REF_EXT_AIN7) ||
 153:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Reference == SOCADC_REF_AVDD5)    ||
 154:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Reference == SOCADC_REF_EXT_AIN67));
 155:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 156:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 157:bsp/boards/OpenMote-CC2538/source/adc.c ****     // Stop random generator
 158:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 159:bsp/boards/OpenMote-CC2538/source/adc.c ****     HWREG(SOC_ADC_ADCCON1) = 0x3c;
 110              		.loc 1 159 0
 111 0046 4FF4E043 		mov	r3, #28672
 112 004a C4F20D03 		movt	r3, 16397
 113 004e 4FF03C02 		mov	r2, #60
 114 0052 1A60     		str	r2, [r3, #0]
 160:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 161:bsp/boards/OpenMote-CC2538/source/adc.c ****     ui32Reg = HWREG(SOC_ADC_ADCCON3) & ~(SOC_ADC_ADCCON3_EREF_M |
 115              		.loc 1 161 0
 116 0054 47F20803 		movw	r3, #28680
 117 0058 C4F20D03 		movt	r3, 16397
 118 005c 1B68     		ldr	r3, [r3, #0]
 119 005e 23F0F003 		bic	r3, r3, #240
 120 0062 FB60     		str	r3, [r7, #12]
 162:bsp/boards/OpenMote-CC2538/source/adc.c ****                                          SOC_ADC_ADCCON3_EDIV_M);
 163:bsp/boards/OpenMote-CC2538/source/adc.c ****     HWREG(SOC_ADC_ADCCON3) = ui32Reg | ui32Resolution | ui32Reference;
 121              		.loc 1 163 0
 122 0064 47F20803 		movw	r3, #28680
 123 0068 C4F20D03 		movt	r3, 16397
 124 006c F968     		ldr	r1, [r7, #12]
 125 006e 7A68     		ldr	r2, [r7, #4]
 126 0070 1143     		orrs	r1, r1, r2
 127 0072 3A68     		ldr	r2, [r7, #0]
 128 0074 0A43     		orrs	r2, r2, r1
 129 0076 1A60     		str	r2, [r3, #0]
 164:bsp/boards/OpenMote-CC2538/source/adc.c **** }
 130              		.loc 1 164 0
 131 0078 07F11407 		add	r7, r7, #20
 132 007c BD46     		mov	sp, r7
 133 007e 80BC     		pop	{r7}
 134 0080 7047     		bx	lr
 135              		.cfi_endproc
 136              	.LFE2:
 138 0082 00BF     		.align	2
 139              		.global	SOCADCSingleStart
 140              		.thumb
 141              		.thumb_func
 143              	SOCADCSingleStart:
 144              	.LFB3:
 165:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 166:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
 167:bsp/boards/OpenMote-CC2538/source/adc.c **** //
 168:bsp/boards/OpenMote-CC2538/source/adc.c **** //! Start a configured single conversion
 169:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 170:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \param ui32Channel is the input channel to use for the conversion.
 171:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 172:bsp/boards/OpenMote-CC2538/source/adc.c **** //! This function initiates a configured single channel conversion.
 173:bsp/boards/OpenMote-CC2538/source/adc.c **** //! The input channel is set using the \e ui32Channel parameter.
 174:bsp/boards/OpenMote-CC2538/source/adc.c **** //! This parameter must be configured as one of the following values:
 175:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN0       for single ended input Pad PA0
 176:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN1       for single ended input Pad PA1
 177:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN2       for single ended input Pad PA2
 178:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN3       for single ended input Pad PA3
 179:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN4       for single ended input Pad PA4
 180:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN5       for single ended input Pad PA5
 181:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN6       for single ended input Pad PA6
 182:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN7       for single ended input Pad PA7
 183:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN01      for differential Pads PA0-PA1
 184:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN23      for differential Pads PA2-PA3
 185:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN45      for differential Pads PA4-PA5
 186:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_AIN67      for differential Pads PA6-PA7
 187:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_GND        for Ground as input
 188:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_TEMP_SENS  for on-chip temperature sensor
 189:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \b SOCADC_VDD        for Vdd/3
 190:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 191:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \note A single conversion triggers an interrupt if this has been registered
 192:bsp/boards/OpenMote-CC2538/source/adc.c **** //! using SOCADCIntRegister().
 193:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 194:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \sa SOCADCSingleConfigure() and SOCADCIntRegister().
 195:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 196:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \return None
 197:bsp/boards/OpenMote-CC2538/source/adc.c **** //
 198:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
 199:bsp/boards/OpenMote-CC2538/source/adc.c **** void
 200:bsp/boards/OpenMote-CC2538/source/adc.c **** SOCADCSingleStart(uint32_t ui32Channel)
 201:bsp/boards/OpenMote-CC2538/source/adc.c **** {
 145              		.loc 1 201 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 16
 148              		@ frame_needed = 1, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150 0084 80B4     		push	{r7}
 151              	.LCFI8:
 152              		.cfi_def_cfa_offset 4
 153              		.cfi_offset 7, -4
 154 0086 85B0     		sub	sp, sp, #20
 155              	.LCFI9:
 156              		.cfi_def_cfa_offset 24
 157 0088 00AF     		add	r7, sp, #0
 158              	.LCFI10:
 159              		.cfi_def_cfa_register 7
 160 008a 7860     		str	r0, [r7, #4]
 202:bsp/boards/OpenMote-CC2538/source/adc.c ****     uint32_t ui32Reg;
 203:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 204:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 205:bsp/boards/OpenMote-CC2538/source/adc.c ****     // Check the arguments.
 206:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 207:bsp/boards/OpenMote-CC2538/source/adc.c ****     ASSERT((ui32Channel == SOCADC_AIN0)     ||
 208:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN1)      ||
 209:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN2)      ||
 210:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN3)      ||
 211:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN4)      ||
 212:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN5)      ||
 213:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN6)      ||
 214:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN7)      ||
 215:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN01)     ||
 216:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN23)     ||
 217:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN45)     ||
 218:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_AIN67)     ||
 219:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_GND)       ||
 220:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_TEMP_SENS) ||
 221:bsp/boards/OpenMote-CC2538/source/adc.c ****            (ui32Channel == SOCADC_VDD));
 222:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 223:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 224:bsp/boards/OpenMote-CC2538/source/adc.c ****     // Program selected channel, this indirectly starts the conversion
 225:bsp/boards/OpenMote-CC2538/source/adc.c ****     //
 226:bsp/boards/OpenMote-CC2538/source/adc.c ****     ui32Reg = HWREG(SOC_ADC_ADCCON3) & ~(SOC_ADC_ADCCON3_ECH_M);
 161              		.loc 1 226 0
 162 008c 47F20803 		movw	r3, #28680
 163 0090 C4F20D03 		movt	r3, 16397
 164 0094 1B68     		ldr	r3, [r3, #0]
 165 0096 23F00F03 		bic	r3, r3, #15
 166 009a FB60     		str	r3, [r7, #12]
 227:bsp/boards/OpenMote-CC2538/source/adc.c ****     HWREG(SOC_ADC_ADCCON3) = ui32Reg | ui32Channel;
 167              		.loc 1 227 0
 168 009c 47F20803 		movw	r3, #28680
 169 00a0 C4F20D03 		movt	r3, 16397
 170 00a4 F968     		ldr	r1, [r7, #12]
 171 00a6 7A68     		ldr	r2, [r7, #4]
 172 00a8 0A43     		orrs	r2, r2, r1
 173 00aa 1A60     		str	r2, [r3, #0]
 228:bsp/boards/OpenMote-CC2538/source/adc.c **** }
 174              		.loc 1 228 0
 175 00ac 07F11407 		add	r7, r7, #20
 176 00b0 BD46     		mov	sp, r7
 177 00b2 80BC     		pop	{r7}
 178 00b4 7047     		bx	lr
 179              		.cfi_endproc
 180              	.LFE3:
 182 00b6 00BF     		.align	2
 183              		.global	SOCADCDataGet
 184              		.thumb
 185              		.thumb_func
 187              	SOCADCDataGet:
 188              	.LFB4:
 229:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 230:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
 231:bsp/boards/OpenMote-CC2538/source/adc.c **** //
 232:bsp/boards/OpenMote-CC2538/source/adc.c **** //! Get data value from conversion
 233:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 234:bsp/boards/OpenMote-CC2538/source/adc.c **** //! This function gets the latest conversion data result of the programmed
 235:bsp/boards/OpenMote-CC2538/source/adc.c **** //! conversion. The function returns 16 bits of data, but depending on the
 236:bsp/boards/OpenMote-CC2538/source/adc.c **** //! programmed precision, only part of the data is significant.
 237:bsp/boards/OpenMote-CC2538/source/adc.c **** //! The following defined bit masks can be used to extract the significant data
 238:bsp/boards/OpenMote-CC2538/source/adc.c **** //! depending on the decimation rate:
 239:bsp/boards/OpenMote-CC2538/source/adc.c **** //!   \b SOCADC_7_BIT_MASK, \b SOCADC_9_BIT_MASK,
 240:bsp/boards/OpenMote-CC2538/source/adc.c **** //!   \b SOCADC_10_BIT_MASK and \b SOCADC_12_BIT_MASK
 241:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 242:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \sa SOCADCEndOfCOnversionGet().
 243:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 244:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \return Data conversion value
 245:bsp/boards/OpenMote-CC2538/source/adc.c **** //
 246:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
 247:bsp/boards/OpenMote-CC2538/source/adc.c **** uint16_t
 248:bsp/boards/OpenMote-CC2538/source/adc.c **** SOCADCDataGet(void)
 249:bsp/boards/OpenMote-CC2538/source/adc.c **** {
 189              		.loc 1 249 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 8
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194 00b8 80B4     		push	{r7}
 195              	.LCFI11:
 196              		.cfi_def_cfa_offset 4
 197              		.cfi_offset 7, -4
 198 00ba 83B0     		sub	sp, sp, #12
 199              	.LCFI12:
 200              		.cfi_def_cfa_offset 16
 201 00bc 00AF     		add	r7, sp, #0
 202              	.LCFI13:
 203              		.cfi_def_cfa_register 7
 250:bsp/boards/OpenMote-CC2538/source/adc.c ****     uint32_t ui32Reg;
 251:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 252:bsp/boards/OpenMote-CC2538/source/adc.c ****     ui32Reg = HWREG(SOC_ADC_ADCL) & SOC_ADC_ADCL_ADC_M;
 204              		.loc 1 252 0
 205 00be 47F20C03 		movw	r3, #28684
 206 00c2 C4F20D03 		movt	r3, 16397
 207 00c6 1B68     		ldr	r3, [r3, #0]
 208 00c8 03F0FC03 		and	r3, r3, #252
 209 00cc 7B60     		str	r3, [r7, #4]
 253:bsp/boards/OpenMote-CC2538/source/adc.c ****     ui32Reg |= ((HWREG(SOC_ADC_ADCH) & SOC_ADC_ADCH_ADC_M) << 8);
 210              		.loc 1 253 0
 211 00ce 47F21003 		movw	r3, #28688
 212 00d2 C4F20D03 		movt	r3, 16397
 213 00d6 1B68     		ldr	r3, [r3, #0]
 214 00d8 4FEA0323 		lsl	r3, r3, #8
 215 00dc 4FEA0343 		lsl	r3, r3, #16
 216 00e0 4FEA1343 		lsr	r3, r3, #16
 217 00e4 7A68     		ldr	r2, [r7, #4]
 218 00e6 1343     		orrs	r3, r3, r2
 219 00e8 7B60     		str	r3, [r7, #4]
 254:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 255:bsp/boards/OpenMote-CC2538/source/adc.c ****     return ((uint16_t) ui32Reg);
 220              		.loc 1 255 0
 221 00ea 7B68     		ldr	r3, [r7, #4]
 222 00ec 9BB2     		uxth	r3, r3
 256:bsp/boards/OpenMote-CC2538/source/adc.c **** }
 223              		.loc 1 256 0
 224 00ee 1846     		mov	r0, r3
 225 00f0 07F10C07 		add	r7, r7, #12
 226 00f4 BD46     		mov	sp, r7
 227 00f6 80BC     		pop	{r7}
 228 00f8 7047     		bx	lr
 229              		.cfi_endproc
 230              	.LFE4:
 232 00fa 00BF     		.align	2
 233              		.global	SOCADCEndOfCOnversionGet
 234              		.thumb
 235              		.thumb_func
 237              	SOCADCEndOfCOnversionGet:
 238              	.LFB5:
 257:bsp/boards/OpenMote-CC2538/source/adc.c **** 
 258:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
 259:bsp/boards/OpenMote-CC2538/source/adc.c **** //
 260:bsp/boards/OpenMote-CC2538/source/adc.c **** //! Check if conversion is done
 261:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 262:bsp/boards/OpenMote-CC2538/source/adc.c **** //! This function can be used to query the status of the conversion.
 263:bsp/boards/OpenMote-CC2538/source/adc.c **** //!
 264:bsp/boards/OpenMote-CC2538/source/adc.c **** //! \return true if conversion is done, otherwise false.
 265:bsp/boards/OpenMote-CC2538/source/adc.c **** //
 266:bsp/boards/OpenMote-CC2538/source/adc.c **** //*****************************************************************************
 267:bsp/boards/OpenMote-CC2538/source/adc.c **** bool
 268:bsp/boards/OpenMote-CC2538/source/adc.c **** SOCADCEndOfCOnversionGet(void)
 269:bsp/boards/OpenMote-CC2538/source/adc.c **** {
 239              		.loc 1 269 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 244 00fc 80B4     		push	{r7}
 245              	.LCFI14:
 246              		.cfi_def_cfa_offset 4
 247              		.cfi_offset 7, -4
 248 00fe 00AF     		add	r7, sp, #0
 249              	.LCFI15:
 250              		.cfi_def_cfa_register 7
 270:bsp/boards/OpenMote-CC2538/source/adc.c ****     return((HWREG(SOC_ADC_ADCCON1) & SOC_ADC_ADCCON1_EOC) ? true : false);
 251              		.loc 1 270 0
 252 0100 4FF4E043 		mov	r3, #28672
 253 0104 C4F20D03 		movt	r3, 16397
 254 0108 1B68     		ldr	r3, [r3, #0]
 255 010a 03F08003 		and	r3, r3, #128
 256 010e 002B     		cmp	r3, #0
 257 0110 0CBF     		ite	eq
 258 0112 0023     		moveq	r3, #0
 259 0114 0123     		movne	r3, #1
 260 0116 DBB2     		uxtb	r3, r3
 271:bsp/boards/OpenMote-CC2538/source/adc.c **** }
 261              		.loc 1 271 0
 262 0118 1846     		mov	r0, r3
 263 011a BD46     		mov	sp, r7
 264 011c 80BC     		pop	{r7}
 265 011e 7047     		bx	lr
 266              		.cfi_endproc
 267              	.LFE5:
 269              	.Letext0:
 270              		.file 2 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
     /tmp/ccrqMOIt.s:18     .text:00000000 $t
     /tmp/ccrqMOIt.s:23     .text:00000000 SOCADCIntRegister
     /tmp/ccrqMOIt.s:61     .text:00000024 SOCADCIntUnregister
     /tmp/ccrqMOIt.s:91     .text:0000003c SOCADCSingleConfigure
     /tmp/ccrqMOIt.s:143    .text:00000084 SOCADCSingleStart
     /tmp/ccrqMOIt.s:187    .text:000000b8 SOCADCDataGet
     /tmp/ccrqMOIt.s:237    .text:000000fc SOCADCEndOfCOnversionGet
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e96eee74da26538b12ac9582e3798382
                           .group:00000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:00000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:00000000 wm4.hw_soc_adc.h.39.49d9b13af378603af2f404bc5269b2c2
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.adc.h.41.a9050d8b156af9fced6aa679c9da9963

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
