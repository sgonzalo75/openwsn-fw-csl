   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"sys_ctrl.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  22              	g_pui32RCGCRegs:
  23 0000 08200D40 		.word	1074601992
  24 0004 18200D40 		.word	1074602008
  25 0008 28200D40 		.word	1074602024
  26 000c 38200D40 		.word	1074602040
  27 0010 48200D40 		.word	1074602056
  28 0014 A8200D40 		.word	1074602152
  29              		.align	2
  32              	g_pui32SCGCRegs:
  33 0018 0C200D40 		.word	1074601996
  34 001c 1C200D40 		.word	1074602012
  35 0020 2C200D40 		.word	1074602028
  36 0024 3C200D40 		.word	1074602044
  37 0028 4C200D40 		.word	1074602060
  38 002c AC200D40 		.word	1074602156
  39              		.align	2
  42              	g_pui32DCGCRegs:
  43 0030 10200D40 		.word	1074602000
  44 0034 20200D40 		.word	1074602016
  45 0038 30200D40 		.word	1074602032
  46 003c 40200D40 		.word	1074602048
  47 0040 50200D40 		.word	1074602064
  48 0044 B0200D40 		.word	1074602160
  49              		.align	2
  52              	g_pui32SRRegs:
  53 0048 14200D40 		.word	1074602004
  54 004c 24200D40 		.word	1074602020
  55 0050 34200D40 		.word	1074602036
  56 0054 44200D40 		.word	1074602052
  57 0058 54200D40 		.word	1074602068
  58              		.align	2
  61              	g_pui32DieCfgMask:
  62 005c 01000000 		.word	1
  63 0060 00010000 		.word	256
  64 0064 00000100 		.word	65536
  65 0068 00000001 		.word	16777216
  66 006c 01000000 		.word	1
  67 0070 04000000 		.word	4
  68              		.text
  69              		.align	2
  70              		.global	SysCtrlClockSet
  71              		.thumb
  72              		.thumb_func
  74              	SysCtrlClockSet:
  75              	.LFB0:
  76              		.file 1 "bsp/boards/OpenMote-CC2538/source/sys_ctrl.c"
   1:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** /******************************************************************************
   2:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  Filename:       sys_ctrl.c
   3:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  Revised:        $Date: 2013-04-29 09:29:18 +0200 (Mon, 29 Apr 2013) $
   4:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  Revision:       $Revision: 9921 $
   5:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *
   6:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  Description:    Driver for the system controller.
   7:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *
   8:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *
  10:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *
  11:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  Redistribution and use in source and binary forms, with or without
  12:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  modification, are permitted provided that the following conditions
  13:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  are met:
  14:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *
  15:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *    Redistributions of source code must retain the above copyright
  16:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *    notice, this list of conditions and the following disclaimer.
  17:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *
  18:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *    Redistributions in binary form must reproduce the above copyright
  19:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *    notice, this list of conditions and the following disclaimer in the
  20:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *    documentation and/or other materials provided with the distribution.
  21:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *
  22:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *    its contributors may be used to endorse or promote products derived
  24:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *    from this software without specific prior written permission.
  25:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *
  26:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** *
  38:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** ******************************************************************************/
  39:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
  40:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
  41:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
  42:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \addtogroup sysctl_api
  43:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! @{
  44:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
  45:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
  46:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
  47:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #include <headers/hw_flash_ctrl.h>
  48:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #include <headers/hw_ints.h>
  49:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #include <headers/hw_nvic.h>
  50:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #include <headers/hw_sys_ctrl.h>
  51:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #include "cpu.h"
  52:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #include "debug.h"
  53:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #include "interrupt.h"
  54:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #include "sys_ctrl.h"
  55:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
  56:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
  57:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
  58:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
  59:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // Arrays that maps the "peripheral set" number (which is stored in the
  60:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // third nibble of the SYS_CTRL_PERIPH_* defines) to the SYSCTL register that
  61:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // contains the relevant bit for that peripheral.
  62:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
  63:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
  64:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
  65:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // Run mode registers
  66:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** static const uint32_t g_pui32RCGCRegs[] =
  67:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
  68:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_RCGCGPT,
  69:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_RCGCSSI,
  70:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_RCGCUART,
  71:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_RCGCI2C,
  72:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_RCGCSEC,
  73:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_RCGCRFC
  74:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** };
  75:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
  76:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // Sleep mode registers
  77:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** static const uint32_t g_pui32SCGCRegs[] =
  78:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
  79:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SCGCGPT,
  80:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SCGCSSI,
  81:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SCGCUART,
  82:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SCGCI2C,
  83:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SCGCSEC,
  84:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SCGCRFC
  85:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** };
  86:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
  87:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // Deep sleep mode registers
  88:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** static const uint32_t g_pui32DCGCRegs[] =
  89:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
  90:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_DCGCGPT,
  91:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_DCGCSSI,
  92:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_DCGCUART,
  93:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_DCGCI2C,
  94:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_DCGCSEC,
  95:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_DCGCRFC
  96:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** };
  97:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
  98:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // Reset registers
  99:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** static const uint32_t g_pui32SRRegs[] =
 100:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 101:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SRGPT,
 102:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SRSSI,
 103:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SRUART,
 104:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SRI2C,
 105:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     SYS_CTRL_SRSEC,
 106:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** };
 107:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 108:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // Masks for determining if a peripheral is enabled
 109:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** static const uint32_t g_pui32DieCfgMask[] =
 110:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 111:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     FLASH_CTRL_DIECFG1_GPTM0_EN,
 112:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     FLASH_CTRL_DIECFG1_SSI0_EN,
 113:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     FLASH_CTRL_DIECFG1_UART0_EN,
 114:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     FLASH_CTRL_DIECFG1_I2C_EN,
 115:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     FLASH_CTRL_DIECFG2_PKA_EN,
 116:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     FLASH_CTRL_DIECFG2_RF_CORE_EN
 117:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** };
 118:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 119:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 120:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 121:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // This macro extracts the array index out of the peripheral number.
 122:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 123:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 124:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #define SYS_CTRL_PERIPH_INDEX(a)  (((a) >> 8) & 0xf)
 125:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 126:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 127:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 128:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 129:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // This macro extracts the peripheral instance number and generates bit mask
 130:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 131:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 132:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #define SYS_CTRL_PERIPH_MASKBIT(a) (0x00000001 << ((a) & 0xf))
 133:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 134:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 135:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 136:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // This macro extracts the instance number out of the peripheral number.
 137:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 138:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 139:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #define SYS_CTRL_PERIPH_INSTANCE(a)  ((a) & 0xf)
 140:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 141:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 142:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 143:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \internal
 144:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Checks a peripheral identifier
 145:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 146:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32Peripheral is the peripheral identifier.
 147:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 148:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function determines if a peripheral identifier is valid.
 149:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 150:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return Returns \b true if the peripheral identifier is valid and \b false
 151:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! otherwise.
 152:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 153:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 154:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #ifdef ENABLE_ASSERT
 155:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** static bool
 156:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPeripheralValid(uint32_t ui32Peripheral)
 157:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 158:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     return((ui32Peripheral == SYS_CTRL_PERIPH_GPT0)  ||
 159:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_GPT1)  ||
 160:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_GPT2)  ||
 161:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_GPT3)  ||
 162:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_SSI0)  ||
 163:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_SSI1)  ||
 164:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_UART0) ||
 165:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_UART1) ||
 166:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_I2C)   ||
 167:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_PKA)   ||
 168:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_AES)   ||
 169:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            (ui32Peripheral == SYS_CTRL_PERIPH_RFC));
 170:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 171:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #endif
 172:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 173:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 174:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 175:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 176:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Sets the general clocking of the device
 177:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 178:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param bExternalOsc32k is set to true for applications with
 179:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!        external 32kHz crystal.
 180:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param bInternalOsc selects internal 1-16MHz RC oscillator. If set to
 181:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!        false, the external 0-32MHz crystal is used.
 182:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32SysDiv System Clock Setting.
 183:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 184:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function configures the clocking of the device.
 185:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The oscillator used and the system clock divider settings are
 186:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! configured with this function.
 187:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 188:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32SysDiv argument must be only one of the following values:
 189:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_SYSDIV_32MHZ, \b SYS_CTRL_SYSDIV_16MHZ,
 190:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_SYSDIV_8MHZ,  \b SYS_CTRL_SYSDIV_4MHZ,
 191:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_SYSDIV_2MHZ,  \b SYS_CTRL_SYSDIV_1MHZ,
 192:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_SYSDIV_500KHZ,\b SYS_CTRL_SYSDIV_250KHZ.
 193:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Note \b SYS_CTRL_SYSDIV_32MHZ can not be selected when Internal Oscillator
 194:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! is selected.
 195:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 196:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 197:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 198:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 199:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 200:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlClockSet(bool bExternalOsc32k, bool bInternalOsc,
 201:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****                 uint32_t ui32SysDiv)
 202:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
  77              		.loc 1 202 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 24
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81 0000 80B5     		push	{r7, lr}
  82              	.LCFI0:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 7, -8
  85              		.cfi_offset 14, -4
  86 0002 86B0     		sub	sp, sp, #24
  87              	.LCFI1:
  88              		.cfi_def_cfa_offset 32
  89 0004 00AF     		add	r7, sp, #0
  90              	.LCFI2:
  91              		.cfi_def_cfa_register 7
  92 0006 0B46     		mov	r3, r1
  93 0008 3A60     		str	r2, [r7, #0]
  94 000a 0246     		mov	r2, r0
  95 000c FA71     		strb	r2, [r7, #7]
  96 000e BB71     		strb	r3, [r7, #6]
 203:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32STA;
 204:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32Reg;
 205:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32TimeoutVal;
 206:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32Osc;
 207:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 208:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // check input parameters
 209:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT((ui32SysDiv == SYS_CTRL_SYSDIV_32MHZ  ||
 210:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             ui32SysDiv == SYS_CTRL_SYSDIV_16MHZ  ||
 211:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             ui32SysDiv == SYS_CTRL_SYSDIV_8MHZ   ||
 212:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             ui32SysDiv == SYS_CTRL_SYSDIV_4MHZ   ||
 213:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             ui32SysDiv == SYS_CTRL_SYSDIV_2MHZ   ||
 214:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             ui32SysDiv == SYS_CTRL_SYSDIV_1MHZ   ||
 215:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             ui32SysDiv == SYS_CTRL_SYSDIV_500KHZ ||
 216:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             ui32SysDiv == SYS_CTRL_SYSDIV_250KHZ) &&
 217:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            !((ui32SysDiv == SYS_CTRL_SYSDIV_32MHZ) && bInternalOsc));
 218:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 219:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 220:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Enable AMP detect to make sure XOSC starts correctly
 221:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 222:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     if(!bInternalOsc)
  97              		.loc 1 222 0
  98 0010 BB79     		ldrb	r3, [r7, #6]
  99 0012 83F00103 		eor	r3, r3, #1
 100 0016 DBB2     		uxtb	r3, r3
 101 0018 002B     		cmp	r3, #0
 102 001a 0DD0     		beq	.L2
 223:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 224:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Reg = HWREG(SYS_CTRL_CLOCK_CTRL) | SYS_CTRL_CLOCK_CTRL_AMP_DET;
 103              		.loc 1 224 0
 104 001c 4FF40053 		mov	r3, #8192
 105 0020 C4F20D03 		movt	r3, 16397
 106 0024 1B68     		ldr	r3, [r3, #0]
 107 0026 43F40013 		orr	r3, r3, #2097152
 108 002a 3B61     		str	r3, [r7, #16]
 225:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         HWREG(SYS_CTRL_CLOCK_CTRL) = ui32Reg;
 109              		.loc 1 225 0
 110 002c 4FF40053 		mov	r3, #8192
 111 0030 C4F20D03 		movt	r3, 16397
 112 0034 3A69     		ldr	r2, [r7, #16]
 113 0036 1A60     		str	r2, [r3, #0]
 114              	.L2:
 226:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 227:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 228:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 229:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Set 32kHz clock, Osc and SysDiv
 230:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 231:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32Reg = HWREG(SYS_CTRL_CLOCK_CTRL);
 115              		.loc 1 231 0
 116 0038 4FF40053 		mov	r3, #8192
 117 003c C4F20D03 		movt	r3, 16397
 118 0040 1B68     		ldr	r3, [r3, #0]
 119 0042 3B61     		str	r3, [r7, #16]
 232:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32Reg &= ~(SYS_CTRL_CLOCK_CTRL_OSC32K | SYS_CTRL_CLOCK_CTRL_OSC |
 120              		.loc 1 232 0
 121 0044 3A69     		ldr	r2, [r7, #16]
 122 0046 4FF6F873 		movw	r3, #65528
 123 004a CFF6FE63 		movt	r3, 65278
 124 004e 1340     		ands	r3, r3, r2
 125 0050 3B61     		str	r3, [r7, #16]
 233:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****                  SYS_CTRL_CLOCK_CTRL_SYS_DIV_M);
 234:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     if(!bExternalOsc32k)
 126              		.loc 1 234 0
 127 0052 FB79     		ldrb	r3, [r7, #7]
 128 0054 83F00103 		eor	r3, r3, #1
 129 0058 DBB2     		uxtb	r3, r3
 130 005a 002B     		cmp	r3, #0
 131 005c 03D0     		beq	.L3
 235:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 236:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Reg |= SYS_CTRL_CLOCK_CTRL_OSC32K;
 132              		.loc 1 236 0
 133 005e 3B69     		ldr	r3, [r7, #16]
 134 0060 43F08073 		orr	r3, r3, #16777216
 135 0064 3B61     		str	r3, [r7, #16]
 136              	.L3:
 237:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 238:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32Osc = bInternalOsc ? SYS_CTRL_CLOCK_CTRL_OSC : 0;
 137              		.loc 1 238 0
 138 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 139 0068 002B     		cmp	r3, #0
 140 006a 02D0     		beq	.L4
 141              		.loc 1 238 0 is_stmt 0 discriminator 1
 142 006c 4FF48033 		mov	r3, #65536
 143 0070 01E0     		b	.L5
 144              	.L4:
 145              		.loc 1 238 0 discriminator 2
 146 0072 4FF00003 		mov	r3, #0
 147              	.L5:
 148              		.loc 1 238 0 discriminator 3
 149 0076 BB60     		str	r3, [r7, #8]
 239:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32Reg |= ui32Osc;
 150              		.loc 1 239 0 is_stmt 1 discriminator 3
 151 0078 3A69     		ldr	r2, [r7, #16]
 152 007a BB68     		ldr	r3, [r7, #8]
 153 007c 1343     		orrs	r3, r3, r2
 154 007e 3B61     		str	r3, [r7, #16]
 240:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32Reg |= ui32SysDiv;
 155              		.loc 1 240 0 discriminator 3
 156 0080 3A69     		ldr	r2, [r7, #16]
 157 0082 3B68     		ldr	r3, [r7, #0]
 158 0084 1343     		orrs	r3, r3, r2
 159 0086 3B61     		str	r3, [r7, #16]
 241:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(SYS_CTRL_CLOCK_CTRL) = ui32Reg;
 160              		.loc 1 241 0 discriminator 3
 161 0088 4FF40053 		mov	r3, #8192
 162 008c C4F20D03 		movt	r3, 16397
 163 0090 3A69     		ldr	r2, [r7, #16]
 164 0092 1A60     		str	r2, [r3, #0]
 242:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 243:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 244:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Note: This wait loop could potentially be removed, if caution
 245:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // is taken in code running after this call.
 246:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 247:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // If we have changed Osc settings, wait until change happens
 248:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 249:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32STA = HWREG(SYS_CTRL_CLOCK_STA);
 165              		.loc 1 249 0 discriminator 3
 166 0094 42F20403 		movw	r3, #8196
 167 0098 C4F20D03 		movt	r3, 16397
 168 009c 1B68     		ldr	r3, [r3, #0]
 169 009e 7B61     		str	r3, [r7, #20]
 250:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32TimeoutVal = 0;
 170              		.loc 1 250 0 discriminator 3
 171 00a0 4FF00003 		mov	r3, #0
 172 00a4 FB60     		str	r3, [r7, #12]
 251:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     while((ui32Osc != (ui32STA & SYS_CTRL_CLOCK_CTRL_OSC)) &&
 173              		.loc 1 251 0 discriminator 3
 174 00a6 0DE0     		b	.L6
 175              	.L8:
 252:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             (ui32TimeoutVal < SYS_CTRL_TIMEOUT))
 253:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 254:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         SysCtrlDelay(16);
 176              		.loc 1 254 0
 177 00a8 4FF01000 		mov	r0, #16
 178 00ac FFF7FEFF 		bl	SysCtrlDelay
 255:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32STA = HWREG(SYS_CTRL_CLOCK_STA);
 179              		.loc 1 255 0
 180 00b0 42F20403 		movw	r3, #8196
 181 00b4 C4F20D03 		movt	r3, 16397
 182 00b8 1B68     		ldr	r3, [r3, #0]
 183 00ba 7B61     		str	r3, [r7, #20]
 256:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32TimeoutVal++;
 184              		.loc 1 256 0
 185 00bc FB68     		ldr	r3, [r7, #12]
 186 00be 03F10103 		add	r3, r3, #1
 187 00c2 FB60     		str	r3, [r7, #12]
 188              	.L6:
 251:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     while((ui32Osc != (ui32STA & SYS_CTRL_CLOCK_CTRL_OSC)) &&
 189              		.loc 1 251 0 discriminator 1
 190 00c4 7B69     		ldr	r3, [r7, #20]
 191 00c6 03F48032 		and	r2, r3, #65536
 192 00ca BB68     		ldr	r3, [r7, #8]
 193 00cc 9A42     		cmp	r2, r3
 194 00ce 04D0     		beq	.L1
 251:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     while((ui32Osc != (ui32STA & SYS_CTRL_CLOCK_CTRL_OSC)) &&
 195              		.loc 1 251 0 is_stmt 0 discriminator 2
 196 00d0 FA68     		ldr	r2, [r7, #12]
 197 00d2 4FF6FE73 		movw	r3, #65534
 198 00d6 9A42     		cmp	r2, r3
 199 00d8 E6D9     		bls	.L8
 200              	.L1:
 257:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 258:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(ui32TimeoutVal < SYS_CTRL_TIMEOUT);
 259:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 260:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** } // SysCtrlClockSet
 201              		.loc 1 260 0 is_stmt 1
 202 00da 07F11807 		add	r7, r7, #24
 203 00de BD46     		mov	sp, r7
 204 00e0 80BD     		pop	{r7, pc}
 205              		.cfi_endproc
 206              	.LFE0:
 208 00e2 00BF     		.align	2
 209              		.global	SysCtrlClockGet
 210              		.thumb
 211              		.thumb_func
 213              	SysCtrlClockGet:
 214              	.LFB1:
 261:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 262:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 263:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 264:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 265:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Gets the processor clock rate
 266:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 267:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function determines the clock rate of the processor clock.
 268:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 269:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return The processor clock rate
 270:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 271:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 272:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** uint32_t
 273:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlClockGet(void)
 274:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 215              		.loc 1 274 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 16
 218              		@ frame_needed = 1, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220 00e4 80B4     		push	{r7}
 221              	.LCFI3:
 222              		.cfi_def_cfa_offset 4
 223              		.cfi_offset 7, -4
 224 00e6 85B0     		sub	sp, sp, #20
 225              	.LCFI4:
 226              		.cfi_def_cfa_offset 24
 227 00e8 00AF     		add	r7, sp, #0
 228              	.LCFI5:
 229              		.cfi_def_cfa_register 7
 275:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32Clk;
 276:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32STA;
 277:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32SysDiv;
 278:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 279:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32STA = HWREG(SYS_CTRL_CLOCK_STA);
 230              		.loc 1 279 0
 231 00ea 42F20403 		movw	r3, #8196
 232 00ee C4F20D03 		movt	r3, 16397
 233 00f2 1B68     		ldr	r3, [r3, #0]
 234 00f4 BB60     		str	r3, [r7, #8]
 280:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32SysDiv =
 235              		.loc 1 280 0
 236 00f6 BB68     		ldr	r3, [r7, #8]
 237 00f8 03F00703 		and	r3, r3, #7
 238 00fc 7B60     		str	r3, [r7, #4]
 281:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         (ui32STA & SYS_CTRL_CLOCK_STA_SYS_DIV_M) >> SYS_CTRL_CLOCK_STA_SYS_DIV_S;
 282:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32Clk = 0;
 239              		.loc 1 282 0
 240 00fe 4FF00003 		mov	r3, #0
 241 0102 FB60     		str	r3, [r7, #12]
 283:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 284:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     switch(ui32SysDiv)
 242              		.loc 1 284 0
 243 0104 7B68     		ldr	r3, [r7, #4]
 244 0106 072B     		cmp	r3, #7
 245 0108 42D8     		bhi	.L10
 246 010a 01A2     		adr	r2, .L19
 247 010c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 248              		.align	2
 249              	.L19:
 250 0110 31010000 		.word	.L11+1
 251 0114 3D010000 		.word	.L12+1
 252 0118 49010000 		.word	.L13+1
 253 011c 55010000 		.word	.L14+1
 254 0120 61010000 		.word	.L15+1
 255 0124 6D010000 		.word	.L16+1
 256 0128 79010000 		.word	.L17+1
 257 012c 85010000 		.word	.L18+1
 258              	.L11:
 285:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 286:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_32MHZ:
 287:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_32MHZ;
 259              		.loc 1 287 0
 260 0130 4FF49043 		mov	r3, #18432
 261 0134 C0F2E813 		movt	r3, 488
 262 0138 FB60     		str	r3, [r7, #12]
 288:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 263              		.loc 1 288 0
 264 013a 29E0     		b	.L10
 265              	.L12:
 289:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_16MHZ:
 290:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_16MHZ;
 266              		.loc 1 290 0
 267 013c 4FF41053 		mov	r3, #9216
 268 0140 C0F2F403 		movt	r3, 244
 269 0144 FB60     		str	r3, [r7, #12]
 291:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 270              		.loc 1 291 0
 271 0146 23E0     		b	.L10
 272              	.L13:
 292:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_8MHZ:
 293:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_8MHZ;
 273              		.loc 1 293 0
 274 0148 4FF49053 		mov	r3, #4608
 275 014c C0F27A03 		movt	r3, 122
 276 0150 FB60     		str	r3, [r7, #12]
 294:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 277              		.loc 1 294 0
 278 0152 1DE0     		b	.L10
 279              	.L14:
 295:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_4MHZ:
 296:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_4MHZ;
 280              		.loc 1 296 0
 281 0154 4FF41063 		mov	r3, #2304
 282 0158 C0F23D03 		movt	r3, 61
 283 015c FB60     		str	r3, [r7, #12]
 297:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 284              		.loc 1 297 0
 285 015e 17E0     		b	.L10
 286              	.L15:
 298:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_2MHZ:
 299:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_2MHZ;
 287              		.loc 1 299 0
 288 0160 48F28043 		movw	r3, #33920
 289 0164 C0F21E03 		movt	r3, 30
 290 0168 FB60     		str	r3, [r7, #12]
 300:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 291              		.loc 1 300 0
 292 016a 11E0     		b	.L10
 293              	.L16:
 301:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_1MHZ:
 302:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_1MHZ;
 294              		.loc 1 302 0
 295 016c 44F24023 		movw	r3, #16960
 296 0170 C0F20F03 		movt	r3, 15
 297 0174 FB60     		str	r3, [r7, #12]
 303:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 298              		.loc 1 303 0
 299 0176 0BE0     		b	.L10
 300              	.L17:
 304:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_500KHZ:
 305:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_500KHZ;
 301              		.loc 1 305 0
 302 0178 4AF22013 		movw	r3, #41248
 303 017c C0F20703 		movt	r3, 7
 304 0180 FB60     		str	r3, [r7, #12]
 306:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 305              		.loc 1 306 0
 306 0182 05E0     		b	.L10
 307              	.L18:
 307:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_250KHZ:
 308:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_250KHZ;
 308              		.loc 1 308 0
 309 0184 4DF29003 		movw	r3, #53392
 310 0188 C0F20303 		movt	r3, 3
 311 018c FB60     		str	r3, [r7, #12]
 309:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 312              		.loc 1 309 0
 313 018e 00BF     		nop
 314              	.L10:
 310:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 311:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 312:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 313:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Return the computed clock rate.
 314:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 315:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     return(ui32Clk);
 315              		.loc 1 315 0
 316 0190 FB68     		ldr	r3, [r7, #12]
 316:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** } // SysCtrlClockGet
 317              		.loc 1 316 0
 318 0192 1846     		mov	r0, r3
 319 0194 07F11407 		add	r7, r7, #20
 320 0198 BD46     		mov	sp, r7
 321 019a 80BC     		pop	{r7}
 322 019c 7047     		bx	lr
 323              		.cfi_endproc
 324              	.LFE1:
 326 019e 00BF     		.align	2
 327              		.global	SysCtrlIOClockSet
 328              		.thumb
 329              		.thumb_func
 331              	SysCtrlIOClockSet:
 332              	.LFB2:
 317:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 318:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 319:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 320:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Sets the IO clocking of the device
 321:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 322:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32IODiv System Clock Setting.
 323:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 324:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function configures the IO clocking of the device (that is, the
 325:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Baud rate clock for SSI and UART).
 326:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 327:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32IODiv argument must be only one of the following values:
 328:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_SYSDIV_32MHZ, \b SYS_CTRL_SYSDIV_16MHZ,
 329:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_SYSDIV_8MHZ,  \b SYS_CTRL_SYSDIV_4MHZ,
 330:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_SYSDIV_2MHZ,  \b SYS_CTRL_SYSDIV_1MHZ,
 331:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_SYSDIV_500KHZ,\b SYS_CTRL_SYSDIV_250KHZ.
 332:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 333:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Note \b SYS_CTRL_SYSDIV_32MHZ cannot be selected when Internal Oscillator
 334:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! is selected.
 335:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 336:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 337:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 338:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 339:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 340:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlIOClockSet(uint32_t ui32IODiv)
 341:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 333              		.loc 1 341 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 16
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337              		@ link register save eliminated.
 338 01a0 80B4     		push	{r7}
 339              	.LCFI6:
 340              		.cfi_def_cfa_offset 4
 341              		.cfi_offset 7, -4
 342 01a2 85B0     		sub	sp, sp, #20
 343              	.LCFI7:
 344              		.cfi_def_cfa_offset 24
 345 01a4 00AF     		add	r7, sp, #0
 346              	.LCFI8:
 347              		.cfi_def_cfa_register 7
 348 01a6 7860     		str	r0, [r7, #4]
 342:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32RegVal;
 343:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 344:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // check input parameters
 345:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(ui32IODiv == SYS_CTRL_SYSDIV_32MHZ  ||
 346:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            ui32IODiv == SYS_CTRL_SYSDIV_16MHZ  ||
 347:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            ui32IODiv == SYS_CTRL_SYSDIV_8MHZ   ||
 348:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            ui32IODiv == SYS_CTRL_SYSDIV_4MHZ   ||
 349:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            ui32IODiv == SYS_CTRL_SYSDIV_2MHZ   ||
 350:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            ui32IODiv == SYS_CTRL_SYSDIV_1MHZ   ||
 351:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            ui32IODiv == SYS_CTRL_SYSDIV_500KHZ ||
 352:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            ui32IODiv == SYS_CTRL_SYSDIV_250KHZ);
 353:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 354:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32RegVal = HWREG(SYS_CTRL_CLOCK_CTRL);
 349              		.loc 1 354 0
 350 01a8 4FF40053 		mov	r3, #8192
 351 01ac C4F20D03 		movt	r3, 16397
 352 01b0 1B68     		ldr	r3, [r3, #0]
 353 01b2 FB60     		str	r3, [r7, #12]
 355:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32RegVal &= ~SYS_CTRL_CLOCK_CTRL_IO_DIV_M;
 354              		.loc 1 355 0
 355 01b4 FB68     		ldr	r3, [r7, #12]
 356 01b6 23F4E063 		bic	r3, r3, #1792
 357 01ba FB60     		str	r3, [r7, #12]
 356:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32RegVal |= (ui32IODiv << SYS_CTRL_CLOCK_CTRL_IO_DIV_S);
 358              		.loc 1 356 0
 359 01bc 7B68     		ldr	r3, [r7, #4]
 360 01be 4FEA0323 		lsl	r3, r3, #8
 361 01c2 FA68     		ldr	r2, [r7, #12]
 362 01c4 1343     		orrs	r3, r3, r2
 363 01c6 FB60     		str	r3, [r7, #12]
 357:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(SYS_CTRL_CLOCK_CTRL) = ui32RegVal;
 364              		.loc 1 357 0
 365 01c8 4FF40053 		mov	r3, #8192
 366 01cc C4F20D03 		movt	r3, 16397
 367 01d0 FA68     		ldr	r2, [r7, #12]
 368 01d2 1A60     		str	r2, [r3, #0]
 358:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** } // SysCtrlIOClockSet
 369              		.loc 1 358 0
 370 01d4 07F11407 		add	r7, r7, #20
 371 01d8 BD46     		mov	sp, r7
 372 01da 80BC     		pop	{r7}
 373 01dc 7047     		bx	lr
 374              		.cfi_endproc
 375              	.LFE2:
 377 01de 00BF     		.align	2
 378              		.global	SysCtrlIOClockGet
 379              		.thumb
 380              		.thumb_func
 382              	SysCtrlIOClockGet:
 383              	.LFB3:
 359:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 360:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 361:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 362:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 363:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Gets the IO clock rate
 364:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 365:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function returns the IO clocking of the device, i.e. the Baud
 366:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! rate clock for SSI and UART.
 367:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 368:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return The IO clock rate
 369:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 370:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 371:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** uint32_t
 372:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlIOClockGet(void)
 373:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 384              		.loc 1 373 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 16
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 388              		@ link register save eliminated.
 389 01e0 80B4     		push	{r7}
 390              	.LCFI9:
 391              		.cfi_def_cfa_offset 4
 392              		.cfi_offset 7, -4
 393 01e2 85B0     		sub	sp, sp, #20
 394              	.LCFI10:
 395              		.cfi_def_cfa_offset 24
 396 01e4 00AF     		add	r7, sp, #0
 397              	.LCFI11:
 398              		.cfi_def_cfa_register 7
 374:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32Clk;
 375:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32STA;
 376:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32IODiv;
 377:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 378:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32STA = HWREG(SYS_CTRL_CLOCK_STA);
 399              		.loc 1 378 0
 400 01e6 42F20403 		movw	r3, #8196
 401 01ea C4F20D03 		movt	r3, 16397
 402 01ee 1B68     		ldr	r3, [r3, #0]
 403 01f0 BB60     		str	r3, [r7, #8]
 379:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32IODiv =
 380:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         (ui32STA & SYS_CTRL_CLOCK_STA_IO_DIV_M) >> SYS_CTRL_CLOCK_STA_IO_DIV_S;
 404              		.loc 1 380 0
 405 01f2 BB68     		ldr	r3, [r7, #8]
 406 01f4 03F4E063 		and	r3, r3, #1792
 379:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32IODiv =
 407              		.loc 1 379 0
 408 01f8 4FEA1323 		lsr	r3, r3, #8
 409 01fc 7B60     		str	r3, [r7, #4]
 381:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 382:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32Clk = 0;
 410              		.loc 1 382 0
 411 01fe 4FF00003 		mov	r3, #0
 412 0202 FB60     		str	r3, [r7, #12]
 383:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 384:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     switch(ui32IODiv)
 413              		.loc 1 384 0
 414 0204 7B68     		ldr	r3, [r7, #4]
 415 0206 072B     		cmp	r3, #7
 416 0208 42D8     		bhi	.L23
 417 020a 01A2     		adr	r2, .L32
 418 020c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 419              		.align	2
 420              	.L32:
 421 0210 31020000 		.word	.L24+1
 422 0214 3D020000 		.word	.L25+1
 423 0218 49020000 		.word	.L26+1
 424 021c 55020000 		.word	.L27+1
 425 0220 61020000 		.word	.L28+1
 426 0224 6D020000 		.word	.L29+1
 427 0228 79020000 		.word	.L30+1
 428 022c 85020000 		.word	.L31+1
 429              	.L24:
 385:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 386:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_32MHZ:
 387:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_32MHZ;
 430              		.loc 1 387 0
 431 0230 4FF49043 		mov	r3, #18432
 432 0234 C0F2E813 		movt	r3, 488
 433 0238 FB60     		str	r3, [r7, #12]
 388:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 434              		.loc 1 388 0
 435 023a 29E0     		b	.L23
 436              	.L25:
 389:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_16MHZ:
 390:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_16MHZ;
 437              		.loc 1 390 0
 438 023c 4FF41053 		mov	r3, #9216
 439 0240 C0F2F403 		movt	r3, 244
 440 0244 FB60     		str	r3, [r7, #12]
 391:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 441              		.loc 1 391 0
 442 0246 23E0     		b	.L23
 443              	.L26:
 392:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_8MHZ:
 393:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_8MHZ;
 444              		.loc 1 393 0
 445 0248 4FF49053 		mov	r3, #4608
 446 024c C0F27A03 		movt	r3, 122
 447 0250 FB60     		str	r3, [r7, #12]
 394:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 448              		.loc 1 394 0
 449 0252 1DE0     		b	.L23
 450              	.L27:
 395:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_4MHZ:
 396:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_4MHZ;
 451              		.loc 1 396 0
 452 0254 4FF41063 		mov	r3, #2304
 453 0258 C0F23D03 		movt	r3, 61
 454 025c FB60     		str	r3, [r7, #12]
 397:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 455              		.loc 1 397 0
 456 025e 17E0     		b	.L23
 457              	.L28:
 398:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_2MHZ:
 399:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_2MHZ;
 458              		.loc 1 399 0
 459 0260 48F28043 		movw	r3, #33920
 460 0264 C0F21E03 		movt	r3, 30
 461 0268 FB60     		str	r3, [r7, #12]
 400:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 462              		.loc 1 400 0
 463 026a 11E0     		b	.L23
 464              	.L29:
 401:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_1MHZ:
 402:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_1MHZ;
 465              		.loc 1 402 0
 466 026c 44F24023 		movw	r3, #16960
 467 0270 C0F20F03 		movt	r3, 15
 468 0274 FB60     		str	r3, [r7, #12]
 403:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 469              		.loc 1 403 0
 470 0276 0BE0     		b	.L23
 471              	.L30:
 404:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_500KHZ:
 405:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_500KHZ;
 472              		.loc 1 405 0
 473 0278 4AF22013 		movw	r3, #41248
 474 027c C0F20703 		movt	r3, 7
 475 0280 FB60     		str	r3, [r7, #12]
 406:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 476              		.loc 1 406 0
 477 0282 05E0     		b	.L23
 478              	.L31:
 407:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     case SYS_CTRL_SYSDIV_250KHZ:
 408:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Clk = SYS_CTRL_250KHZ;
 479              		.loc 1 408 0
 480 0284 4DF29003 		movw	r3, #53392
 481 0288 C0F20303 		movt	r3, 3
 482 028c FB60     		str	r3, [r7, #12]
 409:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         break;
 483              		.loc 1 409 0
 484 028e 00BF     		nop
 485              	.L23:
 410:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 411:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 412:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 413:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Return the computed clock rate.
 414:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 415:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     return(ui32Clk);
 486              		.loc 1 415 0
 487 0290 FB68     		ldr	r3, [r7, #12]
 416:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** } // SysCtrlIOClockGet
 488              		.loc 1 416 0
 489 0292 1846     		mov	r0, r3
 490 0294 07F11407 		add	r7, r7, #20
 491 0298 BD46     		mov	sp, r7
 492 029a 80BC     		pop	{r7}
 493 029c 7047     		bx	lr
 494              		.cfi_endproc
 495              	.LFE3:
 497 029e 00BF     		.align	2
 498              		.global	SysCtrlDelay
 499              		.thumb
 500              		.thumb_func
 502              	SysCtrlDelay:
 503              	.LFB4:
 417:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 418:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 419:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 420:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 421:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Provides a small delay
 422:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 423:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32Count is the number of delay loop iterations to perform.
 424:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 425:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function provides a means of generating a constant length delay and
 426:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! is written in assembly to keep the delay consistent across tool chains,
 427:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! avoiding the need to tune the delay based on the tool chain in use.
 428:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 429:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The loop takes 3 cycles/loop.
 430:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 431:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 432:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 433:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 434:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #if defined(__ICCARM__) || defined(DOXYGEN)
 435:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 436:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlDelay(uint32_t ui32Count)
 437:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 438:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     __asm("    subs    r0, #1\n"
 439:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****           "    bne.n   SysCtrlDelay\n"
 440:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****           "    bx      lr");
 441:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 442:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #endif
 443:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #if defined(__GNUC__)
 444:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void __attribute__((naked))
 445:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlDelay(uint32_t ui32Count)
 446:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 504              		.loc 1 446 0
 505              		.cfi_startproc
 506              		@ Naked Function: prologue and epilogue provided by programmer.
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 447:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     __asm("    subs    r0, #1\n"
 509              		.loc 1 447 0
 510              	@ 447 "bsp/boards/OpenMote-CC2538/source/sys_ctrl.c" 1
 511 02a0 0138     		    subs    r0, #1
 512 02a2 7FF4FEAF 	    bne     SysCtrlDelay
 513 02a6 7047     	    bx      lr
 514              	@ 0 "" 2
 448:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****           "    bne     SysCtrlDelay\n"
 449:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****           "    bx      lr");
 450:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 515              		.loc 1 450 0
 516              		.thumb
 517              		.cfi_endproc
 518              	.LFE4:
 520              		.align	2
 521              		.global	SysCtrlReset
 522              		.thumb
 523              		.thumb_func
 525              	SysCtrlReset:
 526              	.LFB5:
 451:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #endif
 452:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 453:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** __asm void
 454:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlDelay(uint32_t ui32Count)
 455:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 456:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     subs    r0, #1;
 457:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     bne     SysCtrlDelay;
 458:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     bx      lr;
 459:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 460:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #endif
 461:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 462:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // For CCS implement this function in pure assembly.  This prevents the TI
 463:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** // compiler from doing funny things with the optimizer.
 464:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 465:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #if defined(__TI_COMPILER_VERSION__)
 466:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** __asm("    .sect \".text:SysCtrlDelay\"\n"
 467:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****       "    .clink\n"
 468:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****       "    .thumbfunc SysCtrlDelay\n"
 469:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****       "    .thumb\n"
 470:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****       "    .global SysCtrlDelay\n"
 471:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****       "SysCtrlDelay:\n"
 472:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****       "    subs r0, #1\n"
 473:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****       "    bne.n SysCtrlDelay\n"
 474:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****       "    bx lr\n");
 475:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #endif
 476:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 477:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 478:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 479:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 480:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Resets the device
 481:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 482:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function performs a software reset of the entire device.  The
 483:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! processor and all peripherals are reset and all device registers are
 484:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! returned to their default values.
 485:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 486:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return This function does not return.
 487:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 488:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 489:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 490:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlReset(void)
 491:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 527              		.loc 1 491 0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 0
 530              		@ frame_needed = 1, uses_anonymous_args = 0
 531              		@ link register save eliminated.
 532 02a8 80B4     		push	{r7}
 533              	.LCFI12:
 534              		.cfi_def_cfa_offset 4
 535              		.cfi_offset 7, -4
 536 02aa 00AF     		add	r7, sp, #0
 537              	.LCFI13:
 538              		.cfi_def_cfa_register 7
 492:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 493:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Perform a software reset request.  This request causes the device to
 494:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // reset, no further code is executed.
 495:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 496:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(SYS_CTRL_PWRDBG) = SYS_CTRL_PWRDBG_FORCE_WARM_RESET;
 539              		.loc 1 496 0
 540 02ac 42F27403 		movw	r3, #8308
 541 02b0 C4F20D03 		movt	r3, 16397
 542 02b4 4FF00802 		mov	r2, #8
 543 02b8 1A60     		str	r2, [r3, #0]
 544              	.L36:
 497:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 498:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 499:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // The device should have reset, so this should never be reached.  Just in
 500:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // case, loop forever.
 501:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 502:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     while(1)
 503:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 504:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 545              		.loc 1 504 0 discriminator 1
 546 02ba FEE7     		b	.L36
 547              		.cfi_endproc
 548              	.LFE5:
 550              		.align	2
 551              		.global	SysCtrlSleep
 552              		.thumb
 553              		.thumb_func
 555              	SysCtrlSleep:
 556              	.LFB6:
 505:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 506:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 507:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 508:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 509:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 510:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Puts the processor into sleep mode
 511:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 512:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function places the processor into sleep mode and does not return
 513:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! until the processor returns to run mode.  The peripherals that are enabled
 514:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! by SysCtrlPeripheralSleepEnable() continue to operate and can wake up the
 515:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! processor.
 516:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 517:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \sa SysCtrlPeripheralSleepEnable()
 518:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 519:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 520:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 521:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 522:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 523:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlSleep(void)
 524:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 557              		.loc 1 524 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561 02bc 80B5     		push	{r7, lr}
 562              	.LCFI14:
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 02be 00AF     		add	r7, sp, #0
 567              	.LCFI15:
 568              		.cfi_def_cfa_register 7
 525:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 526:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Wait for an interrupt.
 527:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 528:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     CPUwfi();
 569              		.loc 1 528 0
 570 02c0 FFF7FEFF 		bl	CPUwfi
 529:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 571              		.loc 1 529 0
 572 02c4 80BD     		pop	{r7, pc}
 573              		.cfi_endproc
 574              	.LFE6:
 576 02c6 00BF     		.align	2
 577              		.global	SysCtrlDeepSleep
 578              		.thumb
 579              		.thumb_func
 581              	SysCtrlDeepSleep:
 582              	.LFB7:
 530:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 531:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 532:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 533:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 534:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Puts the processor into deep-sleep mode
 535:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 536:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function places the processor into deep-sleep mode and does not return
 537:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! until the processor returns to run mode.  The peripherals that are enabled
 538:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! by SysCtrlPeripheralDeepSleepEnable() continue to operate and can wake up
 539:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! the processor (if not in power mode 1, 2, or 3).
 540:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Note the power mode should be set before going into deep sleep.
 541:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 542:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \sa SysCtrlPowerModeSet(), SysCtrlPeripheralDeepSleepEnable()
 543:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 544:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 545:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 546:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 547:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 548:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlDeepSleep(void)
 549:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 583              		.loc 1 549 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 8
 586              		@ frame_needed = 1, uses_anonymous_args = 0
 587 02c8 80B5     		push	{r7, lr}
 588              	.LCFI16:
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 7, -8
 591              		.cfi_offset 14, -4
 592 02ca 82B0     		sub	sp, sp, #8
 593              	.LCFI17:
 594              		.cfi_def_cfa_offset 16
 595 02cc 00AF     		add	r7, sp, #0
 596              	.LCFI18:
 597              		.cfi_def_cfa_register 7
 550:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #ifndef NO_CLOCK_DIVIDER_RESTORE
 551:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     bool  bRestoreSys;
 552:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     bool  bRestoreIO;
 553:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32Reg;
 554:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 555:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32Reg = HWREG(SYS_CTRL_CLOCK_STA);
 598              		.loc 1 555 0
 599 02ce 42F20403 		movw	r3, #8196
 600 02d2 C4F20D03 		movt	r3, 16397
 601 02d6 1B68     		ldr	r3, [r3, #0]
 602 02d8 7B60     		str	r3, [r7, #4]
 556:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     bRestoreSys = (ui32Reg & SYS_CTRL_CLOCK_STA_SYS_DIV_M)==0;
 603              		.loc 1 556 0
 604 02da 7B68     		ldr	r3, [r7, #4]
 605 02dc 03F00703 		and	r3, r3, #7
 606 02e0 002B     		cmp	r3, #0
 607 02e2 14BF     		ite	ne
 608 02e4 0023     		movne	r3, #0
 609 02e6 0123     		moveq	r3, #1
 610 02e8 FB70     		strb	r3, [r7, #3]
 557:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     bRestoreIO  = (ui32Reg & SYS_CTRL_CLOCK_STA_IO_DIV_M)==0;
 611              		.loc 1 557 0
 612 02ea 7B68     		ldr	r3, [r7, #4]
 613 02ec 03F4E063 		and	r3, r3, #1792
 614 02f0 002B     		cmp	r3, #0
 615 02f2 14BF     		ite	ne
 616 02f4 0023     		movne	r3, #0
 617 02f6 0123     		moveq	r3, #1
 618 02f8 BB70     		strb	r3, [r7, #2]
 558:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     if(bRestoreSys || bRestoreIO)
 619              		.loc 1 558 0
 620 02fa FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 621 02fc 002B     		cmp	r3, #0
 622 02fe 02D1     		bne	.L39
 623              		.loc 1 558 0 is_stmt 0 discriminator 1
 624 0300 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 625 0302 002B     		cmp	r3, #0
 626 0304 21D0     		beq	.L40
 627              	.L39:
 559:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 560:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Reg = HWREG(SYS_CTRL_CLOCK_CTRL);
 628              		.loc 1 560 0 is_stmt 1
 629 0306 4FF40053 		mov	r3, #8192
 630 030a C4F20D03 		movt	r3, 16397
 631 030e 1B68     		ldr	r3, [r3, #0]
 632 0310 7B60     		str	r3, [r7, #4]
 561:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Reg |= bRestoreSys? 0x1:0x0;
 633              		.loc 1 561 0
 634 0312 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 635 0314 002B     		cmp	r3, #0
 636 0316 02D0     		beq	.L41
 637              		.loc 1 561 0 is_stmt 0 discriminator 1
 638 0318 4FF00103 		mov	r3, #1
 639 031c 01E0     		b	.L42
 640              	.L41:
 641              		.loc 1 561 0 discriminator 2
 642 031e 4FF00003 		mov	r3, #0
 643              	.L42:
 644              		.loc 1 561 0 discriminator 3
 645 0322 7A68     		ldr	r2, [r7, #4]
 646 0324 1343     		orrs	r3, r3, r2
 647 0326 7B60     		str	r3, [r7, #4]
 562:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Reg |= bRestoreIO? 0x100:0x0;
 648              		.loc 1 562 0 is_stmt 1 discriminator 3
 649 0328 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 650 032a 002B     		cmp	r3, #0
 651 032c 02D0     		beq	.L43
 652              		.loc 1 562 0 is_stmt 0 discriminator 1
 653 032e 4FF48073 		mov	r3, #256
 654 0332 01E0     		b	.L44
 655              	.L43:
 656              		.loc 1 562 0 discriminator 2
 657 0334 4FF00003 		mov	r3, #0
 658              	.L44:
 659              		.loc 1 562 0 discriminator 3
 660 0338 7A68     		ldr	r2, [r7, #4]
 661 033a 1343     		orrs	r3, r3, r2
 662 033c 7B60     		str	r3, [r7, #4]
 563:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         HWREG(SYS_CTRL_CLOCK_CTRL) = ui32Reg;
 663              		.loc 1 563 0 is_stmt 1 discriminator 3
 664 033e 4FF40053 		mov	r3, #8192
 665 0342 C4F20D03 		movt	r3, 16397
 666 0346 7A68     		ldr	r2, [r7, #4]
 667 0348 1A60     		str	r2, [r3, #0]
 668              	.L40:
 564:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 565:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #endif
 566:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     
 567:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 568:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Enable deep-sleep.
 569:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 570:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
 669              		.loc 1 570 0
 670 034a 4EF61053 		movw	r3, #60688
 671 034e CEF20003 		movt	r3, 57344
 672 0352 4EF61052 		movw	r2, #60688
 673 0356 CEF20002 		movt	r2, 57344
 674 035a 1268     		ldr	r2, [r2, #0]
 675 035c 42F00402 		orr	r2, r2, #4
 676 0360 1A60     		str	r2, [r3, #0]
 571:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 572:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 573:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Wait for an interrupt.
 574:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 575:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     CPUwfi();
 677              		.loc 1 575 0
 678 0362 FFF7FEFF 		bl	CPUwfi
 576:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 577:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 578:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Disable deep-sleep so that a future sleep will work correctly.
 579:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     //
 580:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
 679              		.loc 1 580 0
 680 0366 4EF61053 		movw	r3, #60688
 681 036a CEF20003 		movt	r3, 57344
 682 036e 4EF61052 		movw	r2, #60688
 683 0372 CEF20002 		movt	r2, 57344
 684 0376 1268     		ldr	r2, [r2, #0]
 685 0378 22F00402 		bic	r2, r2, #4
 686 037c 1A60     		str	r2, [r3, #0]
 581:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 582:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #ifndef NO_CLOCK_DIVIDER_RESTORE
 583:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     if(bRestoreSys || bRestoreIO)
 687              		.loc 1 583 0
 688 037e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 689 0380 002B     		cmp	r3, #0
 690 0382 02D1     		bne	.L45
 691              		.loc 1 583 0 is_stmt 0 discriminator 1
 692 0384 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 693 0386 002B     		cmp	r3, #0
 694 0388 21D0     		beq	.L38
 695              	.L45:
 584:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 585:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Reg = HWREG(SYS_CTRL_CLOCK_CTRL);
 696              		.loc 1 585 0 is_stmt 1
 697 038a 4FF40053 		mov	r3, #8192
 698 038e C4F20D03 		movt	r3, 16397
 699 0392 1B68     		ldr	r3, [r3, #0]
 700 0394 7B60     		str	r3, [r7, #4]
 586:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Reg &= bRestoreSys ? ~SYS_CTRL_CLOCK_CTRL_SYS_DIV_M : 0xffffffff;
 701              		.loc 1 586 0
 702 0396 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 703 0398 002B     		cmp	r3, #0
 704 039a 02D0     		beq	.L47
 705              		.loc 1 586 0 is_stmt 0 discriminator 1
 706 039c 6FF00703 		mvn	r3, #7
 707 03a0 01E0     		b	.L48
 708              	.L47:
 709              		.loc 1 586 0 discriminator 2
 710 03a2 4FF0FF33 		mov	r3, #-1
 711              	.L48:
 712              		.loc 1 586 0 discriminator 3
 713 03a6 7A68     		ldr	r2, [r7, #4]
 714 03a8 1340     		ands	r3, r3, r2
 715 03aa 7B60     		str	r3, [r7, #4]
 587:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32Reg &= bRestoreIO ?  ~SYS_CTRL_CLOCK_CTRL_IO_DIV_M : 0xffffffff;
 716              		.loc 1 587 0 is_stmt 1 discriminator 3
 717 03ac BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 718 03ae 002B     		cmp	r3, #0
 719 03b0 02D0     		beq	.L49
 720              		.loc 1 587 0 is_stmt 0 discriminator 1
 721 03b2 6FF4E063 		mvn	r3, #1792
 722 03b6 01E0     		b	.L50
 723              	.L49:
 724              		.loc 1 587 0 discriminator 2
 725 03b8 4FF0FF33 		mov	r3, #-1
 726              	.L50:
 727              		.loc 1 587 0 discriminator 3
 728 03bc 7A68     		ldr	r2, [r7, #4]
 729 03be 1340     		ands	r3, r3, r2
 730 03c0 7B60     		str	r3, [r7, #4]
 588:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         HWREG(SYS_CTRL_CLOCK_CTRL) = ui32Reg;
 731              		.loc 1 588 0 is_stmt 1 discriminator 3
 732 03c2 4FF40053 		mov	r3, #8192
 733 03c6 C4F20D03 		movt	r3, 16397
 734 03ca 7A68     		ldr	r2, [r7, #4]
 735 03cc 1A60     		str	r2, [r3, #0]
 736              	.L38:
 589:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 590:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** #endif
 591:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 737              		.loc 1 591 0
 738 03ce 07F10807 		add	r7, r7, #8
 739 03d2 BD46     		mov	sp, r7
 740 03d4 80BD     		pop	{r7, pc}
 741              		.cfi_endproc
 742              	.LFE7:
 744 03d6 00BF     		.align	2
 745              		.global	SysCtrlPeripheralPresent
 746              		.thumb
 747              		.thumb_func
 749              	SysCtrlPeripheralPresent:
 750              	.LFB8:
 592:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 593:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 594:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 595:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 596:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 597:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Determines if a peripheral is present
 598:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 599:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32Peripheral is the peripheral in question.
 600:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 601:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Determines if a particular peripheral is present in the device (that is,
 602:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! is not permanently disabled).
 603:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 604:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32Peripheral parameter must be one of the values:
 605:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT0 , \b SYS_CTRL_PERIPH_GPT1,
 606:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT2,  \b SYS_CTRL_PERIPH_GPT3,
 607:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_SSI0,  \b SYS_CTRL_PERIPH_SSI1,
 608:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_UART0, \b SYS_CTRL_PERIPH_UART1,
 609:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_I2C,   \b SYS_CTRL_PERIPH_PKA,
 610:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_AES,   \b SYS_CTRL_PERIPH_RFC.
 611:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 612:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return Returns \b true if the specified peripheral is present and \b false
 613:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! if it is permanently disabled.
 614:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 615:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 616:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** bool
 617:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPeripheralPresent(uint32_t ui32Peripheral)
 618:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 751              		.loc 1 618 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 16
 754              		@ frame_needed = 1, uses_anonymous_args = 0
 755              		@ link register save eliminated.
 756 03d8 80B4     		push	{r7}
 757              	.LCFI19:
 758              		.cfi_def_cfa_offset 4
 759              		.cfi_offset 7, -4
 760 03da 85B0     		sub	sp, sp, #20
 761              	.LCFI20:
 762              		.cfi_def_cfa_offset 24
 763 03dc 00AF     		add	r7, sp, #0
 764              	.LCFI21:
 765              		.cfi_def_cfa_register 7
 766 03de 7860     		str	r0, [r7, #4]
 619:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32DieCfg;
 620:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32Mask;
 621:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 622:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Check the arguments.
 623:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(SysCtrlPeripheralValid(ui32Peripheral));
 624:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 625:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     if(SYS_CTRL_PERIPH_INDEX(ui32Peripheral) ==
 767              		.loc 1 625 0
 768 03e0 7B68     		ldr	r3, [r7, #4]
 769 03e2 4FEA1323 		lsr	r3, r3, #8
 770 03e6 03F00F03 		and	r3, r3, #15
 771 03ea 042B     		cmp	r3, #4
 772 03ec 0DD0     		beq	.L52
 626:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             SYS_CTRL_PERIPH_INDEX(SYS_CTRL_PERIPH_PKA) ||
 627:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             SYS_CTRL_PERIPH_INDEX(ui32Peripheral) ==
 773              		.loc 1 627 0
 774 03ee 7B68     		ldr	r3, [r7, #4]
 775 03f0 4FEA1323 		lsr	r3, r3, #8
 776 03f4 03F00F03 		and	r3, r3, #15
 626:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             SYS_CTRL_PERIPH_INDEX(SYS_CTRL_PERIPH_PKA) ||
 777              		.loc 1 626 0
 778 03f8 042B     		cmp	r3, #4
 779 03fa 06D0     		beq	.L52
 628:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             SYS_CTRL_PERIPH_INDEX(SYS_CTRL_PERIPH_AES) ||
 629:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             SYS_CTRL_PERIPH_INDEX(ui32Peripheral) ==
 780              		.loc 1 629 0
 781 03fc 7B68     		ldr	r3, [r7, #4]
 782 03fe 4FEA1323 		lsr	r3, r3, #8
 783 0402 03F00F03 		and	r3, r3, #15
 628:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             SYS_CTRL_PERIPH_INDEX(SYS_CTRL_PERIPH_AES) ||
 784              		.loc 1 628 0
 785 0406 052B     		cmp	r3, #5
 786 0408 06D1     		bne	.L53
 787              	.L52:
 630:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****             SYS_CTRL_PERIPH_INDEX(SYS_CTRL_PERIPH_RFC))
 631:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 632:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32DieCfg = HWREG(FLASH_CTRL_DIECFG2);
 788              		.loc 1 632 0
 789 040a 43F21C03 		movw	r3, #12316
 790 040e C4F20D03 		movt	r3, 16397
 791 0412 1B68     		ldr	r3, [r3, #0]
 792 0414 FB60     		str	r3, [r7, #12]
 793 0416 05E0     		b	.L54
 794              	.L53:
 633:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 634:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     else
 635:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 636:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ui32DieCfg = HWREG(FLASH_CTRL_DIECFG1);
 795              		.loc 1 636 0
 796 0418 43F21803 		movw	r3, #12312
 797 041c C4F20D03 		movt	r3, 16397
 798 0420 1B68     		ldr	r3, [r3, #0]
 799 0422 FB60     		str	r3, [r7, #12]
 800              	.L54:
 637:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 638:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 639:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32Mask = (g_pui32DieCfgMask[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)] <<
 801              		.loc 1 639 0
 802 0424 7B68     		ldr	r3, [r7, #4]
 803 0426 4FEA1323 		lsr	r3, r3, #8
 804 042a 03F00F02 		and	r2, r3, #15
 805 042e 40F20003 		movw	r3, #:lower16:g_pui32DieCfgMask
 806 0432 C0F20003 		movt	r3, #:upper16:g_pui32DieCfgMask
 807 0436 53F82220 		ldr	r2, [r3, r2, lsl #2]
 808 043a 7B68     		ldr	r3, [r7, #4]
 809 043c 03F00F03 		and	r3, r3, #15
 810 0440 02FA03F3 		lsl	r3, r2, r3
 811 0444 BB60     		str	r3, [r7, #8]
 640:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****                 SYS_CTRL_PERIPH_INSTANCE(ui32Peripheral));
 641:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 642:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Mask with correct  mask and determine if this peripheral is
 643:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // permanently disabled.
 644:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     if(ui32DieCfg & ui32Mask)
 812              		.loc 1 644 0
 813 0446 FA68     		ldr	r2, [r7, #12]
 814 0448 BB68     		ldr	r3, [r7, #8]
 815 044a 1340     		ands	r3, r3, r2
 816 044c 002B     		cmp	r3, #0
 817 044e 02D0     		beq	.L55
 645:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 646:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         return(true);
 818              		.loc 1 646 0
 819 0450 4FF00103 		mov	r3, #1
 820 0454 01E0     		b	.L56
 821              	.L55:
 647:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 648:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     else
 649:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     {
 650:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         return(false);
 822              		.loc 1 650 0
 823 0456 4FF00003 		mov	r3, #0
 824              	.L56:
 651:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     }
 652:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 825              		.loc 1 652 0
 826 045a 1846     		mov	r0, r3
 827 045c 07F11407 		add	r7, r7, #20
 828 0460 BD46     		mov	sp, r7
 829 0462 80BC     		pop	{r7}
 830 0464 7047     		bx	lr
 831              		.cfi_endproc
 832              	.LFE8:
 834 0466 00BF     		.align	2
 835              		.global	SysCtrlPeripheralReset
 836              		.thumb
 837              		.thumb_func
 839              	SysCtrlPeripheralReset:
 840              	.LFB9:
 653:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 654:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 655:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 656:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Performs a software reset of a peripheral
 657:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 658:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32Peripheral is the peripheral to reset.
 659:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 660:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function performs a software reset of the specified peripheral.  An
 661:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! individual peripheral reset signal is asserted for a brief period and then
 662:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! deasserted, leaving the peripheral in a operating state but in its reset
 663:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! condition.
 664:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 665:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32Peripheral parameter must be one of the values:
 666:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT0 , \b SYS_CTRL_PERIPH_GPT1,
 667:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT2,  \b SYS_CTRL_PERIPH_GPT3,
 668:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_SSI0,  \b SYS_CTRL_PERIPH_SSI1,
 669:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_UART0, \b SYS_CTRL_PERIPH_UART1,
 670:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_I2C,   \b SYS_CTRL_PERIPH_PKA,
 671:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_AES.
 672:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 673:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 674:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 675:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 676:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 677:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPeripheralReset(uint32_t ui32Peripheral)
 678:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 841              		.loc 1 678 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 16
 844              		@ frame_needed = 1, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846 0468 80B4     		push	{r7}
 847              	.LCFI22:
 848              		.cfi_def_cfa_offset 4
 849              		.cfi_offset 7, -4
 850 046a 85B0     		sub	sp, sp, #20
 851              	.LCFI23:
 852              		.cfi_def_cfa_offset 24
 853 046c 00AF     		add	r7, sp, #0
 854              	.LCFI24:
 855              		.cfi_def_cfa_register 7
 856 046e 7860     		str	r0, [r7, #4]
 679:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     volatile uint32_t ui32Delay;
 680:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 681:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Check the arguments.
 682:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(SysCtrlPeripheralValid(ui32Peripheral));
 683:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(!(ui32Peripheral == SYS_CTRL_PERIPH_RFC));
 684:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 685:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Put the peripheral into the reset state.
 686:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32SRRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) |=
 857              		.loc 1 686 0
 858 0470 7B68     		ldr	r3, [r7, #4]
 859 0472 4FEA1323 		lsr	r3, r3, #8
 860 0476 03F00F02 		and	r2, r3, #15
 861 047a 40F20003 		movw	r3, #:lower16:g_pui32SRRegs
 862 047e C0F20003 		movt	r3, #:upper16:g_pui32SRRegs
 863 0482 53F82230 		ldr	r3, [r3, r2, lsl #2]
 864 0486 1A46     		mov	r2, r3
 865 0488 7B68     		ldr	r3, [r7, #4]
 866 048a 4FEA1323 		lsr	r3, r3, #8
 867 048e 03F00F01 		and	r1, r3, #15
 868 0492 40F20003 		movw	r3, #:lower16:g_pui32SRRegs
 869 0496 C0F20003 		movt	r3, #:upper16:g_pui32SRRegs
 870 049a 53F82130 		ldr	r3, [r3, r1, lsl #2]
 871 049e 1968     		ldr	r1, [r3, #0]
 687:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         SYS_CTRL_PERIPH_MASKBIT(ui32Peripheral);
 872              		.loc 1 687 0
 873 04a0 7B68     		ldr	r3, [r7, #4]
 874 04a2 03F00F03 		and	r3, r3, #15
 875 04a6 4FF00100 		mov	r0, #1
 876 04aa 00FA03F3 		lsl	r3, r0, r3
 686:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32SRRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) |=
 877              		.loc 1 686 0
 878 04ae 0B43     		orrs	r3, r3, r1
 879 04b0 1360     		str	r3, [r2, #0]
 688:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 689:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Delay for a little bit.
 690:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     for(ui32Delay = 0; ui32Delay < 16; ui32Delay++) { }
 880              		.loc 1 690 0
 881 04b2 4FF00003 		mov	r3, #0
 882 04b6 FB60     		str	r3, [r7, #12]
 883 04b8 03E0     		b	.L58
 884              	.L59:
 885              		.loc 1 690 0 is_stmt 0 discriminator 2
 886 04ba FB68     		ldr	r3, [r7, #12]
 887 04bc 03F10103 		add	r3, r3, #1
 888 04c0 FB60     		str	r3, [r7, #12]
 889              	.L58:
 890              		.loc 1 690 0 discriminator 1
 891 04c2 FB68     		ldr	r3, [r7, #12]
 892 04c4 0F2B     		cmp	r3, #15
 893 04c6 F8D9     		bls	.L59
 691:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 692:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Take the peripheral out of the reset state.
 693:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32SRRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) &=
 894              		.loc 1 693 0 is_stmt 1
 895 04c8 7B68     		ldr	r3, [r7, #4]
 896 04ca 4FEA1323 		lsr	r3, r3, #8
 897 04ce 03F00F02 		and	r2, r3, #15
 898 04d2 40F20003 		movw	r3, #:lower16:g_pui32SRRegs
 899 04d6 C0F20003 		movt	r3, #:upper16:g_pui32SRRegs
 900 04da 53F82230 		ldr	r3, [r3, r2, lsl #2]
 901 04de 1A46     		mov	r2, r3
 902 04e0 7B68     		ldr	r3, [r7, #4]
 903 04e2 4FEA1323 		lsr	r3, r3, #8
 904 04e6 03F00F01 		and	r1, r3, #15
 905 04ea 40F20003 		movw	r3, #:lower16:g_pui32SRRegs
 906 04ee C0F20003 		movt	r3, #:upper16:g_pui32SRRegs
 907 04f2 53F82130 		ldr	r3, [r3, r1, lsl #2]
 908 04f6 1968     		ldr	r1, [r3, #0]
 694:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ~SYS_CTRL_PERIPH_MASKBIT(ui32Peripheral);
 909              		.loc 1 694 0
 910 04f8 7B68     		ldr	r3, [r7, #4]
 911 04fa 03F00F03 		and	r3, r3, #15
 912 04fe 4FF00100 		mov	r0, #1
 913 0502 00FA03F3 		lsl	r3, r0, r3
 914 0506 6FEA0303 		mvn	r3, r3
 693:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32SRRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) &=
 915              		.loc 1 693 0
 916 050a 0B40     		ands	r3, r3, r1
 917 050c 1360     		str	r3, [r2, #0]
 695:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 918              		.loc 1 695 0
 919 050e 07F11407 		add	r7, r7, #20
 920 0512 BD46     		mov	sp, r7
 921 0514 80BC     		pop	{r7}
 922 0516 7047     		bx	lr
 923              		.cfi_endproc
 924              	.LFE9:
 926              		.align	2
 927              		.global	SysCtrlPeripheralEnable
 928              		.thumb
 929              		.thumb_func
 931              	SysCtrlPeripheralEnable:
 932              	.LFB10:
 696:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 697:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 698:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 699:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 700:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Enables a peripheral (in Run mode)
 701:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 702:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32Peripheral is the peripheral to enable.
 703:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 704:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Peripherals are enabled with this function.  At power-up, some peripherals
 705:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! are disabled and must be enabled to operate or respond to
 706:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! register reads/writes.
 707:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 708:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32Peripheral parameter must be one of the values:
 709:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT0 , \b SYS_CTRL_PERIPH_GPT1,
 710:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT2,  \b SYS_CTRL_PERIPH_GPT3,
 711:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_SSI0,  \b SYS_CTRL_PERIPH_SSI1,
 712:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_UART0, \b SYS_CTRL_PERIPH_UART1,
 713:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_I2C,   \b SYS_CTRL_PERIPH_PKA,
 714:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_AES,   \b SYS_CTRL_PERIPH_RFC.
 715:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 716:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \note The actual enabling of the peripheral might be delayed until some
 717:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! time after this function returns. Ensure that the peripheral is not
 718:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! accessed until enabled.
 719:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 720:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 721:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 722:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 723:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 724:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPeripheralEnable(uint32_t ui32Peripheral)
 725:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 933              		.loc 1 725 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 8
 936              		@ frame_needed = 1, uses_anonymous_args = 0
 937              		@ link register save eliminated.
 938 0518 80B4     		push	{r7}
 939              	.LCFI25:
 940              		.cfi_def_cfa_offset 4
 941              		.cfi_offset 7, -4
 942 051a 83B0     		sub	sp, sp, #12
 943              	.LCFI26:
 944              		.cfi_def_cfa_offset 16
 945 051c 00AF     		add	r7, sp, #0
 946              	.LCFI27:
 947              		.cfi_def_cfa_register 7
 948 051e 7860     		str	r0, [r7, #4]
 726:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Check the arguments.
 727:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(SysCtrlPeripheralValid(ui32Peripheral));
 728:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 729:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Enable module in Run Mode
 730:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32RCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) |=
 949              		.loc 1 730 0
 950 0520 7B68     		ldr	r3, [r7, #4]
 951 0522 4FEA1323 		lsr	r3, r3, #8
 952 0526 03F00F02 		and	r2, r3, #15
 953 052a 40F20003 		movw	r3, #:lower16:g_pui32RCGCRegs
 954 052e C0F20003 		movt	r3, #:upper16:g_pui32RCGCRegs
 955 0532 53F82230 		ldr	r3, [r3, r2, lsl #2]
 956 0536 1A46     		mov	r2, r3
 957 0538 7B68     		ldr	r3, [r7, #4]
 958 053a 4FEA1323 		lsr	r3, r3, #8
 959 053e 03F00F01 		and	r1, r3, #15
 960 0542 40F20003 		movw	r3, #:lower16:g_pui32RCGCRegs
 961 0546 C0F20003 		movt	r3, #:upper16:g_pui32RCGCRegs
 962 054a 53F82130 		ldr	r3, [r3, r1, lsl #2]
 963 054e 1968     		ldr	r1, [r3, #0]
 731:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         SYS_CTRL_PERIPH_MASKBIT(ui32Peripheral);
 964              		.loc 1 731 0
 965 0550 7B68     		ldr	r3, [r7, #4]
 966 0552 03F00F03 		and	r3, r3, #15
 967 0556 4FF00100 		mov	r0, #1
 968 055a 00FA03F3 		lsl	r3, r0, r3
 730:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32RCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) |=
 969              		.loc 1 730 0
 970 055e 0B43     		orrs	r3, r3, r1
 971 0560 1360     		str	r3, [r2, #0]
 732:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 972              		.loc 1 732 0
 973 0562 07F10C07 		add	r7, r7, #12
 974 0566 BD46     		mov	sp, r7
 975 0568 80BC     		pop	{r7}
 976 056a 7047     		bx	lr
 977              		.cfi_endproc
 978              	.LFE10:
 980              		.align	2
 981              		.global	SysCtrlPeripheralDisable
 982              		.thumb
 983              		.thumb_func
 985              	SysCtrlPeripheralDisable:
 986              	.LFB11:
 733:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 734:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 735:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 736:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 737:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Disables a peripheral (in Run mode)
 738:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 739:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32Peripheral is the peripheral to disable.
 740:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 741:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Peripherals are disabled with this function. Once disabled, peripherals do
 742:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! not operate or respond to register reads/writes.
 743:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 744:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32Peripheral parameter must be one of the values:
 745:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT0 , \b SYS_CTRL_PERIPH_GPT1,
 746:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT2,  \b SYS_CTRL_PERIPH_GPT3,
 747:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_SSI0,  \b SYS_CTRL_PERIPH_SSI1,
 748:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_UART0, \b SYS_CTRL_PERIPH_UART1,
 749:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_I2C,   \b SYS_CTRL_PERIPH_PKA,
 750:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_AES,   \b SYS_CTRL_PERIPH_RFC.
 751:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 752:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 753:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 754:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 755:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 756:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPeripheralDisable(uint32_t ui32Peripheral)
 757:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 987              		.loc 1 757 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 8
 990              		@ frame_needed = 1, uses_anonymous_args = 0
 991              		@ link register save eliminated.
 992 056c 80B4     		push	{r7}
 993              	.LCFI28:
 994              		.cfi_def_cfa_offset 4
 995              		.cfi_offset 7, -4
 996 056e 83B0     		sub	sp, sp, #12
 997              	.LCFI29:
 998              		.cfi_def_cfa_offset 16
 999 0570 00AF     		add	r7, sp, #0
 1000              	.LCFI30:
 1001              		.cfi_def_cfa_register 7
 1002 0572 7860     		str	r0, [r7, #4]
 758:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Check the arguments.
 759:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(SysCtrlPeripheralValid(ui32Peripheral));
 760:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 761:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Disable module in Run Mode
 762:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32RCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) &=
 1003              		.loc 1 762 0
 1004 0574 7B68     		ldr	r3, [r7, #4]
 1005 0576 4FEA1323 		lsr	r3, r3, #8
 1006 057a 03F00F02 		and	r2, r3, #15
 1007 057e 40F20003 		movw	r3, #:lower16:g_pui32RCGCRegs
 1008 0582 C0F20003 		movt	r3, #:upper16:g_pui32RCGCRegs
 1009 0586 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1010 058a 1A46     		mov	r2, r3
 1011 058c 7B68     		ldr	r3, [r7, #4]
 1012 058e 4FEA1323 		lsr	r3, r3, #8
 1013 0592 03F00F01 		and	r1, r3, #15
 1014 0596 40F20003 		movw	r3, #:lower16:g_pui32RCGCRegs
 1015 059a C0F20003 		movt	r3, #:upper16:g_pui32RCGCRegs
 1016 059e 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1017 05a2 1968     		ldr	r1, [r3, #0]
 763:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ~SYS_CTRL_PERIPH_MASKBIT(ui32Peripheral);
 1018              		.loc 1 763 0
 1019 05a4 7B68     		ldr	r3, [r7, #4]
 1020 05a6 03F00F03 		and	r3, r3, #15
 1021 05aa 4FF00100 		mov	r0, #1
 1022 05ae 00FA03F3 		lsl	r3, r0, r3
 1023 05b2 6FEA0303 		mvn	r3, r3
 762:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32RCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) &=
 1024              		.loc 1 762 0
 1025 05b6 0B40     		ands	r3, r3, r1
 1026 05b8 1360     		str	r3, [r2, #0]
 764:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 1027              		.loc 1 764 0
 1028 05ba 07F10C07 		add	r7, r7, #12
 1029 05be BD46     		mov	sp, r7
 1030 05c0 80BC     		pop	{r7}
 1031 05c2 7047     		bx	lr
 1032              		.cfi_endproc
 1033              	.LFE11:
 1035              		.align	2
 1036              		.global	SysCtrlPeripheralSleepEnable
 1037              		.thumb
 1038              		.thumb_func
 1040              	SysCtrlPeripheralSleepEnable:
 1041              	.LFB12:
 765:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 766:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 767:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 768:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 769:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Enables a peripheral in sleep mode
 770:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 771:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32Peripheral is the peripheral to enable in sleep mode.
 772:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 773:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function allows a peripheral to continue operating when the processor
 774:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! goes into sleep mode.  Because the clocking configuration of the device does
 775:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! not change, any peripheral can safely continue operating while the
 776:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! processor is in sleep mode, and can therefore wake the processor from sleep
 777:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! mode.
 778:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 779:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32Peripheral parameter must be one of the values:
 780:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT0 , \b SYS_CTRL_PERIPH_GPT1,
 781:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT2,  \b SYS_CTRL_PERIPH_GPT3,
 782:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_SSI0,  \b SYS_CTRL_PERIPH_SSI1,
 783:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_UART0, \b SYS_CTRL_PERIPH_UART1,
 784:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_I2C,   \b SYS_CTRL_PERIPH_PKA,
 785:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_AES,   \b SYS_CTRL_PERIPH_RFC.
 786:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 787:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 788:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 789:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 790:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 791:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPeripheralSleepEnable(uint32_t ui32Peripheral)
 792:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 1042              		.loc 1 792 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 8
 1045              		@ frame_needed = 1, uses_anonymous_args = 0
 1046              		@ link register save eliminated.
 1047 05c4 80B4     		push	{r7}
 1048              	.LCFI31:
 1049              		.cfi_def_cfa_offset 4
 1050              		.cfi_offset 7, -4
 1051 05c6 83B0     		sub	sp, sp, #12
 1052              	.LCFI32:
 1053              		.cfi_def_cfa_offset 16
 1054 05c8 00AF     		add	r7, sp, #0
 1055              	.LCFI33:
 1056              		.cfi_def_cfa_register 7
 1057 05ca 7860     		str	r0, [r7, #4]
 793:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Check the arguments.
 794:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(SysCtrlPeripheralValid(ui32Peripheral));
 795:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 796:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Enable this peripheral in sleep mode.
 797:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32SCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) |=
 1058              		.loc 1 797 0
 1059 05cc 7B68     		ldr	r3, [r7, #4]
 1060 05ce 4FEA1323 		lsr	r3, r3, #8
 1061 05d2 03F00F02 		and	r2, r3, #15
 1062 05d6 40F20003 		movw	r3, #:lower16:g_pui32SCGCRegs
 1063 05da C0F20003 		movt	r3, #:upper16:g_pui32SCGCRegs
 1064 05de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1065 05e2 1A46     		mov	r2, r3
 1066 05e4 7B68     		ldr	r3, [r7, #4]
 1067 05e6 4FEA1323 		lsr	r3, r3, #8
 1068 05ea 03F00F01 		and	r1, r3, #15
 1069 05ee 40F20003 		movw	r3, #:lower16:g_pui32SCGCRegs
 1070 05f2 C0F20003 		movt	r3, #:upper16:g_pui32SCGCRegs
 1071 05f6 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1072 05fa 1968     		ldr	r1, [r3, #0]
 798:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         SYS_CTRL_PERIPH_MASKBIT(ui32Peripheral);
 1073              		.loc 1 798 0
 1074 05fc 7B68     		ldr	r3, [r7, #4]
 1075 05fe 03F00F03 		and	r3, r3, #15
 1076 0602 4FF00100 		mov	r0, #1
 1077 0606 00FA03F3 		lsl	r3, r0, r3
 797:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32SCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) |=
 1078              		.loc 1 797 0
 1079 060a 0B43     		orrs	r3, r3, r1
 1080 060c 1360     		str	r3, [r2, #0]
 799:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 1081              		.loc 1 799 0
 1082 060e 07F10C07 		add	r7, r7, #12
 1083 0612 BD46     		mov	sp, r7
 1084 0614 80BC     		pop	{r7}
 1085 0616 7047     		bx	lr
 1086              		.cfi_endproc
 1087              	.LFE12:
 1089              		.align	2
 1090              		.global	SysCtrlPeripheralSleepDisable
 1091              		.thumb
 1092              		.thumb_func
 1094              	SysCtrlPeripheralSleepDisable:
 1095              	.LFB13:
 800:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 801:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 802:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 803:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 804:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Disables a peripheral in sleep mode
 805:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 806:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32Peripheral is the peripheral to disable in sleep mode.
 807:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 808:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function causes a peripheral to stop operating when the processor goes
 809:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! into sleep mode.  Disabling peripherals while in sleep mode helps lower
 810:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! the current draw of the device. If enabled (by SysCtrlPeripheralEnable()),
 811:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! the peripheral automatically resume operation when the processor
 812:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! leaves sleep mode, maintaining the entire state before entry into sleep
 813:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! mode.
 814:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 815:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32Peripheral parameter must be one of the values:
 816:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT0 , \b SYS_CTRL_PERIPH_GPT1,
 817:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT2,  \b SYS_CTRL_PERIPH_GPT3,
 818:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_SSI0,  \b SYS_CTRL_PERIPH_SSI1,
 819:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_UART0, \b SYS_CTRL_PERIPH_UART1,
 820:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_I2C,   \b SYS_CTRL_PERIPH_PKA,
 821:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_AES,   \b SYS_CTRL_PERIPH_RFC.
 822:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 823:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 824:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 825:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 826:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 827:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPeripheralSleepDisable(uint32_t ui32Peripheral)
 828:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 1096              		.loc 1 828 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 8
 1099              		@ frame_needed = 1, uses_anonymous_args = 0
 1100              		@ link register save eliminated.
 1101 0618 80B4     		push	{r7}
 1102              	.LCFI34:
 1103              		.cfi_def_cfa_offset 4
 1104              		.cfi_offset 7, -4
 1105 061a 83B0     		sub	sp, sp, #12
 1106              	.LCFI35:
 1107              		.cfi_def_cfa_offset 16
 1108 061c 00AF     		add	r7, sp, #0
 1109              	.LCFI36:
 1110              		.cfi_def_cfa_register 7
 1111 061e 7860     		str	r0, [r7, #4]
 829:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Check the arguments.
 830:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(SysCtrlPeripheralValid(ui32Peripheral));
 831:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 832:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Disable this peripheral in sleep mode.
 833:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32SCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) &=
 1112              		.loc 1 833 0
 1113 0620 7B68     		ldr	r3, [r7, #4]
 1114 0622 4FEA1323 		lsr	r3, r3, #8
 1115 0626 03F00F02 		and	r2, r3, #15
 1116 062a 40F20003 		movw	r3, #:lower16:g_pui32SCGCRegs
 1117 062e C0F20003 		movt	r3, #:upper16:g_pui32SCGCRegs
 1118 0632 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1119 0636 1A46     		mov	r2, r3
 1120 0638 7B68     		ldr	r3, [r7, #4]
 1121 063a 4FEA1323 		lsr	r3, r3, #8
 1122 063e 03F00F01 		and	r1, r3, #15
 1123 0642 40F20003 		movw	r3, #:lower16:g_pui32SCGCRegs
 1124 0646 C0F20003 		movt	r3, #:upper16:g_pui32SCGCRegs
 1125 064a 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1126 064e 1968     		ldr	r1, [r3, #0]
 834:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ~SYS_CTRL_PERIPH_MASKBIT(ui32Peripheral);
 1127              		.loc 1 834 0
 1128 0650 7B68     		ldr	r3, [r7, #4]
 1129 0652 03F00F03 		and	r3, r3, #15
 1130 0656 4FF00100 		mov	r0, #1
 1131 065a 00FA03F3 		lsl	r3, r0, r3
 1132 065e 6FEA0303 		mvn	r3, r3
 833:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32SCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) &=
 1133              		.loc 1 833 0
 1134 0662 0B40     		ands	r3, r3, r1
 1135 0664 1360     		str	r3, [r2, #0]
 835:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 1136              		.loc 1 835 0
 1137 0666 07F10C07 		add	r7, r7, #12
 1138 066a BD46     		mov	sp, r7
 1139 066c 80BC     		pop	{r7}
 1140 066e 7047     		bx	lr
 1141              		.cfi_endproc
 1142              	.LFE13:
 1144              		.align	2
 1145              		.global	SysCtrlPeripheralDeepSleepEnable
 1146              		.thumb
 1147              		.thumb_func
 1149              	SysCtrlPeripheralDeepSleepEnable:
 1150              	.LFB14:
 836:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 837:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 838:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 839:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 840:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Enables a peripheral in deep-sleep mode
 841:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 842:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32Peripheral is the peripheral to enable in deep-sleep mode.
 843:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 844:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function allows a peripheral to continue operating when the processor
 845:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! goes into deep-sleep mode. Because the clocking configuration of the device
 846:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! can change, not all peripherals can safely continue operating while the
 847:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! processor is in sleep mode. Safe operation depends on the chosen power mode.
 848:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The caller must make sensible choices.
 849:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 850:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32Peripheral parameter must be one of the values:
 851:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT0 , \b SYS_CTRL_PERIPH_GPT1,
 852:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT2,  \b SYS_CTRL_PERIPH_GPT3,
 853:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_SSI0,  \b SYS_CTRL_PERIPH_SSI1,
 854:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_UART0, \b SYS_CTRL_PERIPH_UART1,
 855:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_I2C,   \b SYS_CTRL_PERIPH_PKA,
 856:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_AES,   \b SYS_CTRL_PERIPH_RFC.
 857:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 858:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 859:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 860:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 861:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 862:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPeripheralDeepSleepEnable(uint32_t ui32Peripheral)
 863:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 1151              		.loc 1 863 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 8
 1154              		@ frame_needed = 1, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
 1156 0670 80B4     		push	{r7}
 1157              	.LCFI37:
 1158              		.cfi_def_cfa_offset 4
 1159              		.cfi_offset 7, -4
 1160 0672 83B0     		sub	sp, sp, #12
 1161              	.LCFI38:
 1162              		.cfi_def_cfa_offset 16
 1163 0674 00AF     		add	r7, sp, #0
 1164              	.LCFI39:
 1165              		.cfi_def_cfa_register 7
 1166 0676 7860     		str	r0, [r7, #4]
 864:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Check the arguments.
 865:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(SysCtrlPeripheralValid(ui32Peripheral));
 866:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 867:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Enable this peripheral in deep-sleep mode.
 868:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32DCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) |=
 1167              		.loc 1 868 0
 1168 0678 7B68     		ldr	r3, [r7, #4]
 1169 067a 4FEA1323 		lsr	r3, r3, #8
 1170 067e 03F00F02 		and	r2, r3, #15
 1171 0682 40F20003 		movw	r3, #:lower16:g_pui32DCGCRegs
 1172 0686 C0F20003 		movt	r3, #:upper16:g_pui32DCGCRegs
 1173 068a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1174 068e 1A46     		mov	r2, r3
 1175 0690 7B68     		ldr	r3, [r7, #4]
 1176 0692 4FEA1323 		lsr	r3, r3, #8
 1177 0696 03F00F01 		and	r1, r3, #15
 1178 069a 40F20003 		movw	r3, #:lower16:g_pui32DCGCRegs
 1179 069e C0F20003 		movt	r3, #:upper16:g_pui32DCGCRegs
 1180 06a2 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1181 06a6 1968     		ldr	r1, [r3, #0]
 869:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         SYS_CTRL_PERIPH_MASKBIT(ui32Peripheral);
 1182              		.loc 1 869 0
 1183 06a8 7B68     		ldr	r3, [r7, #4]
 1184 06aa 03F00F03 		and	r3, r3, #15
 1185 06ae 4FF00100 		mov	r0, #1
 1186 06b2 00FA03F3 		lsl	r3, r0, r3
 868:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32DCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) |=
 1187              		.loc 1 868 0
 1188 06b6 0B43     		orrs	r3, r3, r1
 1189 06b8 1360     		str	r3, [r2, #0]
 870:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 1190              		.loc 1 870 0
 1191 06ba 07F10C07 		add	r7, r7, #12
 1192 06be BD46     		mov	sp, r7
 1193 06c0 80BC     		pop	{r7}
 1194 06c2 7047     		bx	lr
 1195              		.cfi_endproc
 1196              	.LFE14:
 1198              		.align	2
 1199              		.global	SysCtrlPeripheralDeepSleepDisable
 1200              		.thumb
 1201              		.thumb_func
 1203              	SysCtrlPeripheralDeepSleepDisable:
 1204              	.LFB15:
 871:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 872:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 873:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 874:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 875:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Disables a peripheral in deep-sleep mode
 876:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 877:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32Peripheral is the peripheral to disable in deep-sleep mode.
 878:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 879:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function causes a peripheral to stop operating when the processor goes
 880:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! into deep-sleep mode.  Disabling peripherals while in deep-sleep mode helps
 881:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! to lower the current draw of the device, and can keep peripherals that
 882:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! require a particular clock frequency from operating when the clock changes
 883:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! as a result of entering deep-sleep mode.  If enabled (by
 884:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! SysCtrlPeripheralEnable()), the peripheral automatically resumes operation
 885:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! when the processor leaves deep-sleep mode, maintaining its entire
 886:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! state from before entry into deep-sleep mode.
 887:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 888:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32Peripheral parameter must be one of the values:
 889:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT0 , \b SYS_CTRL_PERIPH_GPT1,
 890:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_GPT2,  \b SYS_CTRL_PERIPH_GPT3,
 891:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_SSI0,  \b SYS_CTRL_PERIPH_SSI1,
 892:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_UART0, \b SYS_CTRL_PERIPH_UART1,
 893:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_I2C,   \b SYS_CTRL_PERIPH_PKA,
 894:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PERIPH_AES,   \b SYS_CTRL_PERIPH_RFC.
 895:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 896:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 897:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 898:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 899:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 900:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPeripheralDeepSleepDisable(uint32_t ui32Peripheral)
 901:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 1205              		.loc 1 901 0
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 8
 1208              		@ frame_needed = 1, uses_anonymous_args = 0
 1209              		@ link register save eliminated.
 1210 06c4 80B4     		push	{r7}
 1211              	.LCFI40:
 1212              		.cfi_def_cfa_offset 4
 1213              		.cfi_offset 7, -4
 1214 06c6 83B0     		sub	sp, sp, #12
 1215              	.LCFI41:
 1216              		.cfi_def_cfa_offset 16
 1217 06c8 00AF     		add	r7, sp, #0
 1218              	.LCFI42:
 1219              		.cfi_def_cfa_register 7
 1220 06ca 7860     		str	r0, [r7, #4]
 902:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Check the arguments.
 903:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(SysCtrlPeripheralValid(ui32Peripheral));
 904:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 905:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Disable this peripheral in deep-sleep mode.
 906:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32DCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) &=
 1221              		.loc 1 906 0
 1222 06cc 7B68     		ldr	r3, [r7, #4]
 1223 06ce 4FEA1323 		lsr	r3, r3, #8
 1224 06d2 03F00F02 		and	r2, r3, #15
 1225 06d6 40F20003 		movw	r3, #:lower16:g_pui32DCGCRegs
 1226 06da C0F20003 		movt	r3, #:upper16:g_pui32DCGCRegs
 1227 06de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1228 06e2 1A46     		mov	r2, r3
 1229 06e4 7B68     		ldr	r3, [r7, #4]
 1230 06e6 4FEA1323 		lsr	r3, r3, #8
 1231 06ea 03F00F01 		and	r1, r3, #15
 1232 06ee 40F20003 		movw	r3, #:lower16:g_pui32DCGCRegs
 1233 06f2 C0F20003 		movt	r3, #:upper16:g_pui32DCGCRegs
 1234 06f6 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1235 06fa 1968     		ldr	r1, [r3, #0]
 907:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****         ~SYS_CTRL_PERIPH_MASKBIT(ui32Peripheral);
 1236              		.loc 1 907 0
 1237 06fc 7B68     		ldr	r3, [r7, #4]
 1238 06fe 03F00F03 		and	r3, r3, #15
 1239 0702 4FF00100 		mov	r0, #1
 1240 0706 00FA03F3 		lsl	r3, r0, r3
 1241 070a 6FEA0303 		mvn	r3, r3
 906:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(g_pui32DCGCRegs[SYS_CTRL_PERIPH_INDEX(ui32Peripheral)]) &=
 1242              		.loc 1 906 0
 1243 070e 0B40     		ands	r3, r3, r1
 1244 0710 1360     		str	r3, [r2, #0]
 908:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 1245              		.loc 1 908 0
 1246 0712 07F10C07 		add	r7, r7, #12
 1247 0716 BD46     		mov	sp, r7
 1248 0718 80BC     		pop	{r7}
 1249 071a 7047     		bx	lr
 1250              		.cfi_endproc
 1251              	.LFE15:
 1253              		.align	2
 1254              		.global	SysCtrlPowerModeSet
 1255              		.thumb
 1256              		.thumb_func
 1258              	SysCtrlPowerModeSet:
 1259              	.LFB16:
 909:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 910:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 911:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 912:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 913:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Set Power Mode
 914:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 915:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \param ui32PowerMode is the power mode to be entered.
 916:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 917:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function selects the power mode to enter when CM3 enters Deep Sleep
 918:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! mode.
 919:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Power mode PM0 (\b SYS_CTRL_PM_NOACTION) is entered when the CPU
 920:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! wakes up due to an interrupt.
 921:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Note only transitions to and from PM0 are legal  (that is, PM1 to PM2
 922:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! cannot happen).
 923:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 924:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! The \e ui32PowerMode argument must be only one of the following values:
 925:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PM_NOACTION, \b SYS_CTRL_PM_1, \b SYS_CTRL_PM_2 or
 926:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PM_3.
 927:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 928:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \sa SysCtrlDeepSleep().
 929:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 930:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 931:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 932:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 933:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 934:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPowerModeSet(uint32_t ui32PowerMode)
 935:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 1260              		.loc 1 935 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 8
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264              		@ link register save eliminated.
 1265 071c 80B4     		push	{r7}
 1266              	.LCFI43:
 1267              		.cfi_def_cfa_offset 4
 1268              		.cfi_offset 7, -4
 1269 071e 83B0     		sub	sp, sp, #12
 1270              	.LCFI44:
 1271              		.cfi_def_cfa_offset 16
 1272 0720 00AF     		add	r7, sp, #0
 1273              	.LCFI45:
 1274              		.cfi_def_cfa_register 7
 1275 0722 7860     		str	r0, [r7, #4]
 936:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Check the arguments.
 937:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ASSERT(ui32PowerMode == SYS_CTRL_PM_NOACTION ||
 938:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            ui32PowerMode == SYS_CTRL_PM_1        ||
 939:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            ui32PowerMode == SYS_CTRL_PM_2        ||
 940:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****            ui32PowerMode == SYS_CTRL_PM_3);
 941:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 942:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     // Set power mode
 943:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(SYS_CTRL_PMCTL) = ui32PowerMode;
 1276              		.loc 1 943 0
 1277 0724 42F25803 		movw	r3, #8280
 1278 0728 C4F20D03 		movt	r3, 16397
 1279 072c 7A68     		ldr	r2, [r7, #4]
 1280 072e 1A60     		str	r2, [r3, #0]
 944:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 1281              		.loc 1 944 0
 1282 0730 07F10C07 		add	r7, r7, #12
 1283 0734 BD46     		mov	sp, r7
 1284 0736 80BC     		pop	{r7}
 1285 0738 7047     		bx	lr
 1286              		.cfi_endproc
 1287              	.LFE16:
 1289 073a 00BF     		.align	2
 1290              		.global	SysCtrlPowerModeGet
 1291              		.thumb
 1292              		.thumb_func
 1294              	SysCtrlPowerModeGet:
 1295              	.LFB17:
 945:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 946:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 947:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 948:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 949:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Get Power Mode
 950:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 951:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function returns the current Power Mode setting.
 952:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 953:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return Power mode, i.e. one of the following values:
 954:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PM_NOACTION, \b SYS_CTRL_PM_1, \b SYS_CTRL_PM_2 or
 955:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \b SYS_CTRL_PM_3.
 956:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 957:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 958:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** uint32_t
 959:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlPowerModeGet(void)
 960:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 1296              		.loc 1 960 0
 1297              		.cfi_startproc
 1298              		@ args = 0, pretend = 0, frame = 8
 1299              		@ frame_needed = 1, uses_anonymous_args = 0
 1300              		@ link register save eliminated.
 1301 073c 80B4     		push	{r7}
 1302              	.LCFI46:
 1303              		.cfi_def_cfa_offset 4
 1304              		.cfi_offset 7, -4
 1305 073e 83B0     		sub	sp, sp, #12
 1306              	.LCFI47:
 1307              		.cfi_def_cfa_offset 16
 1308 0740 00AF     		add	r7, sp, #0
 1309              	.LCFI48:
 1310              		.cfi_def_cfa_register 7
 961:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32PowerMode;
 962:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 963:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32PowerMode = HWREG(SYS_CTRL_PMCTL);
 1311              		.loc 1 963 0
 1312 0742 42F25803 		movw	r3, #8280
 1313 0746 C4F20D03 		movt	r3, 16397
 1314 074a 1B68     		ldr	r3, [r3, #0]
 1315 074c 7B60     		str	r3, [r7, #4]
 964:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32PowerMode &= SYS_CTRL_PMCTL_PM_M;
 1316              		.loc 1 964 0
 1317 074e 7B68     		ldr	r3, [r7, #4]
 1318 0750 03F00303 		and	r3, r3, #3
 1319 0754 7B60     		str	r3, [r7, #4]
 965:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 966:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     return(ui32PowerMode);
 1320              		.loc 1 966 0
 1321 0756 7B68     		ldr	r3, [r7, #4]
 967:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 1322              		.loc 1 967 0
 1323 0758 1846     		mov	r0, r3
 1324 075a 07F10C07 		add	r7, r7, #12
 1325 075e BD46     		mov	sp, r7
 1326 0760 80BC     		pop	{r7}
 1327 0762 7047     		bx	lr
 1328              		.cfi_endproc
 1329              	.LFE17:
 1331              		.align	2
 1332              		.global	SysCtrlClockLossDetectEnable
 1333              		.thumb
 1334              		.thumb_func
 1336              	SysCtrlClockLossDetectEnable:
 1337              	.LFB18:
 968:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 969:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 970:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 971:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 972:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 973:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! Enable Clock Loss Detection
 974:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 975:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! This function enables clock loss detection.
 976:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //!
 977:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //! \return None
 978:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //
 979:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** //*****************************************************************************
 980:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** void
 981:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** SysCtrlClockLossDetectEnable(void)
 982:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** {
 1338              		.loc 1 982 0
 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 8
 1341              		@ frame_needed = 1, uses_anonymous_args = 0
 1342              		@ link register save eliminated.
 1343 0764 80B4     		push	{r7}
 1344              	.LCFI49:
 1345              		.cfi_def_cfa_offset 4
 1346              		.cfi_offset 7, -4
 1347 0766 83B0     		sub	sp, sp, #12
 1348              	.LCFI50:
 1349              		.cfi_def_cfa_offset 16
 1350 0768 00AF     		add	r7, sp, #0
 1351              	.LCFI51:
 1352              		.cfi_def_cfa_register 7
 983:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     uint32_t ui32CLD;
 984:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** 
 985:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32CLD = HWREG(SYS_CTRL_CLD);
 1353              		.loc 1 985 0
 1354 076a 4FF40253 		mov	r3, #8320
 1355 076e C4F20D03 		movt	r3, 16397
 1356 0772 1B68     		ldr	r3, [r3, #0]
 1357 0774 7B60     		str	r3, [r7, #4]
 986:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     ui32CLD |= SYS_CTRL_CLD_EN;
 1358              		.loc 1 986 0
 1359 0776 7B68     		ldr	r3, [r7, #4]
 1360 0778 43F00103 		orr	r3, r3, #1
 1361 077c 7B60     		str	r3, [r7, #4]
 987:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c ****     HWREG(SYS_CTRL_CLD) = ui32CLD;
 1362              		.loc 1 987 0
 1363 077e 4FF40253 		mov	r3, #8320
 1364 0782 C4F20D03 		movt	r3, 16397
 1365 0786 7A68     		ldr	r2, [r7, #4]
 1366 0788 1A60     		str	r2, [r3, #0]
 988:bsp/boards/OpenMote-CC2538/source/sys_ctrl.c **** }
 1367              		.loc 1 988 0
 1368 078a 07F10C07 		add	r7, r7, #12
 1369 078e BD46     		mov	sp, r7
 1370 0790 80BC     		pop	{r7}
 1371 0792 7047     		bx	lr
 1372              		.cfi_endproc
 1373              	.LFE18:
 1375              	.Letext0:
 1376              		.file 2 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
DEFINED SYMBOLS
                            *ABS*:00000000 sys_ctrl.c
     /tmp/ccGcjvml.s:19     .rodata:00000000 $d
     /tmp/ccGcjvml.s:22     .rodata:00000000 g_pui32RCGCRegs
     /tmp/ccGcjvml.s:32     .rodata:00000018 g_pui32SCGCRegs
     /tmp/ccGcjvml.s:42     .rodata:00000030 g_pui32DCGCRegs
     /tmp/ccGcjvml.s:52     .rodata:00000048 g_pui32SRRegs
     /tmp/ccGcjvml.s:61     .rodata:0000005c g_pui32DieCfgMask
     /tmp/ccGcjvml.s:69     .text:00000000 $t
     /tmp/ccGcjvml.s:74     .text:00000000 SysCtrlClockSet
     /tmp/ccGcjvml.s:502    .text:000002a0 SysCtrlDelay
     /tmp/ccGcjvml.s:213    .text:000000e4 SysCtrlClockGet
     /tmp/ccGcjvml.s:250    .text:00000110 $d
     /tmp/ccGcjvml.s:260    .text:00000130 $t
     /tmp/ccGcjvml.s:331    .text:000001a0 SysCtrlIOClockSet
     /tmp/ccGcjvml.s:382    .text:000001e0 SysCtrlIOClockGet
     /tmp/ccGcjvml.s:421    .text:00000210 $d
     /tmp/ccGcjvml.s:431    .text:00000230 $t
     /tmp/ccGcjvml.s:525    .text:000002a8 SysCtrlReset
     /tmp/ccGcjvml.s:555    .text:000002bc SysCtrlSleep
     /tmp/ccGcjvml.s:581    .text:000002c8 SysCtrlDeepSleep
     /tmp/ccGcjvml.s:749    .text:000003d8 SysCtrlPeripheralPresent
     /tmp/ccGcjvml.s:839    .text:00000468 SysCtrlPeripheralReset
     /tmp/ccGcjvml.s:931    .text:00000518 SysCtrlPeripheralEnable
     /tmp/ccGcjvml.s:985    .text:0000056c SysCtrlPeripheralDisable
     /tmp/ccGcjvml.s:1040   .text:000005c4 SysCtrlPeripheralSleepEnable
     /tmp/ccGcjvml.s:1094   .text:00000618 SysCtrlPeripheralSleepDisable
     /tmp/ccGcjvml.s:1149   .text:00000670 SysCtrlPeripheralDeepSleepEnable
     /tmp/ccGcjvml.s:1203   .text:000006c4 SysCtrlPeripheralDeepSleepDisable
     /tmp/ccGcjvml.s:1258   .text:0000071c SysCtrlPowerModeSet
     /tmp/ccGcjvml.s:1294   .text:0000073c SysCtrlPowerModeGet
     /tmp/ccGcjvml.s:1336   .text:00000764 SysCtrlClockLossDetectEnable
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e96eee74da26538b12ac9582e3798382
                           .group:00000000 wm4.hw_flash_ctrl.h.39.9e1b51558015e13f8d9f8700e513c4a2
                           .group:00000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:00000000 wm4.hw_nvic.h.42.f3b9efa2537e728866c85de74b3e5811
                           .group:00000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.debug.h.41.b891e613993738d067c45a5ff528d11a
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.sys_ctrl.h.41.c6bbd4dace326d685c1afa45bc1ba1e2

UNDEFINED SYMBOLS
CPUwfi
