   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ccm.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	CCMAuthEncryptStart
  20              		.thumb
  21              		.thumb_func
  23              	CCMAuthEncryptStart:
  24              	.LFB0:
  25              		.file 1 "bsp/boards/OpenMote-CC2538/source/ccm.c"
   1:bsp/boards/OpenMote-CC2538/source/ccm.c **** /******************************************************************************
   2:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  Filename:       ccm.c
   3:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  Revised:        $Date: 2013-03-22 16:13:31 +0100 (Fri, 22 Mar 2013) $
   4:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  Revision:       $Revision: 9513 $
   5:bsp/boards/OpenMote-CC2538/source/ccm.c **** *
   6:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  Description:    Support for Hardware CCM encryption and authentication.
   7:bsp/boards/OpenMote-CC2538/source/ccm.c **** *
   8:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:bsp/boards/OpenMote-CC2538/source/ccm.c **** *
  10:bsp/boards/OpenMote-CC2538/source/ccm.c **** *
  11:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  Redistribution and use in source and binary forms, with or without
  12:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  modification, are permitted provided that the following conditions
  13:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  are met:
  14:bsp/boards/OpenMote-CC2538/source/ccm.c **** *
  15:bsp/boards/OpenMote-CC2538/source/ccm.c **** *    Redistributions of source code must retain the above copyright
  16:bsp/boards/OpenMote-CC2538/source/ccm.c **** *    notice, this list of conditions and the following disclaimer.
  17:bsp/boards/OpenMote-CC2538/source/ccm.c **** *
  18:bsp/boards/OpenMote-CC2538/source/ccm.c **** *    Redistributions in binary form must reproduce the above copyright
  19:bsp/boards/OpenMote-CC2538/source/ccm.c **** *    notice, this list of conditions and the following disclaimer in the
  20:bsp/boards/OpenMote-CC2538/source/ccm.c **** *    documentation and/or other materials provided with the distribution.
  21:bsp/boards/OpenMote-CC2538/source/ccm.c **** *
  22:bsp/boards/OpenMote-CC2538/source/ccm.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:bsp/boards/OpenMote-CC2538/source/ccm.c **** *    its contributors may be used to endorse or promote products derived
  24:bsp/boards/OpenMote-CC2538/source/ccm.c **** *    from this software without specific prior written permission.
  25:bsp/boards/OpenMote-CC2538/source/ccm.c **** *
  26:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:bsp/boards/OpenMote-CC2538/source/ccm.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:bsp/boards/OpenMote-CC2538/source/ccm.c **** *
  38:bsp/boards/OpenMote-CC2538/source/ccm.c **** ******************************************************************************/
  39:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
  40:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
  41:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
  42:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \addtogroup ccm_api
  43:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! @{
  44:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
  45:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
  46:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
  47:bsp/boards/OpenMote-CC2538/source/ccm.c **** #include "aes.h"
  48:bsp/boards/OpenMote-CC2538/source/ccm.c **** #include "ccm.h"
  49:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
  50:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
  51:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
  52:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
  53:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! CCMAuthEncryptStart starts the CCM operation
  54:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
  55:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param bEncrypt if set to 'true' then run encryption and set to 'false' for
  56:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! authentication only.
  57:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param ui8Mval is the length of authentication field in octets [0,2,4,6,8,10,
  58:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! 12, 14 or 16].
  59:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  pui8N is the pointer to 13-byte or 12-byte Nonce.
  60:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  pui8M  is the pointer to octet string 'm'/input message.
  61:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  ui16LenM is the length of pui8M[] in octets.
  62:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  pui8A is the pointer to octet string 'a'.
  63:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  ui16LenA is the Length of pui8A[] in octets.
  64:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  ui8KeyLocation is the location where the Key is stored in Key RAM.
  65:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  pui8Cstate is the pointer to output buffer.
  66:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  ui8CCMLVal is the ccm L Value to be used.
  67:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  ui8IntEnable if set to 'true' to enable interrupts or 'false' to
  68:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! disable interrupts.  Should be 'false' if \e bEncrypt is set to 'false'.
  69:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
  70:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
  71:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! The function will place in \e pui8Cstate the first ui8Mval bytes
  72:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! containing the Authentication Tag.
  73:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
  74:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! The \e ui8KeyLocation parameter is an enumerated type which specifies
  75:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! the Key Ram location in which the key is stored.
  76:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! This parameter can have any of the following values:
  77:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
  78:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_0
  79:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_1
  80:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_2,
  81:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_3,
  82:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_4,
  83:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_5,
  84:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_6,
  85:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_7
  86:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
  87:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \return  AES_SUCCESS if successful.
  88:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
  89:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
  90:bsp/boards/OpenMote-CC2538/source/ccm.c **** uint8_t CCMAuthEncryptStart(bool bEncrypt,
  91:bsp/boards/OpenMote-CC2538/source/ccm.c ****                             uint8_t ui8Mval,
  92:bsp/boards/OpenMote-CC2538/source/ccm.c ****                             uint8_t *pui8N,
  93:bsp/boards/OpenMote-CC2538/source/ccm.c ****                             uint8_t *pui8M,
  94:bsp/boards/OpenMote-CC2538/source/ccm.c ****                             uint16_t ui16LenM,
  95:bsp/boards/OpenMote-CC2538/source/ccm.c ****                             uint8_t *pui8A,
  96:bsp/boards/OpenMote-CC2538/source/ccm.c ****                             uint16_t ui16LenA,
  97:bsp/boards/OpenMote-CC2538/source/ccm.c ****                             uint8_t ui8KeyLocation,
  98:bsp/boards/OpenMote-CC2538/source/ccm.c ****                             uint8_t *pui8Cstate,
  99:bsp/boards/OpenMote-CC2538/source/ccm.c ****                             uint8_t ui8CCMLVal,
 100:bsp/boards/OpenMote-CC2538/source/ccm.c ****                             uint8_t ui8IntEnable)
 101:bsp/boards/OpenMote-CC2538/source/ccm.c **** {
  26              		.loc 1 101 0
  27              		.cfi_startproc
  28              		@ args = 28, pretend = 0, frame = 40
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 8AB0     		sub	sp, sp, #40
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 48
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 BA60     		str	r2, [r7, #8]
  42 0008 7B60     		str	r3, [r7, #4]
  43 000a 0346     		mov	r3, r0
  44 000c FB73     		strb	r3, [r7, #15]
  45 000e 0B46     		mov	r3, r1
  46 0010 BB73     		strb	r3, [r7, #14]
 102:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint8_t  ui8A0[16];
 103:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint32_t ui32CtrlVal;
 104:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint8_t  ui8I;
 105:bsp/boards/OpenMote-CC2538/source/ccm.c ****     g_ui8CurrentAESOp = AES_CCM;
  47              		.loc 1 105 0
  48 0012 40F20003 		movw	r3, #:lower16:g_ui8CurrentAESOp
  49 0016 C0F20003 		movt	r3, #:upper16:g_ui8CurrentAESOp
  50 001a 4FF00302 		mov	r2, #3
  51 001e 1A70     		strb	r2, [r3, #0]
 106:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 107:bsp/boards/OpenMote-CC2538/source/ccm.c ****     IntDisable(INT_AES);
  52              		.loc 1 107 0
  53 0020 4FF09F00 		mov	r0, #159
  54 0024 FFF7FEFF 		bl	IntDisable
 108:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 109:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // workaround for AES registers not retained after PM2
 110:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_CFG) = AES_CTRL_INT_CFG_LEVEL;
  55              		.loc 1 110 0
  56 0028 4BF28073 		movw	r3, #46976
  57 002c C4F20803 		movt	r3, 16392
  58 0030 4FF00102 		mov	r2, #1
  59 0034 1A60     		str	r2, [r3, #0]
 111:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_EN) = (AES_CTRL_INT_EN_RESULT_AV |
  60              		.loc 1 111 0
  61 0036 4BF28473 		movw	r3, #46980
  62 003a C4F20803 		movt	r3, 16392
  63 003e 4FF00302 		mov	r2, #3
  64 0042 1A60     		str	r2, [r3, #0]
 112:bsp/boards/OpenMote-CC2538/source/ccm.c ****                               AES_CTRL_INT_EN_DMA_IN_DONE);
 113:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 114:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_ALG_SEL) = AES_CTRL_ALG_SEL_AES;
  65              		.loc 1 114 0
  66 0044 4FF43743 		mov	r3, #46848
  67 0048 C4F20803 		movt	r3, 16392
  68 004c 4FF00202 		mov	r2, #2
  69 0050 1A60     		str	r2, [r3, #0]
 115:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_CLR) |= (AES_CTRL_INT_CLR_DMA_IN_DONE |
  70              		.loc 1 115 0
  71 0052 4BF28873 		movw	r3, #46984
  72 0056 C4F20803 		movt	r3, 16392
  73 005a 4BF28872 		movw	r2, #46984
  74 005e C4F20802 		movt	r2, 16392
  75 0062 1268     		ldr	r2, [r2, #0]
  76 0064 42F00302 		orr	r2, r2, #3
  77 0068 1A60     		str	r2, [r3, #0]
 116:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                 AES_CTRL_INT_CLR_RESULT_AV);
 117:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 118:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_KEY_STORE_READ_AREA) = (uint32_t)ui8KeyLocation;
  78              		.loc 1 118 0
  79 006a 4BF20C43 		movw	r3, #46092
  80 006e C4F20803 		movt	r3, 16392
  81 0072 97F83C20 		ldrb	r2, [r7, #60]	@ zero_extendqisi2
  82 0076 1A60     		str	r2, [r3, #0]
  83              	.L2:
 119:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 120:bsp/boards/OpenMote-CC2538/source/ccm.c ****     //wait until key is loaded to the AES module
 121:bsp/boards/OpenMote-CC2538/source/ccm.c ****     do
 122:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 123:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ASM_NOP;
  84              		.loc 1 123 0 discriminator 1
  85              	@ 123 "bsp/boards/OpenMote-CC2538/source/ccm.c" 1
  86 0078 00BF     		NOP
  87              	@ 0 "" 2
 124:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 125:bsp/boards/OpenMote-CC2538/source/ccm.c ****     while((HWREG(AES_KEY_STORE_READ_AREA) & AES_KEY_STORE_READ_AREA_BUSY));
  88              		.loc 1 125 0 discriminator 1
  89              		.thumb
  90 007a 4BF20C43 		movw	r3, #46092
  91 007e C4F20803 		movt	r3, 16392
  92 0082 1B68     		ldr	r3, [r3, #0]
  93 0084 002B     		cmp	r3, #0
  94 0086 F7DB     		blt	.L2
 126:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 127:bsp/boards/OpenMote-CC2538/source/ccm.c ****     //check for Key Store read error
 128:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if((HWREG(AES_CTRL_INT_STAT)& AES_CTRL_INT_STAT_KEY_ST_RD_ERR))
  95              		.loc 1 128 0
  96 0088 4BF29073 		movw	r3, #46992
  97 008c C4F20803 		movt	r3, 16392
  98 0090 1B68     		ldr	r3, [r3, #0]
  99 0092 03F00053 		and	r3, r3, #536870912
 100 0096 002B     		cmp	r3, #0
 101 0098 0ED0     		beq	.L3
 129:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 130:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // clear the Keystore Read error bit
 131:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_CTRL_INT_CLR) |= AES_CTRL_INT_CLR_KEY_ST_RD_ERR;
 102              		.loc 1 131 0
 103 009a 4BF28873 		movw	r3, #46984
 104 009e C4F20803 		movt	r3, 16392
 105 00a2 4BF28872 		movw	r2, #46984
 106 00a6 C4F20802 		movt	r2, 16392
 107 00aa 1268     		ldr	r2, [r2, #0]
 108 00ac 42F00052 		orr	r2, r2, #536870912
 109 00b0 1A60     		str	r2, [r3, #0]
 132:bsp/boards/OpenMote-CC2538/source/ccm.c ****         return (AES_KEYSTORE_READ_ERROR);
 110              		.loc 1 132 0
 111 00b2 4FF00103 		mov	r3, #1
 112 00b6 09E1     		b	.L14
 113              	.L3:
 133:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 134:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 135:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // Prepare the initialization vector
 136:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui8A0[0] = ui8CCMLVal - 1;  // Lval
 114              		.loc 1 136 0
 115 00b8 97F84430 		ldrb	r3, [r7, #68]
 116 00bc 03F1FF33 		add	r3, r3, #-1
 117 00c0 DBB2     		uxtb	r3, r3
 118 00c2 3B74     		strb	r3, [r7, #16]
 137:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 138:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < 13; ui8I++)
 119              		.loc 1 138 0
 120 00c4 4FF00003 		mov	r3, #0
 121 00c8 87F82330 		strb	r3, [r7, #35]
 122 00cc 13E0     		b	.L5
 123              	.L6:
 139:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 140:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ui8A0[ui8I + 1] = pui8N[ui8I];
 124              		.loc 1 140 0 discriminator 2
 125 00ce 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 126 00d2 03F10103 		add	r3, r3, #1
 127 00d6 97F82320 		ldrb	r2, [r7, #35]	@ zero_extendqisi2
 128 00da B968     		ldr	r1, [r7, #8]
 129 00dc 8A18     		adds	r2, r1, r2
 130 00de 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 131 00e0 07F12801 		add	r1, r7, #40
 132 00e4 CB18     		adds	r3, r1, r3
 133 00e6 03F8182C 		strb	r2, [r3, #-24]
 138:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < 13; ui8I++)
 134              		.loc 1 138 0 discriminator 2
 135 00ea 97F82330 		ldrb	r3, [r7, #35]
 136 00ee 03F10103 		add	r3, r3, #1
 137 00f2 87F82330 		strb	r3, [r7, #35]
 138              	.L5:
 138:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < 13; ui8I++)
 139              		.loc 1 138 0 is_stmt 0 discriminator 1
 140 00f6 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 141 00fa 0C2B     		cmp	r3, #12
 142 00fc E7D9     		bls	.L6
 141:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 142:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if(3 == ui8CCMLVal)
 143              		.loc 1 142 0 is_stmt 1
 144 00fe 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 145 0102 032B     		cmp	r3, #3
 146 0104 02D1     		bne	.L7
 143:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 144:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ui8A0[13] = 0;
 147              		.loc 1 144 0
 148 0106 4FF00003 		mov	r3, #0
 149 010a 7B77     		strb	r3, [r7, #29]
 150              	.L7:
 145:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 146:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui8A0[14] = 0;  // initialize counter to 0
 151              		.loc 1 146 0
 152 010c 4FF00003 		mov	r3, #0
 153 0110 BB77     		strb	r3, [r7, #30]
 147:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui8A0[15] = 0;  // initialize counter to 0
 154              		.loc 1 147 0
 155 0112 4FF00003 		mov	r3, #0
 156 0116 FB77     		strb	r3, [r7, #31]
 148:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 149:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // write initialization vector
 150:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_IV_0) = ((uint32_t  *)&ui8A0)[0];
 157              		.loc 1 150 0
 158 0118 4BF24053 		movw	r3, #46400
 159 011c C4F20803 		movt	r3, 16392
 160 0120 07F11002 		add	r2, r7, #16
 161 0124 1268     		ldr	r2, [r2, #0]
 162 0126 1A60     		str	r2, [r3, #0]
 151:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_IV_1) = ((uint32_t  *)&ui8A0)[1];
 163              		.loc 1 151 0
 164 0128 4BF24453 		movw	r3, #46404
 165 012c C4F20803 		movt	r3, 16392
 166 0130 7A69     		ldr	r2, [r7, #20]
 167 0132 1A60     		str	r2, [r3, #0]
 152:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_IV_2) = ((uint32_t  *)&ui8A0)[2];
 168              		.loc 1 152 0
 169 0134 4BF24853 		movw	r3, #46408
 170 0138 C4F20803 		movt	r3, 16392
 171 013c BA69     		ldr	r2, [r7, #24]
 172 013e 1A60     		str	r2, [r3, #0]
 153:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_IV_3) = ((uint32_t  *)&ui8A0)[3];
 173              		.loc 1 153 0
 174 0140 4BF24C53 		movw	r3, #46412
 175 0144 C4F20803 		movt	r3, 16392
 176 0148 FA69     		ldr	r2, [r7, #28]
 177 014a 1A60     		str	r2, [r3, #0]
 154:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 155:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // configure AES engine
 156:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal = ((ui8CCMLVal - 1) <<
 178              		.loc 1 156 0
 179 014c 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 180 0150 03F1FF33 		add	r3, r3, #-1
 181 0154 4FEAC343 		lsl	r3, r3, #19
 182 0158 7B62     		str	r3, [r7, #36]
 157:bsp/boards/OpenMote-CC2538/source/ccm.c ****                    AES_AES_CTRL_CCM_L_S);            // CCM_L
 158:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 159:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if(ui8Mval >= 2)
 183              		.loc 1 159 0
 184 015a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 185 015c 012B     		cmp	r3, #1
 186 015e 09D9     		bls	.L9
 160:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 161:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ui32CtrlVal |= (((ui8Mval - 2) >> 1) <<
 187              		.loc 1 161 0
 188 0160 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 189 0162 A3F10203 		sub	r3, r3, #2
 190 0166 4FEA6303 		asr	r3, r3, #1
 191 016a 4FEA8353 		lsl	r3, r3, #22
 192 016e 7A6A     		ldr	r2, [r7, #36]
 193 0170 1343     		orrs	r3, r3, r2
 194 0172 7B62     		str	r3, [r7, #36]
 195              	.L9:
 162:bsp/boards/OpenMote-CC2538/source/ccm.c ****                         AES_AES_CTRL_CCM_M_S);           // CCM_M
 163:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 164:bsp/boards/OpenMote-CC2538/source/ccm.c ****     else
 165:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 166:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ui32CtrlVal |= (0 <<
 167:bsp/boards/OpenMote-CC2538/source/ccm.c ****                         AES_AES_CTRL_CCM_M_S);           // CCM_M
 168:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 169:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= (AES_AES_CTRL_CCM);               // CCM
 196              		.loc 1 169 0
 197 0174 7B6A     		ldr	r3, [r7, #36]
 198 0176 43F48023 		orr	r3, r3, #262144
 199 017a 7B62     		str	r3, [r7, #36]
 170:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= (1 << AES_AES_CTRL_key_size_S);   // key = 128
 200              		.loc 1 170 0
 201 017c 7B6A     		ldr	r3, [r7, #36]
 202 017e 43F00803 		orr	r3, r3, #8
 203 0182 7B62     		str	r3, [r7, #36]
 171:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= (1 << AES_AES_CTRL_input_ready);  // encryption
 204              		.loc 1 171 0
 205 0184 7B6A     		ldr	r3, [r7, #36]
 206 0186 43F00403 		orr	r3, r3, #4
 207 018a 7B62     		str	r3, [r7, #36]
 172:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= AES_AES_CTRL_CTR;                 // CTR
 208              		.loc 1 172 0
 209 018c 7B6A     		ldr	r3, [r7, #36]
 210 018e 43F04003 		orr	r3, r3, #64
 211 0192 7B62     		str	r3, [r7, #36]
 173:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= AES_AES_CTRL_save_context;        // save context
 212              		.loc 1 173 0
 213 0194 7B6A     		ldr	r3, [r7, #36]
 214 0196 43F00053 		orr	r3, r3, #536870912
 215 019a 7B62     		str	r3, [r7, #36]
 174:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= (0x3 << AES_AES_CTRL_ctr_width_S);// CTR width 128
 216              		.loc 1 174 0
 217 019c 7B6A     		ldr	r3, [r7, #36]
 218 019e 43F4C073 		orr	r3, r3, #384
 219 01a2 7B62     		str	r3, [r7, #36]
 175:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // program AES-CCM-128 encryption
 176:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_CTRL) = ui32CtrlVal;
 220              		.loc 1 176 0
 221 01a4 4BF25053 		movw	r3, #46416
 222 01a8 C4F20803 		movt	r3, 16392
 223 01ac 7A6A     		ldr	r2, [r7, #36]
 224 01ae 1A60     		str	r2, [r3, #0]
 177:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 178:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // write the length of the crypto block (lo)
 179:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_C_LENGTH_0) = (uint16_t)(ui16LenM) ;
 225              		.loc 1 179 0
 226 01b0 4BF25453 		movw	r3, #46420
 227 01b4 C4F20803 		movt	r3, 16392
 228 01b8 3A8E     		ldrh	r2, [r7, #48]
 229 01ba 1A60     		str	r2, [r3, #0]
 180:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // write the length of the crypto block (hi)
 181:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_C_LENGTH_1)  =  0;
 230              		.loc 1 181 0
 231 01bc 4BF25853 		movw	r3, #46424
 232 01c0 C4F20803 		movt	r3, 16392
 233 01c4 4FF00002 		mov	r2, #0
 234 01c8 1A60     		str	r2, [r3, #0]
 182:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 183:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // write the length of the AAD data block may be non-block size aligned
 184:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_AUTH_LENGTH) = ui16LenA;
 235              		.loc 1 184 0
 236 01ca 4BF25C53 		movw	r3, #46428
 237 01ce C4F20803 		movt	r3, 16392
 238 01d2 3A8F     		ldrh	r2, [r7, #56]
 239 01d4 1A60     		str	r2, [r3, #0]
 185:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 186:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if(ui16LenA != 0)
 240              		.loc 1 186 0
 241 01d6 3B8F     		ldrh	r3, [r7, #56]
 242 01d8 002B     		cmp	r3, #0
 243 01da 32D0     		beq	.L10
 187:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 188:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // configure DMAC to fetch the AAD data
 189:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // enable DMA channel 0
 190:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_CTRL)     = AES_DMAC_CH0_CTRL_EN;
 244              		.loc 1 190 0
 245 01dc 4FF43043 		mov	r3, #45056
 246 01e0 C4F20803 		movt	r3, 16392
 247 01e4 4FF00102 		mov	r2, #1
 248 01e8 1A60     		str	r2, [r3, #0]
 191:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // base address of the AAD input data in ext. memory
 192:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_EXTADDR)  = (uint32_t)pui8A;
 249              		.loc 1 192 0
 250 01ea 4BF20403 		movw	r3, #45060
 251 01ee C4F20803 		movt	r3, 16392
 252 01f2 7A6B     		ldr	r2, [r7, #52]
 253 01f4 1A60     		str	r2, [r3, #0]
 193:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // AAD data length in bytes, equal to the AAD length len
 194:bsp/boards/OpenMote-CC2538/source/ccm.c ****         //({aad data}) (may be non-block size aligned)
 195:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 196:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_DMALENGTH) = ui16LenA;
 254              		.loc 1 196 0
 255 01f6 4BF20C03 		movw	r3, #45068
 256 01fa C4F20803 		movt	r3, 16392
 257 01fe 3A8F     		ldrh	r2, [r7, #56]
 258 0200 1A60     		str	r2, [r3, #0]
 259              	.L11:
 197:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 198:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // wait for completion of the AAD data transfer, DMA_IN_DONE
 199:bsp/boards/OpenMote-CC2538/source/ccm.c ****         do
 200:bsp/boards/OpenMote-CC2538/source/ccm.c ****         {
 201:bsp/boards/OpenMote-CC2538/source/ccm.c ****             ASM_NOP;
 260              		.loc 1 201 0 discriminator 1
 261              	@ 201 "bsp/boards/OpenMote-CC2538/source/ccm.c" 1
 262 0202 00BF     		NOP
 263              	@ 0 "" 2
 202:bsp/boards/OpenMote-CC2538/source/ccm.c ****         }
 203:bsp/boards/OpenMote-CC2538/source/ccm.c ****         while(!(HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_IN_DONE));
 264              		.loc 1 203 0 discriminator 1
 265              		.thumb
 266 0204 4BF29073 		movw	r3, #46992
 267 0208 C4F20803 		movt	r3, 16392
 268 020c 1B68     		ldr	r3, [r3, #0]
 269 020e 03F00203 		and	r3, r3, #2
 270 0212 002B     		cmp	r3, #0
 271 0214 F5D0     		beq	.L11
 204:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 205:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // check for the absence of error
 206:bsp/boards/OpenMote-CC2538/source/ccm.c ****         if((HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_BUS_ERR))
 272              		.loc 1 206 0
 273 0216 4BF29073 		movw	r3, #46992
 274 021a C4F20803 		movt	r3, 16392
 275 021e 1B68     		ldr	r3, [r3, #0]
 276 0220 002B     		cmp	r3, #0
 277 0222 0EDA     		bge	.L10
 207:bsp/boards/OpenMote-CC2538/source/ccm.c ****         {
 208:bsp/boards/OpenMote-CC2538/source/ccm.c ****             //clear the DMA error
 209:bsp/boards/OpenMote-CC2538/source/ccm.c ****             HWREG(AES_CTRL_INT_CLR) |= AES_CTRL_INT_CLR_DMA_BUS_ERR;
 278              		.loc 1 209 0
 279 0224 4BF28873 		movw	r3, #46984
 280 0228 C4F20803 		movt	r3, 16392
 281 022c 4BF28872 		movw	r2, #46984
 282 0230 C4F20802 		movt	r2, 16392
 283 0234 1268     		ldr	r2, [r2, #0]
 284 0236 42F00042 		orr	r2, r2, #-2147483648
 285 023a 1A60     		str	r2, [r3, #0]
 210:bsp/boards/OpenMote-CC2538/source/ccm.c ****             return (AES_DMA_BUS_ERROR);
 286              		.loc 1 210 0
 287 023c 4FF00303 		mov	r3, #3
 288 0240 44E0     		b	.L14
 289              	.L10:
 211:bsp/boards/OpenMote-CC2538/source/ccm.c ****         }
 212:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 213:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 214:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // clear interrupt status
 215:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_CLR) = (AES_CTRL_INT_CLR_DMA_IN_DONE |
 290              		.loc 1 215 0
 291 0242 4BF28873 		movw	r3, #46984
 292 0246 C4F20803 		movt	r3, 16392
 293 024a 4FF00302 		mov	r2, #3
 294 024e 1A60     		str	r2, [r3, #0]
 216:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                AES_CTRL_INT_CLR_RESULT_AV);
 217:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if(ui8IntEnable)
 295              		.loc 1 217 0
 296 0250 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 297 0254 002B     		cmp	r3, #0
 298 0256 07D0     		beq	.L12
 218:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 219:bsp/boards/OpenMote-CC2538/source/ccm.c ****         IntPendClear(INT_AES);
 299              		.loc 1 219 0
 300 0258 4FF09F00 		mov	r0, #159
 301 025c FFF7FEFF 		bl	IntPendClear
 220:bsp/boards/OpenMote-CC2538/source/ccm.c ****         IntEnable(INT_AES);
 302              		.loc 1 220 0
 303 0260 4FF09F00 		mov	r0, #159
 304 0264 FFF7FEFF 		bl	IntEnable
 305              	.L12:
 221:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 222:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 223:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // enable result available bit in interrupt enable
 224:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_EN) = AES_CTRL_INT_EN_RESULT_AV;
 306              		.loc 1 224 0
 307 0268 4BF28473 		movw	r3, #46980
 308 026c C4F20803 		movt	r3, 16392
 309 0270 4FF00102 		mov	r2, #1
 310 0274 1A60     		str	r2, [r3, #0]
 225:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 226:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if(bEncrypt)
 311              		.loc 1 226 0
 312 0276 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 313 0278 002B     		cmp	r3, #0
 314 027a 25D0     		beq	.L13
 227:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 228:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // configure DMAC
 229:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // enable DMA channel 0
 230:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_CTRL) = AES_DMAC_CH0_CTRL_EN;
 315              		.loc 1 230 0
 316 027c 4FF43043 		mov	r3, #45056
 317 0280 C4F20803 		movt	r3, 16392
 318 0284 4FF00102 		mov	r2, #1
 319 0288 1A60     		str	r2, [r3, #0]
 231:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // base address of the payload data in ext. memory
 232:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_EXTADDR) = (uint32_t)pui8M;
 320              		.loc 1 232 0
 321 028a 4BF20403 		movw	r3, #45060
 322 028e C4F20803 		movt	r3, 16392
 323 0292 7A68     		ldr	r2, [r7, #4]
 324 0294 1A60     		str	r2, [r3, #0]
 233:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // payload data length in bytes, equal to the message length
 234:bsp/boards/OpenMote-CC2538/source/ccm.c ****         //len({crypto_data})
 235:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_DMALENGTH) = (ui16LenM);
 325              		.loc 1 235 0
 326 0296 4BF20C03 		movw	r3, #45068
 327 029a C4F20803 		movt	r3, 16392
 328 029e 3A8E     		ldrh	r2, [r7, #48]
 329 02a0 1A60     		str	r2, [r3, #0]
 236:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 237:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // enable DMA channel 1
 238:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH1_CTRL) = AES_DMAC_CH1_CTRL_EN;
 330              		.loc 1 238 0
 331 02a2 4BF22003 		movw	r3, #45088
 332 02a6 C4F20803 		movt	r3, 16392
 333 02aa 4FF00102 		mov	r2, #1
 334 02ae 1A60     		str	r2, [r3, #0]
 239:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // base address of the output data buffer
 240:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH1_EXTADDR) = (uint32_t)pui8M;
 335              		.loc 1 240 0
 336 02b0 4BF22403 		movw	r3, #45092
 337 02b4 C4F20803 		movt	r3, 16392
 338 02b8 7A68     		ldr	r2, [r7, #4]
 339 02ba 1A60     		str	r2, [r3, #0]
 241:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // output data length in bytes, equal to the result data length
 242:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // len({crypto data})
 243:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH1_DMALENGTH) = ui16LenM;
 340              		.loc 1 243 0
 341 02bc 4BF22C03 		movw	r3, #45100
 342 02c0 C4F20803 		movt	r3, 16392
 343 02c4 3A8E     		ldrh	r2, [r7, #48]
 344 02c6 1A60     		str	r2, [r3, #0]
 345              	.L13:
 244:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 245:bsp/boards/OpenMote-CC2538/source/ccm.c ****     return (AES_SUCCESS);
 346              		.loc 1 245 0
 347 02c8 4FF00003 		mov	r3, #0
 348              	.L14:
 246:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 247:bsp/boards/OpenMote-CC2538/source/ccm.c **** }
 349              		.loc 1 247 0
 350 02cc 1846     		mov	r0, r3
 351 02ce 07F12807 		add	r7, r7, #40
 352 02d2 BD46     		mov	sp, r7
 353 02d4 80BD     		pop	{r7, pc}
 354              		.cfi_endproc
 355              	.LFE0:
 357 02d6 00BF     		.align	2
 358              		.global	CCMAuthEncryptCheckResult
 359              		.thumb
 360              		.thumb_func
 362              	CCMAuthEncryptCheckResult:
 363              	.LFB1:
 248:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 249:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
 250:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
 251:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! CCMAuthEncryptCheckResult checks the status of CCM encrypt operation.
 252:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 253:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \return  if result is available or error occurs, function returns true.  
 254:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! If result is not yet available or no error occurs, returns false
 255:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 256:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
 257:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
 258:bsp/boards/OpenMote-CC2538/source/ccm.c **** uint8_t CCMAuthEncryptCheckResult(void)
 259:bsp/boards/OpenMote-CC2538/source/ccm.c **** {
 364              		.loc 1 259 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369 02d8 80B4     		push	{r7}
 370              	.LCFI3:
 371              		.cfi_def_cfa_offset 4
 372              		.cfi_offset 7, -4
 373 02da 00AF     		add	r7, sp, #0
 374              	.LCFI4:
 375              		.cfi_def_cfa_register 7
 260:bsp/boards/OpenMote-CC2538/source/ccm.c ****     return (((HWREGB(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_RESULT_AV)) ||
 376              		.loc 1 260 0
 377 02dc 4BF29073 		movw	r3, #46992
 378 02e0 C4F20803 		movt	r3, 16392
 379 02e4 1B78     		ldrb	r3, [r3, #0]
 380 02e6 DBB2     		uxtb	r3, r3
 381 02e8 03F00103 		and	r3, r3, #1
 261:bsp/boards/OpenMote-CC2538/source/ccm.c ****             ((HWREGB(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_BUS_ERR)) ||
 262:bsp/boards/OpenMote-CC2538/source/ccm.c ****             ((HWREGB(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_KEY_ST_WR_ERR)) ||
 382              		.loc 1 262 0
 383 02ec 002B     		cmp	r3, #0
 384 02ee 18D1     		bne	.L16
 261:bsp/boards/OpenMote-CC2538/source/ccm.c ****             ((HWREGB(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_BUS_ERR)) ||
 385              		.loc 1 261 0
 386 02f0 4BF29073 		movw	r3, #46992
 387 02f4 C4F20803 		movt	r3, 16392
 388 02f8 1B78     		ldrb	r3, [r3, #0]
 389              		.loc 1 262 0
 390 02fa 4BF29073 		movw	r3, #46992
 391 02fe C4F20803 		movt	r3, 16392
 392 0302 1B78     		ldrb	r3, [r3, #0]
 393 0304 DBB2     		uxtb	r3, r3
 394 0306 03F08043 		and	r3, r3, #1073741824
 261:bsp/boards/OpenMote-CC2538/source/ccm.c ****             ((HWREGB(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_BUS_ERR)) ||
 395              		.loc 1 261 0
 396 030a 002B     		cmp	r3, #0
 397 030c 09D1     		bne	.L16
 263:bsp/boards/OpenMote-CC2538/source/ccm.c ****             ((HWREGB(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_KEY_ST_RD_ERR)));
 398              		.loc 1 263 0
 399 030e 4BF29073 		movw	r3, #46992
 400 0312 C4F20803 		movt	r3, 16392
 401 0316 1B78     		ldrb	r3, [r3, #0]
 402 0318 DBB2     		uxtb	r3, r3
 403 031a 03F00053 		and	r3, r3, #536870912
 262:bsp/boards/OpenMote-CC2538/source/ccm.c ****             ((HWREGB(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_KEY_ST_WR_ERR)) ||
 404              		.loc 1 262 0
 405 031e 002B     		cmp	r3, #0
 406 0320 02D0     		beq	.L17
 407              	.L16:
 262:bsp/boards/OpenMote-CC2538/source/ccm.c ****             ((HWREGB(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_KEY_ST_WR_ERR)) ||
 408              		.loc 1 262 0 is_stmt 0 discriminator 1
 409 0322 4FF00103 		mov	r3, #1
 410 0326 01E0     		b	.L18
 411              	.L17:
 262:bsp/boards/OpenMote-CC2538/source/ccm.c ****             ((HWREGB(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_KEY_ST_WR_ERR)) ||
 412              		.loc 1 262 0 discriminator 2
 413 0328 4FF00003 		mov	r3, #0
 414              	.L18:
 260:bsp/boards/OpenMote-CC2538/source/ccm.c ****     return (((HWREGB(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_RESULT_AV)) ||
 415              		.loc 1 260 0 is_stmt 1
 416 032c DBB2     		uxtb	r3, r3
 264:bsp/boards/OpenMote-CC2538/source/ccm.c **** }
 417              		.loc 1 264 0
 418 032e 1846     		mov	r0, r3
 419 0330 BD46     		mov	sp, r7
 420 0332 80BC     		pop	{r7}
 421 0334 7047     		bx	lr
 422              		.cfi_endproc
 423              	.LFE1:
 425 0336 00BF     		.align	2
 426              		.global	CCMAuthEncryptGetResult
 427              		.thumb
 428              		.thumb_func
 430              	CCMAuthEncryptGetResult:
 431              	.LFB2:
 265:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 266:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
 267:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
 268:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! CCMAuthEncryptGetResult gets the result of CCM operation.  This
 269:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! function should be called after CCCMAuthEncryptStart is called.
 270:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 271:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param ui8Mval is length of authentication field in octets [0,2,4,6,8,10,12,
 272:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!  14 or 16].
 273:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param ui16LenM  is length of message pui8M[] in octets.
 274:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param pui8Cstate is pointer to AES state buffer.
 275:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 276:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \return  AES_SUCCESS if successful.
 277:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
 278:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
 279:bsp/boards/OpenMote-CC2538/source/ccm.c **** uint8_t CCMAuthEncryptGetResult(uint8_t ui8Mval,
 280:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                 uint16_t ui16LenM,
 281:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                 uint8_t *pui8Cstate)
 282:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 283:bsp/boards/OpenMote-CC2538/source/ccm.c **** {
 432              		.loc 1 283 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 32
 435              		@ frame_needed = 1, uses_anonymous_args = 0
 436 0338 80B5     		push	{r7, lr}
 437              	.LCFI5:
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 7, -8
 440              		.cfi_offset 14, -4
 441 033a 88B0     		sub	sp, sp, #32
 442              	.LCFI6:
 443              		.cfi_def_cfa_offset 40
 444 033c 00AF     		add	r7, sp, #0
 445              	.LCFI7:
 446              		.cfi_def_cfa_register 7
 447 033e 0B46     		mov	r3, r1
 448 0340 3A60     		str	r2, [r7, #0]
 449 0342 0246     		mov	r2, r0
 450 0344 FA71     		strb	r2, [r7, #7]
 451 0346 BB80     		strh	r3, [r7, #4]	@ movhi
 284:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint8_t volatile ui8MIC[16];
 285:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint8_t ui8I;
 286:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 287:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if((HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_BUS_ERR))
 452              		.loc 1 287 0
 453 0348 4BF29073 		movw	r3, #46992
 454 034c C4F20803 		movt	r3, 16392
 455 0350 1B68     		ldr	r3, [r3, #0]
 456 0352 002B     		cmp	r3, #0
 457 0354 0EDA     		bge	.L21
 288:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 289:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // clear the DMA error bit
 290:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_CTRL_INT_CLR) |= AES_CTRL_INT_CLR_DMA_BUS_ERR;
 458              		.loc 1 290 0
 459 0356 4BF28873 		movw	r3, #46984
 460 035a C4F20803 		movt	r3, 16392
 461 035e 4BF28872 		movw	r2, #46984
 462 0362 C4F20802 		movt	r2, 16392
 463 0366 1268     		ldr	r2, [r2, #0]
 464 0368 42F00042 		orr	r2, r2, #-2147483648
 465 036c 1A60     		str	r2, [r3, #0]
 291:bsp/boards/OpenMote-CC2538/source/ccm.c ****         return (AES_DMA_BUS_ERROR);
 466              		.loc 1 291 0
 467 036e 4FF00303 		mov	r3, #3
 468 0372 96E0     		b	.L22
 469              	.L21:
 292:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 293:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if((HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_KEY_ST_WR_ERR))
 470              		.loc 1 293 0
 471 0374 4BF29073 		movw	r3, #46992
 472 0378 C4F20803 		movt	r3, 16392
 473 037c 1B68     		ldr	r3, [r3, #0]
 474 037e 03F08043 		and	r3, r3, #1073741824
 475 0382 002B     		cmp	r3, #0
 476 0384 0ED0     		beq	.L23
 294:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 295:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // clear the Key Store Write error bit
 296:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_CTRL_INT_CLR) |= AES_CTRL_INT_CLR_KEY_ST_WR_ERR;
 477              		.loc 1 296 0
 478 0386 4BF28873 		movw	r3, #46984
 479 038a C4F20803 		movt	r3, 16392
 480 038e 4BF28872 		movw	r2, #46984
 481 0392 C4F20802 		movt	r2, 16392
 482 0396 1268     		ldr	r2, [r2, #0]
 483 0398 42F08042 		orr	r2, r2, #1073741824
 484 039c 1A60     		str	r2, [r3, #0]
 297:bsp/boards/OpenMote-CC2538/source/ccm.c ****         return (AES_KEYSTORE_WRITE_ERROR);
 485              		.loc 1 297 0
 486 039e 4FF00203 		mov	r3, #2
 487 03a2 7EE0     		b	.L22
 488              	.L23:
 298:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 299:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if((HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_KEY_ST_RD_ERR))
 489              		.loc 1 299 0
 490 03a4 4BF29073 		movw	r3, #46992
 491 03a8 C4F20803 		movt	r3, 16392
 492 03ac 1B68     		ldr	r3, [r3, #0]
 493 03ae 03F00053 		and	r3, r3, #536870912
 494 03b2 002B     		cmp	r3, #0
 495 03b4 0ED0     		beq	.L24
 300:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 301:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // clear the Key Store Read error bit
 302:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_CTRL_INT_CLR) |= AES_CTRL_INT_CLR_KEY_ST_RD_ERR;
 496              		.loc 1 302 0
 497 03b6 4BF28873 		movw	r3, #46984
 498 03ba C4F20803 		movt	r3, 16392
 499 03be 4BF28872 		movw	r2, #46984
 500 03c2 C4F20802 		movt	r2, 16392
 501 03c6 1268     		ldr	r2, [r2, #0]
 502 03c8 42F00052 		orr	r2, r2, #536870912
 503 03cc 1A60     		str	r2, [r3, #0]
 303:bsp/boards/OpenMote-CC2538/source/ccm.c ****         return (AES_KEYSTORE_READ_ERROR);
 504              		.loc 1 303 0
 505 03ce 4FF00103 		mov	r3, #1
 506 03d2 66E0     		b	.L22
 507              	.L24:
 304:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 305:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 306:bsp/boards/OpenMote-CC2538/source/ccm.c ****     IntDisable(INT_AES);
 508              		.loc 1 306 0
 509 03d4 4FF09F00 		mov	r0, #159
 510 03d8 FFF7FEFF 		bl	IntDisable
 307:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 308:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // disable the master control/DMA clock
 309:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_ALG_SEL) = 0x00000000;
 511              		.loc 1 309 0
 512 03dc 4FF43743 		mov	r3, #46848
 513 03e0 C4F20803 		movt	r3, 16392
 514 03e4 4FF00002 		mov	r2, #0
 515 03e8 1A60     		str	r2, [r3, #0]
 516              	.L25:
 310:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 311:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // read tag
 312:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // wait for the context ready bit [30]
 313:bsp/boards/OpenMote-CC2538/source/ccm.c ****     do
 314:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 315:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ASM_NOP;
 517              		.loc 1 315 0 discriminator 1
 518              	@ 315 "bsp/boards/OpenMote-CC2538/source/ccm.c" 1
 519 03ea 00BF     		NOP
 520              	@ 0 "" 2
 316:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 317:bsp/boards/OpenMote-CC2538/source/ccm.c ****     while((HWREG(AES_AES_CTRL) & AES_AES_CTRL_saved_context_ready) !=
 521              		.loc 1 317 0 discriminator 1
 522              		.thumb
 523 03ec 4BF25053 		movw	r3, #46416
 524 03f0 C4F20803 		movt	r3, 16392
 525 03f4 1B68     		ldr	r3, [r3, #0]
 526 03f6 03F08043 		and	r3, r3, #1073741824
 318:bsp/boards/OpenMote-CC2538/source/ccm.c ****             AES_AES_CTRL_saved_context_ready);
 527              		.loc 1 318 0 discriminator 1
 528 03fa 002B     		cmp	r3, #0
 529 03fc F5D0     		beq	.L25
 319:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 320:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // Read the tag registers
 321:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ((uint32_t  *)&ui8MIC)[0] = HWREG(AES_AES_TAG_OUT_0);
 530              		.loc 1 321 0
 531 03fe 07F10C02 		add	r2, r7, #12
 532 0402 4BF27053 		movw	r3, #46448
 533 0406 C4F20803 		movt	r3, 16392
 534 040a 1B68     		ldr	r3, [r3, #0]
 535 040c 1360     		str	r3, [r2, #0]
 322:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ((uint32_t  *)&ui8MIC)[1] = HWREG(AES_AES_TAG_OUT_1);
 536              		.loc 1 322 0
 537 040e 07F10C03 		add	r3, r7, #12
 538 0412 03F10403 		add	r3, r3, #4
 539 0416 4BF27452 		movw	r2, #46452
 540 041a C4F20802 		movt	r2, 16392
 541 041e 1268     		ldr	r2, [r2, #0]
 542 0420 1A60     		str	r2, [r3, #0]
 323:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ((uint32_t  *)&ui8MIC)[2] = HWREG(AES_AES_TAG_OUT_2);
 543              		.loc 1 323 0
 544 0422 07F10C03 		add	r3, r7, #12
 545 0426 03F10803 		add	r3, r3, #8
 546 042a 4BF27852 		movw	r2, #46456
 547 042e C4F20802 		movt	r2, 16392
 548 0432 1268     		ldr	r2, [r2, #0]
 549 0434 1A60     		str	r2, [r3, #0]
 324:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ((uint32_t  *)&ui8MIC)[3] = HWREG(AES_AES_TAG_OUT_3);
 550              		.loc 1 324 0
 551 0436 07F10C03 		add	r3, r7, #12
 552 043a 03F10C03 		add	r3, r3, #12
 553 043e 4BF27C52 		movw	r2, #46460
 554 0442 C4F20802 		movt	r2, 16392
 555 0446 1268     		ldr	r2, [r2, #0]
 556 0448 1A60     		str	r2, [r3, #0]
 325:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 326:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // clear the interrupt status
 327:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_CLR) |= (AES_CTRL_INT_CLR_DMA_IN_DONE |
 557              		.loc 1 327 0
 558 044a 4BF28873 		movw	r3, #46984
 559 044e C4F20803 		movt	r3, 16392
 560 0452 4BF28872 		movw	r2, #46984
 561 0456 C4F20802 		movt	r2, 16392
 562 045a 1268     		ldr	r2, [r2, #0]
 563 045c 42F00302 		orr	r2, r2, #3
 564 0460 1A60     		str	r2, [r3, #0]
 328:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                 AES_CTRL_INT_CLR_RESULT_AV);
 329:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 330:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // copy tag to pui8Cstate
 331:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < ui8Mval; ui8I++)
 565              		.loc 1 331 0
 566 0462 4FF00003 		mov	r3, #0
 567 0466 FB77     		strb	r3, [r7, #31]
 568 0468 0EE0     		b	.L26
 569              	.L27:
 332:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 333:bsp/boards/OpenMote-CC2538/source/ccm.c ****         pui8Cstate[ui8I] = ui8MIC[ui8I];
 570              		.loc 1 333 0 discriminator 2
 571 046a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 572 046c 3A68     		ldr	r2, [r7, #0]
 573 046e D318     		adds	r3, r2, r3
 574 0470 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 575 0472 07F12001 		add	r1, r7, #32
 576 0476 8A18     		adds	r2, r1, r2
 577 0478 12F8142C 		ldrb	r2, [r2, #-20]
 578 047c D2B2     		uxtb	r2, r2
 579 047e 1A70     		strb	r2, [r3, #0]
 331:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < ui8Mval; ui8I++)
 580              		.loc 1 331 0 discriminator 2
 581 0480 FB7F     		ldrb	r3, [r7, #31]
 582 0482 03F10103 		add	r3, r3, #1
 583 0486 FB77     		strb	r3, [r7, #31]
 584              	.L26:
 331:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < ui8Mval; ui8I++)
 585              		.loc 1 331 0 is_stmt 0 discriminator 1
 586 0488 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 587 048a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 588 048c 9A42     		cmp	r2, r3
 589 048e ECD3     		bcc	.L27
 334:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 335:bsp/boards/OpenMote-CC2538/source/ccm.c ****     g_ui8CurrentAESOp = AES_NONE;
 590              		.loc 1 335 0 is_stmt 1
 591 0490 40F20003 		movw	r3, #:lower16:g_ui8CurrentAESOp
 592 0494 C0F20003 		movt	r3, #:upper16:g_ui8CurrentAESOp
 593 0498 4FF00002 		mov	r2, #0
 594 049c 1A70     		strb	r2, [r3, #0]
 336:bsp/boards/OpenMote-CC2538/source/ccm.c ****     return (AES_SUCCESS);
 595              		.loc 1 336 0
 596 049e 4FF00003 		mov	r3, #0
 597              	.L22:
 337:bsp/boards/OpenMote-CC2538/source/ccm.c **** }
 598              		.loc 1 337 0
 599 04a2 1846     		mov	r0, r3
 600 04a4 07F12007 		add	r7, r7, #32
 601 04a8 BD46     		mov	sp, r7
 602 04aa 80BD     		pop	{r7, pc}
 603              		.cfi_endproc
 604              	.LFE2:
 606              		.align	2
 607              		.global	CCMInvAuthDecryptStart
 608              		.thumb
 609              		.thumb_func
 611              	CCMInvAuthDecryptStart:
 612              	.LFB3:
 338:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 339:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
 340:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
 341:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! CCMInvAuthDecryptStart starts the CCM Decryption and Inverse
 342:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! Authentication operation.
 343:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 344:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param bDecrypt if set to 'true' then run decryption, set to 'false' if
 345:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! authentication only
 346:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param ui8Mval is the length of authentication field in octets [0,2,4,6,8,
 347:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! 10,12,14 or 16].
 348:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  pui8N is the pointer to 13-byte or 12-byte Nonce.
 349:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  pui8C  is the pointer to octet string 'c' = 'm' || auth tag T.
 350:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  ui16LenC is the length of pui8C[] in octets.
 351:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  pui8A is the pointer to octet string 'a'.
 352:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  ui16LenA is the Length of pui8A[] in octets.
 353:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  ui8KeyLocation is the location where the Key is stored in Key RAM.
 354:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  pui8Cstate is the pointer to output buffer.  (cannot be part
 355:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! of pui8C[]).
 356:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  ui8CCMLVal is the ccm L Value to be used.
 357:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param  ui8IntEnable if set to 'true' to enable interrupts or 'false' to
 358:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! disable interuupts.  Set to 'false' if \e bDecrypt is set to 'false'.
 359:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 360:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 361:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! The function will place in \e pui8Cstate the first ui8Mval bytes of 
 362:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! containing the Authentication Tag.
 363:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 364:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! The \e ui8KeyLocation parameter is an enumerated type which specifies
 365:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! the Key Ram locationin which the key is stored.
 366:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! This parameter can have any of the following values:
 367:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 368:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_0
 369:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_1
 370:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_2,
 371:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_3,
 372:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_4,
 373:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_5,
 374:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_6,
 375:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! - \b KEY_AREA_7
 376:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 377:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \return  AES_SUCCESS if successful.
 378:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
 379:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
 380:bsp/boards/OpenMote-CC2538/source/ccm.c **** uint8_t CCMInvAuthDecryptStart(bool bDecrypt,
 381:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                uint8_t ui8Mval,
 382:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                uint8_t *pui8N,
 383:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                uint8_t *pui8C,
 384:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                uint16_t ui16LenC,
 385:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                uint8_t *pui8A,
 386:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                uint16_t ui16LenA,
 387:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                uint8_t ui8KeyLocation,
 388:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                uint8_t *pui8Cstate,
 389:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                uint8_t ui8CCMLVal,
 390:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                uint8_t ui8IntEnable)
 391:bsp/boards/OpenMote-CC2538/source/ccm.c **** {
 613              		.loc 1 391 0
 614              		.cfi_startproc
 615              		@ args = 28, pretend = 0, frame = 40
 616              		@ frame_needed = 1, uses_anonymous_args = 0
 617 04ac 80B5     		push	{r7, lr}
 618              	.LCFI8:
 619              		.cfi_def_cfa_offset 8
 620              		.cfi_offset 7, -8
 621              		.cfi_offset 14, -4
 622 04ae 8AB0     		sub	sp, sp, #40
 623              	.LCFI9:
 624              		.cfi_def_cfa_offset 48
 625 04b0 00AF     		add	r7, sp, #0
 626              	.LCFI10:
 627              		.cfi_def_cfa_register 7
 628 04b2 BA60     		str	r2, [r7, #8]
 629 04b4 7B60     		str	r3, [r7, #4]
 630 04b6 0346     		mov	r3, r0
 631 04b8 FB73     		strb	r3, [r7, #15]
 632 04ba 0B46     		mov	r3, r1
 633 04bc BB73     		strb	r3, [r7, #14]
 392:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint16_t ui16LenM = ui16LenC - ui8Mval;
 634              		.loc 1 392 0
 635 04be BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 636 04c0 9BB2     		uxth	r3, r3
 637 04c2 3A8E     		ldrh	r2, [r7, #48]	@ movhi
 638 04c4 D31A     		subs	r3, r2, r3
 639 04c6 3B84     		strh	r3, [r7, #32]	@ movhi
 393:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint8_t  ui8A0[16];
 394:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint32_t ui32CtrlVal;
 395:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint8_t  ui8I;
 396:bsp/boards/OpenMote-CC2538/source/ccm.c ****     g_ui8CurrentAESOp = AES_CCM;
 640              		.loc 1 396 0
 641 04c8 40F20003 		movw	r3, #:lower16:g_ui8CurrentAESOp
 642 04cc C0F20003 		movt	r3, #:upper16:g_ui8CurrentAESOp
 643 04d0 4FF00302 		mov	r2, #3
 644 04d4 1A70     		strb	r2, [r3, #0]
 397:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 398:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // workaround for AES registers not retained after PM2
 399:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_CFG) = AES_CTRL_INT_CFG_LEVEL;
 645              		.loc 1 399 0
 646 04d6 4BF28073 		movw	r3, #46976
 647 04da C4F20803 		movt	r3, 16392
 648 04de 4FF00102 		mov	r2, #1
 649 04e2 1A60     		str	r2, [r3, #0]
 400:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_EN) = (AES_CTRL_INT_EN_RESULT_AV |
 650              		.loc 1 400 0
 651 04e4 4BF28473 		movw	r3, #46980
 652 04e8 C4F20803 		movt	r3, 16392
 653 04ec 4FF00302 		mov	r2, #3
 654 04f0 1A60     		str	r2, [r3, #0]
 401:bsp/boards/OpenMote-CC2538/source/ccm.c ****                               AES_CTRL_INT_EN_DMA_IN_DONE);
 402:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 403:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_ALG_SEL) = AES_CTRL_ALG_SEL_AES;
 655              		.loc 1 403 0
 656 04f2 4FF43743 		mov	r3, #46848
 657 04f6 C4F20803 		movt	r3, 16392
 658 04fa 4FF00202 		mov	r2, #2
 659 04fe 1A60     		str	r2, [r3, #0]
 404:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_CLR) = (AES_CTRL_INT_CLR_DMA_IN_DONE |
 660              		.loc 1 404 0
 661 0500 4BF28873 		movw	r3, #46984
 662 0504 C4F20803 		movt	r3, 16392
 663 0508 4FF00302 		mov	r2, #3
 664 050c 1A60     		str	r2, [r3, #0]
 405:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                AES_CTRL_INT_CLR_RESULT_AV);
 406:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 407:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_KEY_STORE_READ_AREA) = (uint32_t)ui8KeyLocation;
 665              		.loc 1 407 0
 666 050e 4BF20C43 		movw	r3, #46092
 667 0512 C4F20803 		movt	r3, 16392
 668 0516 97F83C20 		ldrb	r2, [r7, #60]	@ zero_extendqisi2
 669 051a 1A60     		str	r2, [r3, #0]
 670              	.L29:
 408:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 409:bsp/boards/OpenMote-CC2538/source/ccm.c ****     //wait until key is loaded to the AES module
 410:bsp/boards/OpenMote-CC2538/source/ccm.c ****     do
 411:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 412:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ASM_NOP;
 671              		.loc 1 412 0 discriminator 1
 672              	@ 412 "bsp/boards/OpenMote-CC2538/source/ccm.c" 1
 673 051c 00BF     		NOP
 674              	@ 0 "" 2
 413:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 414:bsp/boards/OpenMote-CC2538/source/ccm.c ****     while((HWREG(AES_KEY_STORE_READ_AREA) & AES_KEY_STORE_READ_AREA_BUSY));
 675              		.loc 1 414 0 discriminator 1
 676              		.thumb
 677 051e 4BF20C43 		movw	r3, #46092
 678 0522 C4F20803 		movt	r3, 16392
 679 0526 1B68     		ldr	r3, [r3, #0]
 680 0528 002B     		cmp	r3, #0
 681 052a F7DB     		blt	.L29
 415:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 416:bsp/boards/OpenMote-CC2538/source/ccm.c ****     //check for Key Store read error
 417:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if((HWREG(AES_CTRL_INT_STAT)& AES_CTRL_INT_STAT_KEY_ST_RD_ERR))
 682              		.loc 1 417 0
 683 052c 4BF29073 		movw	r3, #46992
 684 0530 C4F20803 		movt	r3, 16392
 685 0534 1B68     		ldr	r3, [r3, #0]
 686 0536 03F00053 		and	r3, r3, #536870912
 687 053a 002B     		cmp	r3, #0
 688 053c 0ED0     		beq	.L30
 418:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 419:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // clear the Keystore Read error bit
 420:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_CTRL_INT_CLR) |= AES_CTRL_INT_CLR_KEY_ST_RD_ERR;
 689              		.loc 1 420 0
 690 053e 4BF28873 		movw	r3, #46984
 691 0542 C4F20803 		movt	r3, 16392
 692 0546 4BF28872 		movw	r2, #46984
 693 054a C4F20802 		movt	r2, 16392
 694 054e 1268     		ldr	r2, [r2, #0]
 695 0550 42F00052 		orr	r2, r2, #536870912
 696 0554 1A60     		str	r2, [r3, #0]
 421:bsp/boards/OpenMote-CC2538/source/ccm.c ****         return (AES_KEYSTORE_READ_ERROR);
 697              		.loc 1 421 0
 698 0556 4FF00103 		mov	r3, #1
 699 055a 05E1     		b	.L41
 700              	.L30:
 422:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 423:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 424:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // Prepare the initialization vector
 425:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui8A0[0] = ui8CCMLVal - 1;          // Lval
 701              		.loc 1 425 0
 702 055c 97F84430 		ldrb	r3, [r7, #68]
 703 0560 03F1FF33 		add	r3, r3, #-1
 704 0564 DBB2     		uxtb	r3, r3
 705 0566 3B74     		strb	r3, [r7, #16]
 426:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < 13; ui8I++)
 706              		.loc 1 426 0
 707 0568 4FF00003 		mov	r3, #0
 708 056c 87F82330 		strb	r3, [r7, #35]
 709 0570 13E0     		b	.L32
 710              	.L33:
 427:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 428:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ui8A0[ui8I + 1] = pui8N[ui8I];
 711              		.loc 1 428 0 discriminator 2
 712 0572 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 713 0576 03F10103 		add	r3, r3, #1
 714 057a 97F82320 		ldrb	r2, [r7, #35]	@ zero_extendqisi2
 715 057e B968     		ldr	r1, [r7, #8]
 716 0580 8A18     		adds	r2, r1, r2
 717 0582 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 718 0584 07F12801 		add	r1, r7, #40
 719 0588 CB18     		adds	r3, r1, r3
 720 058a 03F8182C 		strb	r2, [r3, #-24]
 426:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < 13; ui8I++)
 721              		.loc 1 426 0 discriminator 2
 722 058e 97F82330 		ldrb	r3, [r7, #35]
 723 0592 03F10103 		add	r3, r3, #1
 724 0596 87F82330 		strb	r3, [r7, #35]
 725              	.L32:
 426:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < 13; ui8I++)
 726              		.loc 1 426 0 is_stmt 0 discriminator 1
 727 059a 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 728 059e 0C2B     		cmp	r3, #12
 729 05a0 E7D9     		bls	.L33
 429:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 430:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if(3 == ui8CCMLVal)
 730              		.loc 1 430 0 is_stmt 1
 731 05a2 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 732 05a6 032B     		cmp	r3, #3
 733 05a8 02D1     		bne	.L34
 431:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 432:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ui8A0[13] = 0;
 734              		.loc 1 432 0
 735 05aa 4FF00003 		mov	r3, #0
 736 05ae 7B77     		strb	r3, [r7, #29]
 737              	.L34:
 433:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 434:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui8A0[14] = 0;                   // initialize counter to 0
 738              		.loc 1 434 0
 739 05b0 4FF00003 		mov	r3, #0
 740 05b4 BB77     		strb	r3, [r7, #30]
 435:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui8A0[15] = 0;                   // initialize counter to 0
 741              		.loc 1 435 0
 742 05b6 4FF00003 		mov	r3, #0
 743 05ba FB77     		strb	r3, [r7, #31]
 436:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 437:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // write initialization vector
 438:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_IV_0) = ((uint32_t  *)&ui8A0)[0];
 744              		.loc 1 438 0
 745 05bc 4BF24053 		movw	r3, #46400
 746 05c0 C4F20803 		movt	r3, 16392
 747 05c4 07F11002 		add	r2, r7, #16
 748 05c8 1268     		ldr	r2, [r2, #0]
 749 05ca 1A60     		str	r2, [r3, #0]
 439:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_IV_1) = ((uint32_t  *)&ui8A0)[1];
 750              		.loc 1 439 0
 751 05cc 4BF24453 		movw	r3, #46404
 752 05d0 C4F20803 		movt	r3, 16392
 753 05d4 7A69     		ldr	r2, [r7, #20]
 754 05d6 1A60     		str	r2, [r3, #0]
 440:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_IV_2) = ((uint32_t  *)&ui8A0)[2];
 755              		.loc 1 440 0
 756 05d8 4BF24853 		movw	r3, #46408
 757 05dc C4F20803 		movt	r3, 16392
 758 05e0 BA69     		ldr	r2, [r7, #24]
 759 05e2 1A60     		str	r2, [r3, #0]
 441:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_IV_3) = ((uint32_t  *)&ui8A0)[3];
 760              		.loc 1 441 0
 761 05e4 4BF24C53 		movw	r3, #46412
 762 05e8 C4F20803 		movt	r3, 16392
 763 05ec FA69     		ldr	r2, [r7, #28]
 764 05ee 1A60     		str	r2, [r3, #0]
 442:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 443:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // configure AES engine
 444:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal = ((ui8CCMLVal - 1) <<
 765              		.loc 1 444 0
 766 05f0 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 767 05f4 03F1FF33 		add	r3, r3, #-1
 768 05f8 4FEAC343 		lsl	r3, r3, #19
 769 05fc 7B62     		str	r3, [r7, #36]
 445:bsp/boards/OpenMote-CC2538/source/ccm.c ****                    AES_AES_CTRL_CCM_L_S);             // CCM_L
 446:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if(ui8Mval >= 2)
 770              		.loc 1 446 0
 771 05fe BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 772 0600 012B     		cmp	r3, #1
 773 0602 09D9     		bls	.L36
 447:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 448:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ui32CtrlVal |= (((ui8Mval - 2) >> 1) <<
 774              		.loc 1 448 0
 775 0604 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 776 0606 A3F10203 		sub	r3, r3, #2
 777 060a 4FEA6303 		asr	r3, r3, #1
 778 060e 4FEA8353 		lsl	r3, r3, #22
 779 0612 7A6A     		ldr	r2, [r7, #36]
 780 0614 1343     		orrs	r3, r3, r2
 781 0616 7B62     		str	r3, [r7, #36]
 782              	.L36:
 449:bsp/boards/OpenMote-CC2538/source/ccm.c ****                         AES_AES_CTRL_CCM_M_S);           // CCM_M
 450:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 451:bsp/boards/OpenMote-CC2538/source/ccm.c ****     else
 452:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 453:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ui32CtrlVal |= (0 <<
 454:bsp/boards/OpenMote-CC2538/source/ccm.c ****                         AES_AES_CTRL_CCM_M_S);           // CCM_M
 455:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 456:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= (AES_AES_CTRL_CCM);                // CCM
 783              		.loc 1 456 0
 784 0618 7B6A     		ldr	r3, [r7, #36]
 785 061a 43F48023 		orr	r3, r3, #262144
 786 061e 7B62     		str	r3, [r7, #36]
 457:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= (1 << AES_AES_CTRL_key_size_S);    // key = 128
 787              		.loc 1 457 0
 788 0620 7B6A     		ldr	r3, [r7, #36]
 789 0622 43F00803 		orr	r3, r3, #8
 790 0626 7B62     		str	r3, [r7, #36]
 458:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= (0 << AES_AES_CTRL_input_ready);   // decryption
 459:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= AES_AES_CTRL_CTR;                  // CTR
 791              		.loc 1 459 0
 792 0628 7B6A     		ldr	r3, [r7, #36]
 793 062a 43F04003 		orr	r3, r3, #64
 794 062e 7B62     		str	r3, [r7, #36]
 460:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= AES_AES_CTRL_save_context;         // save context
 795              		.loc 1 460 0
 796 0630 7B6A     		ldr	r3, [r7, #36]
 797 0632 43F00053 		orr	r3, r3, #536870912
 798 0636 7B62     		str	r3, [r7, #36]
 461:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ui32CtrlVal |= (0x3 << AES_AES_CTRL_ctr_width_S); // CTR width 128
 799              		.loc 1 461 0
 800 0638 7B6A     		ldr	r3, [r7, #36]
 801 063a 43F4C073 		orr	r3, r3, #384
 802 063e 7B62     		str	r3, [r7, #36]
 462:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // program AES-CCM-128 encryption
 463:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_CTRL) = ui32CtrlVal;
 803              		.loc 1 463 0
 804 0640 4BF25053 		movw	r3, #46416
 805 0644 C4F20803 		movt	r3, 16392
 806 0648 7A6A     		ldr	r2, [r7, #36]
 807 064a 1A60     		str	r2, [r3, #0]
 464:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 465:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // write the length of the crypto block (lo)
 466:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_C_LENGTH_0) = (uint16_t)(ui16LenM) ;
 808              		.loc 1 466 0
 809 064c 4BF25453 		movw	r3, #46420
 810 0650 C4F20803 		movt	r3, 16392
 811 0654 3A8C     		ldrh	r2, [r7, #32]
 812 0656 1A60     		str	r2, [r3, #0]
 467:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // write the length of the crypto block (hi)
 468:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_C_LENGTH_1)  =  0;
 813              		.loc 1 468 0
 814 0658 4BF25853 		movw	r3, #46424
 815 065c C4F20803 		movt	r3, 16392
 816 0660 4FF00002 		mov	r2, #0
 817 0664 1A60     		str	r2, [r3, #0]
 469:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 470:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // write the length of the AAD data block may be non-block size aligned
 471:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_AES_AUTH_LENGTH) = ui16LenA;
 818              		.loc 1 471 0
 819 0666 4BF25C53 		movw	r3, #46428
 820 066a C4F20803 		movt	r3, 16392
 821 066e 3A8F     		ldrh	r2, [r7, #56]
 822 0670 1A60     		str	r2, [r3, #0]
 472:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 473:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if(ui16LenA != 0)
 823              		.loc 1 473 0
 824 0672 3B8F     		ldrh	r3, [r7, #56]
 825 0674 002B     		cmp	r3, #0
 826 0676 32D0     		beq	.L37
 474:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 475:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // configure DMAC to fetch the AAD data
 476:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // enable DMA channel 0
 477:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_CTRL)      =  AES_DMAC_CH0_CTRL_EN;
 827              		.loc 1 477 0
 828 0678 4FF43043 		mov	r3, #45056
 829 067c C4F20803 		movt	r3, 16392
 830 0680 4FF00102 		mov	r2, #1
 831 0684 1A60     		str	r2, [r3, #0]
 478:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // base address of the AAD input data in ext. memory
 479:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_EXTADDR)   = (uint32_t)pui8A;
 832              		.loc 1 479 0
 833 0686 4BF20403 		movw	r3, #45060
 834 068a C4F20803 		movt	r3, 16392
 835 068e 7A6B     		ldr	r2, [r7, #52]
 836 0690 1A60     		str	r2, [r3, #0]
 480:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // AAD data length in bytes, equal to the AAD length len
 481:bsp/boards/OpenMote-CC2538/source/ccm.c ****         //({aad data}) (may be non-block size aligned)
 482:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 483:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_DMALENGTH) = ui16LenA;
 837              		.loc 1 483 0
 838 0692 4BF20C03 		movw	r3, #45068
 839 0696 C4F20803 		movt	r3, 16392
 840 069a 3A8F     		ldrh	r2, [r7, #56]
 841 069c 1A60     		str	r2, [r3, #0]
 842              	.L38:
 484:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 485:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // wait for completion of the AAD data transfer, DMA_IN_DONE
 486:bsp/boards/OpenMote-CC2538/source/ccm.c ****         do
 487:bsp/boards/OpenMote-CC2538/source/ccm.c ****         {
 488:bsp/boards/OpenMote-CC2538/source/ccm.c ****             ASM_NOP;
 843              		.loc 1 488 0 discriminator 1
 844              	@ 488 "bsp/boards/OpenMote-CC2538/source/ccm.c" 1
 845 069e 00BF     		NOP
 846              	@ 0 "" 2
 489:bsp/boards/OpenMote-CC2538/source/ccm.c ****         }
 490:bsp/boards/OpenMote-CC2538/source/ccm.c ****         while(!(HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_IN_DONE));
 847              		.loc 1 490 0 discriminator 1
 848              		.thumb
 849 06a0 4BF29073 		movw	r3, #46992
 850 06a4 C4F20803 		movt	r3, 16392
 851 06a8 1B68     		ldr	r3, [r3, #0]
 852 06aa 03F00203 		and	r3, r3, #2
 853 06ae 002B     		cmp	r3, #0
 854 06b0 F5D0     		beq	.L38
 491:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 492:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // check for the absence of error
 493:bsp/boards/OpenMote-CC2538/source/ccm.c ****         if((HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_BUS_ERR))
 855              		.loc 1 493 0
 856 06b2 4BF29073 		movw	r3, #46992
 857 06b6 C4F20803 		movt	r3, 16392
 858 06ba 1B68     		ldr	r3, [r3, #0]
 859 06bc 002B     		cmp	r3, #0
 860 06be 0EDA     		bge	.L37
 494:bsp/boards/OpenMote-CC2538/source/ccm.c ****         {
 495:bsp/boards/OpenMote-CC2538/source/ccm.c ****             HWREG(AES_CTRL_INT_CLR) |= AES_CTRL_INT_CLR_DMA_BUS_ERR;
 861              		.loc 1 495 0
 862 06c0 4BF28873 		movw	r3, #46984
 863 06c4 C4F20803 		movt	r3, 16392
 864 06c8 4BF28872 		movw	r2, #46984
 865 06cc C4F20802 		movt	r2, 16392
 866 06d0 1268     		ldr	r2, [r2, #0]
 867 06d2 42F00042 		orr	r2, r2, #-2147483648
 868 06d6 1A60     		str	r2, [r3, #0]
 496:bsp/boards/OpenMote-CC2538/source/ccm.c ****             return (AES_DMA_BUS_ERROR);
 869              		.loc 1 496 0
 870 06d8 4FF00303 		mov	r3, #3
 871 06dc 44E0     		b	.L41
 872              	.L37:
 497:bsp/boards/OpenMote-CC2538/source/ccm.c ****         }
 498:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 499:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 500:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // clear interrupt status
 501:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_CLR) = (AES_CTRL_INT_CLR_DMA_IN_DONE |
 873              		.loc 1 501 0
 874 06de 4BF28873 		movw	r3, #46984
 875 06e2 C4F20803 		movt	r3, 16392
 876 06e6 4FF00302 		mov	r2, #3
 877 06ea 1A60     		str	r2, [r3, #0]
 502:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                AES_CTRL_INT_CLR_RESULT_AV);
 503:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 504:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if(ui8IntEnable)
 878              		.loc 1 504 0
 879 06ec 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 880 06f0 002B     		cmp	r3, #0
 881 06f2 07D0     		beq	.L39
 505:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 506:bsp/boards/OpenMote-CC2538/source/ccm.c ****         IntPendClear(INT_AES);
 882              		.loc 1 506 0
 883 06f4 4FF09F00 		mov	r0, #159
 884 06f8 FFF7FEFF 		bl	IntPendClear
 507:bsp/boards/OpenMote-CC2538/source/ccm.c ****         IntEnable(INT_AES);
 885              		.loc 1 507 0
 886 06fc 4FF09F00 		mov	r0, #159
 887 0700 FFF7FEFF 		bl	IntEnable
 888              	.L39:
 508:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 509:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 510:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // enable result available bit in interrupt enable
 511:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_EN) = AES_CTRL_INT_EN_RESULT_AV;
 889              		.loc 1 511 0
 890 0704 4BF28473 		movw	r3, #46980
 891 0708 C4F20803 		movt	r3, 16392
 892 070c 4FF00102 		mov	r2, #1
 893 0710 1A60     		str	r2, [r3, #0]
 512:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 513:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if(bDecrypt)
 894              		.loc 1 513 0
 895 0712 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 896 0714 002B     		cmp	r3, #0
 897 0716 25D0     		beq	.L40
 514:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 515:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // configure DMAC
 516:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // enable DMA channel 0
 517:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_CTRL) = AES_DMAC_CH0_CTRL_EN;
 898              		.loc 1 517 0
 899 0718 4FF43043 		mov	r3, #45056
 900 071c C4F20803 		movt	r3, 16392
 901 0720 4FF00102 		mov	r2, #1
 902 0724 1A60     		str	r2, [r3, #0]
 518:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // base address of the payload data in ext. memory
 519:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_EXTADDR) = (uint32_t)pui8C;
 903              		.loc 1 519 0
 904 0726 4BF20403 		movw	r3, #45060
 905 072a C4F20803 		movt	r3, 16392
 906 072e 7A68     		ldr	r2, [r7, #4]
 907 0730 1A60     		str	r2, [r3, #0]
 520:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // payload data length in bytes, equal to the message length len({crypto_data})
 521:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH0_DMALENGTH) = (ui16LenM);
 908              		.loc 1 521 0
 909 0732 4BF20C03 		movw	r3, #45068
 910 0736 C4F20803 		movt	r3, 16392
 911 073a 3A8C     		ldrh	r2, [r7, #32]
 912 073c 1A60     		str	r2, [r3, #0]
 522:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 523:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // enable DMA channel 1
 524:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH1_CTRL) = AES_DMAC_CH1_CTRL_EN;
 913              		.loc 1 524 0
 914 073e 4BF22003 		movw	r3, #45088
 915 0742 C4F20803 		movt	r3, 16392
 916 0746 4FF00102 		mov	r2, #1
 917 074a 1A60     		str	r2, [r3, #0]
 525:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // base address of the output data buffer
 526:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH1_EXTADDR) = (uint32_t)pui8C;
 918              		.loc 1 526 0
 919 074c 4BF22403 		movw	r3, #45092
 920 0750 C4F20803 		movt	r3, 16392
 921 0754 7A68     		ldr	r2, [r7, #4]
 922 0756 1A60     		str	r2, [r3, #0]
 527:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // output data length in bytes, equal to the result data length len({crypto data})
 528:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_DMAC_CH1_DMALENGTH) = ui16LenM;
 923              		.loc 1 528 0
 924 0758 4BF22C03 		movw	r3, #45100
 925 075c C4F20803 		movt	r3, 16392
 926 0760 3A8C     		ldrh	r2, [r7, #32]
 927 0762 1A60     		str	r2, [r3, #0]
 928              	.L40:
 529:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 530:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 531:bsp/boards/OpenMote-CC2538/source/ccm.c ****     return (AES_SUCCESS);
 929              		.loc 1 531 0
 930 0764 4FF00003 		mov	r3, #0
 931              	.L41:
 532:bsp/boards/OpenMote-CC2538/source/ccm.c **** }
 932              		.loc 1 532 0
 933 0768 1846     		mov	r0, r3
 934 076a 07F12807 		add	r7, r7, #40
 935 076e BD46     		mov	sp, r7
 936 0770 80BD     		pop	{r7, pc}
 937              		.cfi_endproc
 938              	.LFE3:
 940 0772 00BF     		.align	2
 941              		.global	CCMInvAuthDecryptCheckResult
 942              		.thumb
 943              		.thumb_func
 945              	CCMInvAuthDecryptCheckResult:
 946              	.LFB4:
 533:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 534:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
 535:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
 536:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! CCMInvAuthDecryptCheckResult function checks CCM decrypt and Inverse
 537:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! Authentication result.
 538:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 539:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \return  if result is available or error occurs returns true.  If result
 540:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! is not yet available or no error occurs returns false
 541:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
 542:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
 543:bsp/boards/OpenMote-CC2538/source/ccm.c **** uint8_t CCMInvAuthDecryptCheckResult(void)
 544:bsp/boards/OpenMote-CC2538/source/ccm.c **** {
 947              		.loc 1 544 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 1, uses_anonymous_args = 0
 951 0774 80B5     		push	{r7, lr}
 952              	.LCFI11:
 953              		.cfi_def_cfa_offset 8
 954              		.cfi_offset 7, -8
 955              		.cfi_offset 14, -4
 956 0776 00AF     		add	r7, sp, #0
 957              	.LCFI12:
 958              		.cfi_def_cfa_register 7
 545:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // check if result is available (or) some error has occured
 546:bsp/boards/OpenMote-CC2538/source/ccm.c ****     return (CCMAuthEncryptCheckResult());
 959              		.loc 1 546 0
 960 0778 FFF7FEFF 		bl	CCMAuthEncryptCheckResult
 961 077c 0346     		mov	r3, r0
 547:bsp/boards/OpenMote-CC2538/source/ccm.c **** }
 962              		.loc 1 547 0
 963 077e 1846     		mov	r0, r3
 964 0780 80BD     		pop	{r7, pc}
 965              		.cfi_endproc
 966              	.LFE4:
 968 0782 00BF     		.align	2
 969              		.global	CCMInvAuthDecryptGetResult
 970              		.thumb
 971              		.thumb_func
 973              	CCMInvAuthDecryptGetResult:
 974              	.LFB5:
 548:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 549:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
 550:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
 551:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! CCMInvAuthDecryptGetResult gets the result of CCM operation. This
 552:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! function should be called only after CCMInvAuthDecryptStart is called.
 553:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 554:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param ui8Mval is length of authentication field in octets [0,2,4,6,8,10,
 555:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! 12,14 or 16].
 556:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param pui8C is pointer to octet string 'c' = 'm' || auth tag T.
 557:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param ui16LenC  is length of message pui8C[] in octets.
 558:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \param pui8Cstate is pointer to AES state buffer, cannot be part of
 559:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!  pui8C[]).
 560:bsp/boards/OpenMote-CC2538/source/ccm.c **** //!
 561:bsp/boards/OpenMote-CC2538/source/ccm.c **** //! \return  AES_SUCCESS if successful.
 562:bsp/boards/OpenMote-CC2538/source/ccm.c **** //
 563:bsp/boards/OpenMote-CC2538/source/ccm.c **** //*****************************************************************************
 564:bsp/boards/OpenMote-CC2538/source/ccm.c **** uint8_t CCMInvAuthDecryptGetResult(uint8_t ui8Mval,
 565:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                    uint8_t *pui8C,
 566:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                    uint16_t ui16LenC,
 567:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                    uint8_t *pui8Cstate)
 568:bsp/boards/OpenMote-CC2538/source/ccm.c **** {
 975              		.loc 1 568 0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 40
 978              		@ frame_needed = 1, uses_anonymous_args = 0
 979 0784 80B5     		push	{r7, lr}
 980              	.LCFI13:
 981              		.cfi_def_cfa_offset 8
 982              		.cfi_offset 7, -8
 983              		.cfi_offset 14, -4
 984 0786 8AB0     		sub	sp, sp, #40
 985              	.LCFI14:
 986              		.cfi_def_cfa_offset 48
 987 0788 00AF     		add	r7, sp, #0
 988              	.LCFI15:
 989              		.cfi_def_cfa_register 7
 990 078a B960     		str	r1, [r7, #8]
 991 078c 7B60     		str	r3, [r7, #4]
 992 078e 0346     		mov	r3, r0
 993 0790 FB73     		strb	r3, [r7, #15]
 994 0792 1346     		mov	r3, r2	@ movhi
 995 0794 BB81     		strh	r3, [r7, #12]	@ movhi
 569:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint8_t volatile ui8MIC[16];
 570:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint16_t ui16LenM = ui16LenC - ui8Mval;
 996              		.loc 1 570 0
 997 0796 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 998 0798 9BB2     		uxth	r3, r3
 999 079a BA89     		ldrh	r2, [r7, #12]	@ movhi
 1000 079c D31A     		subs	r3, r2, r3
 1001 079e BB84     		strh	r3, [r7, #36]	@ movhi
 571:bsp/boards/OpenMote-CC2538/source/ccm.c ****     uint8_t ui8I, ui8J;
 572:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 573:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if((HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_BUS_ERR))
 1002              		.loc 1 573 0
 1003 07a0 4BF29073 		movw	r3, #46992
 1004 07a4 C4F20803 		movt	r3, 16392
 1005 07a8 1B68     		ldr	r3, [r3, #0]
 1006 07aa 002B     		cmp	r3, #0
 1007 07ac 0EDA     		bge	.L45
 574:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 575:bsp/boards/OpenMote-CC2538/source/ccm.c ****         //clear the DMA error
 576:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_CTRL_INT_CLR) |= AES_CTRL_INT_CLR_DMA_BUS_ERR;
 1008              		.loc 1 576 0
 1009 07ae 4BF28873 		movw	r3, #46984
 1010 07b2 C4F20803 		movt	r3, 16392
 1011 07b6 4BF28872 		movw	r2, #46984
 1012 07ba C4F20802 		movt	r2, 16392
 1013 07be 1268     		ldr	r2, [r2, #0]
 1014 07c0 42F00042 		orr	r2, r2, #-2147483648
 1015 07c4 1A60     		str	r2, [r3, #0]
 577:bsp/boards/OpenMote-CC2538/source/ccm.c ****         return (AES_DMA_BUS_ERROR);
 1016              		.loc 1 577 0
 1017 07c6 4FF00303 		mov	r3, #3
 1018 07ca BDE0     		b	.L46
 1019              	.L45:
 578:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 579:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if((HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_KEY_ST_WR_ERR))
 1020              		.loc 1 579 0
 1021 07cc 4BF29073 		movw	r3, #46992
 1022 07d0 C4F20803 		movt	r3, 16392
 1023 07d4 1B68     		ldr	r3, [r3, #0]
 1024 07d6 03F08043 		and	r3, r3, #1073741824
 1025 07da 002B     		cmp	r3, #0
 1026 07dc 0ED0     		beq	.L47
 580:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 581:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // clear the Key Store Write error bit
 582:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_CTRL_INT_CLR) |= AES_CTRL_INT_CLR_KEY_ST_WR_ERR;
 1027              		.loc 1 582 0
 1028 07de 4BF28873 		movw	r3, #46984
 1029 07e2 C4F20803 		movt	r3, 16392
 1030 07e6 4BF28872 		movw	r2, #46984
 1031 07ea C4F20802 		movt	r2, 16392
 1032 07ee 1268     		ldr	r2, [r2, #0]
 1033 07f0 42F08042 		orr	r2, r2, #1073741824
 1034 07f4 1A60     		str	r2, [r3, #0]
 583:bsp/boards/OpenMote-CC2538/source/ccm.c ****         return (AES_KEYSTORE_WRITE_ERROR);
 1035              		.loc 1 583 0
 1036 07f6 4FF00203 		mov	r3, #2
 1037 07fa A5E0     		b	.L46
 1038              	.L47:
 584:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 585:bsp/boards/OpenMote-CC2538/source/ccm.c ****     if((HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_KEY_ST_RD_ERR))
 1039              		.loc 1 585 0
 1040 07fc 4BF29073 		movw	r3, #46992
 1041 0800 C4F20803 		movt	r3, 16392
 1042 0804 1B68     		ldr	r3, [r3, #0]
 1043 0806 03F00053 		and	r3, r3, #536870912
 1044 080a 002B     		cmp	r3, #0
 1045 080c 0ED0     		beq	.L48
 586:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 587:bsp/boards/OpenMote-CC2538/source/ccm.c ****         // clear the Key Store Read error bit
 588:bsp/boards/OpenMote-CC2538/source/ccm.c ****         HWREG(AES_CTRL_INT_CLR) |= AES_CTRL_INT_CLR_KEY_ST_RD_ERR;
 1046              		.loc 1 588 0
 1047 080e 4BF28873 		movw	r3, #46984
 1048 0812 C4F20803 		movt	r3, 16392
 1049 0816 4BF28872 		movw	r2, #46984
 1050 081a C4F20802 		movt	r2, 16392
 1051 081e 1268     		ldr	r2, [r2, #0]
 1052 0820 42F00052 		orr	r2, r2, #536870912
 1053 0824 1A60     		str	r2, [r3, #0]
 589:bsp/boards/OpenMote-CC2538/source/ccm.c ****         return (AES_KEYSTORE_READ_ERROR);
 1054              		.loc 1 589 0
 1055 0826 4FF00103 		mov	r3, #1
 1056 082a 8DE0     		b	.L46
 1057              	.L48:
 590:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 591:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 592:bsp/boards/OpenMote-CC2538/source/ccm.c ****     IntDisable(INT_AES);
 1058              		.loc 1 592 0
 1059 082c 4FF09F00 		mov	r0, #159
 1060 0830 FFF7FEFF 		bl	IntDisable
 593:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 594:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // disable the master control/DMA clock
 595:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_ALG_SEL) = 0x00000000;
 1061              		.loc 1 595 0
 1062 0834 4FF43743 		mov	r3, #46848
 1063 0838 C4F20803 		movt	r3, 16392
 1064 083c 4FF00002 		mov	r2, #0
 1065 0840 1A60     		str	r2, [r3, #0]
 1066              	.L49:
 596:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 597:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // read tag
 598:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // wait for the context ready bit [30]
 599:bsp/boards/OpenMote-CC2538/source/ccm.c ****     do
 600:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 601:bsp/boards/OpenMote-CC2538/source/ccm.c ****         ASM_NOP;
 1067              		.loc 1 601 0 discriminator 1
 1068              	@ 601 "bsp/boards/OpenMote-CC2538/source/ccm.c" 1
 1069 0842 00BF     		NOP
 1070              	@ 0 "" 2
 602:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 603:bsp/boards/OpenMote-CC2538/source/ccm.c ****     while((HWREG(AES_AES_CTRL) & AES_AES_CTRL_saved_context_ready) !=
 1071              		.loc 1 603 0 discriminator 1
 1072              		.thumb
 1073 0844 4BF25053 		movw	r3, #46416
 1074 0848 C4F20803 		movt	r3, 16392
 1075 084c 1B68     		ldr	r3, [r3, #0]
 1076 084e 03F08043 		and	r3, r3, #1073741824
 604:bsp/boards/OpenMote-CC2538/source/ccm.c ****             AES_AES_CTRL_saved_context_ready);
 1077              		.loc 1 604 0 discriminator 1
 1078 0852 002B     		cmp	r3, #0
 1079 0854 F5D0     		beq	.L49
 605:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 606:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // Read the tag registers
 607:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ((uint32_t  *)&ui8MIC)[0] = HWREG(AES_AES_TAG_OUT_0);
 1080              		.loc 1 607 0
 1081 0856 07F11402 		add	r2, r7, #20
 1082 085a 4BF27053 		movw	r3, #46448
 1083 085e C4F20803 		movt	r3, 16392
 1084 0862 1B68     		ldr	r3, [r3, #0]
 1085 0864 1360     		str	r3, [r2, #0]
 608:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ((uint32_t  *)&ui8MIC)[1] = HWREG(AES_AES_TAG_OUT_1);
 1086              		.loc 1 608 0
 1087 0866 07F11403 		add	r3, r7, #20
 1088 086a 03F10403 		add	r3, r3, #4
 1089 086e 4BF27452 		movw	r2, #46452
 1090 0872 C4F20802 		movt	r2, 16392
 1091 0876 1268     		ldr	r2, [r2, #0]
 1092 0878 1A60     		str	r2, [r3, #0]
 609:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ((uint32_t  *)&ui8MIC)[2] = HWREG(AES_AES_TAG_OUT_2);
 1093              		.loc 1 609 0
 1094 087a 07F11403 		add	r3, r7, #20
 1095 087e 03F10803 		add	r3, r3, #8
 1096 0882 4BF27852 		movw	r2, #46456
 1097 0886 C4F20802 		movt	r2, 16392
 1098 088a 1268     		ldr	r2, [r2, #0]
 1099 088c 1A60     		str	r2, [r3, #0]
 610:bsp/boards/OpenMote-CC2538/source/ccm.c ****     ((uint32_t  *)&ui8MIC)[3] = HWREG(AES_AES_TAG_OUT_3);
 1100              		.loc 1 610 0
 1101 088e 07F11403 		add	r3, r7, #20
 1102 0892 03F10C03 		add	r3, r3, #12
 1103 0896 4BF27C52 		movw	r2, #46460
 1104 089a C4F20802 		movt	r2, 16392
 1105 089e 1268     		ldr	r2, [r2, #0]
 1106 08a0 1A60     		str	r2, [r3, #0]
 611:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 612:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // clear the interrupt status
 613:bsp/boards/OpenMote-CC2538/source/ccm.c ****     HWREG(AES_CTRL_INT_CLR) |= (AES_CTRL_INT_CLR_DMA_IN_DONE |
 1107              		.loc 1 613 0
 1108 08a2 4BF28873 		movw	r3, #46984
 1109 08a6 C4F20803 		movt	r3, 16392
 1110 08aa 4BF28872 		movw	r2, #46984
 1111 08ae C4F20802 		movt	r2, 16392
 1112 08b2 1268     		ldr	r2, [r2, #0]
 1113 08b4 42F00302 		orr	r2, r2, #3
 1114 08b8 1A60     		str	r2, [r3, #0]
 614:bsp/boards/OpenMote-CC2538/source/ccm.c ****                                 AES_CTRL_INT_CLR_RESULT_AV);
 615:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 616:bsp/boards/OpenMote-CC2538/source/ccm.c ****     // copy tag to pui8Cstate
 617:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < ui8Mval; ui8I++)
 1115              		.loc 1 617 0
 1116 08ba 4FF00003 		mov	r3, #0
 1117 08be 87F82730 		strb	r3, [r7, #39]
 1118 08c2 12E0     		b	.L50
 1119              	.L51:
 618:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 619:bsp/boards/OpenMote-CC2538/source/ccm.c ****         pui8Cstate[ui8I] = ui8MIC[ui8I];
 1120              		.loc 1 619 0 discriminator 2
 1121 08c4 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1122 08c8 7A68     		ldr	r2, [r7, #4]
 1123 08ca D318     		adds	r3, r2, r3
 1124 08cc 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 1125 08d0 07F12801 		add	r1, r7, #40
 1126 08d4 8A18     		adds	r2, r1, r2
 1127 08d6 12F8142C 		ldrb	r2, [r2, #-20]
 1128 08da D2B2     		uxtb	r2, r2
 1129 08dc 1A70     		strb	r2, [r3, #0]
 617:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < ui8Mval; ui8I++)
 1130              		.loc 1 617 0 discriminator 2
 1131 08de 97F82730 		ldrb	r3, [r7, #39]
 1132 08e2 03F10103 		add	r3, r3, #1
 1133 08e6 87F82730 		strb	r3, [r7, #39]
 1134              	.L50:
 617:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8I = 0; ui8I < ui8Mval; ui8I++)
 1135              		.loc 1 617 0 is_stmt 0 discriminator 1
 1136 08ea 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 1137 08ee FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1138 08f0 9A42     		cmp	r2, r3
 1139 08f2 E7D3     		bcc	.L51
 620:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 621:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 622:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8J = 0; ui8J < ui8Mval; ui8J++)
 1140              		.loc 1 622 0 is_stmt 1
 1141 08f4 4FF00003 		mov	r3, #0
 1142 08f8 87F82630 		strb	r3, [r7, #38]
 1143 08fc 16E0     		b	.L52
 1144              	.L54:
 623:bsp/boards/OpenMote-CC2538/source/ccm.c ****     {
 624:bsp/boards/OpenMote-CC2538/source/ccm.c ****         if(pui8Cstate[ui8J] != pui8C[ui16LenM + ui8J])
 1145              		.loc 1 624 0
 1146 08fe 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 1147 0902 7A68     		ldr	r2, [r7, #4]
 1148 0904 D318     		adds	r3, r2, r3
 1149 0906 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1150 0908 B98C     		ldrh	r1, [r7, #36]
 1151 090a 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 1152 090e CB18     		adds	r3, r1, r3
 1153 0910 B968     		ldr	r1, [r7, #8]
 1154 0912 CB18     		adds	r3, r1, r3
 1155 0914 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1156 0916 9A42     		cmp	r2, r3
 1157 0918 02D0     		beq	.L53
 625:bsp/boards/OpenMote-CC2538/source/ccm.c ****         {
 626:bsp/boards/OpenMote-CC2538/source/ccm.c ****             return (CCM_AUTHENTICATION_FAILED);
 1158              		.loc 1 626 0
 1159 091a 4FF00403 		mov	r3, #4
 1160 091e 13E0     		b	.L46
 1161              	.L53:
 622:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8J = 0; ui8J < ui8Mval; ui8J++)
 1162              		.loc 1 622 0
 1163 0920 97F82630 		ldrb	r3, [r7, #38]
 1164 0924 03F10103 		add	r3, r3, #1
 1165 0928 87F82630 		strb	r3, [r7, #38]
 1166              	.L52:
 622:bsp/boards/OpenMote-CC2538/source/ccm.c ****     for(ui8J = 0; ui8J < ui8Mval; ui8J++)
 1167              		.loc 1 622 0 is_stmt 0 discriminator 1
 1168 092c 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 1169 0930 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1170 0932 9A42     		cmp	r2, r3
 1171 0934 E3D3     		bcc	.L54
 627:bsp/boards/OpenMote-CC2538/source/ccm.c ****         }
 628:bsp/boards/OpenMote-CC2538/source/ccm.c ****     }
 629:bsp/boards/OpenMote-CC2538/source/ccm.c **** 
 630:bsp/boards/OpenMote-CC2538/source/ccm.c ****     g_ui8CurrentAESOp = AES_NONE;
 1172              		.loc 1 630 0 is_stmt 1
 1173 0936 40F20003 		movw	r3, #:lower16:g_ui8CurrentAESOp
 1174 093a C0F20003 		movt	r3, #:upper16:g_ui8CurrentAESOp
 1175 093e 4FF00002 		mov	r2, #0
 1176 0942 1A70     		strb	r2, [r3, #0]
 631:bsp/boards/OpenMote-CC2538/source/ccm.c ****     return (AES_SUCCESS);
 1177              		.loc 1 631 0
 1178 0944 4FF00003 		mov	r3, #0
 1179              	.L46:
 632:bsp/boards/OpenMote-CC2538/source/ccm.c **** }
 1180              		.loc 1 632 0
 1181 0948 1846     		mov	r0, r3
 1182 094a 07F12807 		add	r7, r7, #40
 1183 094e BD46     		mov	sp, r7
 1184 0950 80BD     		pop	{r7, pc}
 1185              		.cfi_endproc
 1186              	.LFE5:
 1188              	.Letext0:
 1189              		.file 2 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
 1190              		.file 3 "bsp/boards/OpenMote-CC2538/source/aes.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ccm.c
     /tmp/ccwHpJ30.s:18     .text:00000000 $t
     /tmp/ccwHpJ30.s:23     .text:00000000 CCMAuthEncryptStart
     /tmp/ccwHpJ30.s:362    .text:000002d8 CCMAuthEncryptCheckResult
     /tmp/ccwHpJ30.s:430    .text:00000338 CCMAuthEncryptGetResult
     /tmp/ccwHpJ30.s:611    .text:000004ac CCMInvAuthDecryptStart
     /tmp/ccwHpJ30.s:945    .text:00000774 CCMInvAuthDecryptCheckResult
     /tmp/ccwHpJ30.s:973    .text:00000784 CCMInvAuthDecryptGetResult
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e96eee74da26538b12ac9582e3798382
                           .group:00000000 wm4.hw_aes.h.39.77ecc3829d96bb0e5669b1f36ecffb12
                           .group:00000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.aes.h.66.0fb976edb685649779bd34f5f8f7ef75

UNDEFINED SYMBOLS
g_ui8CurrentAESOp
IntDisable
IntPendClear
IntEnable
