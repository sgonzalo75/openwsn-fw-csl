   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"bsp_timer.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  22              	rreg_uriquery:
  23 0000 683D7563 		.ascii	"h=ucb\000"
  23      6200
  24 0006 0000     		.align	2
  27              	infoBoardname:
  28 0008 43433235 		.ascii	"CC2538\000"
  28      333800
  29 000f 00       		.align	2
  32              	infouCName:
  33 0010 43433235 		.ascii	"CC2538\000"
  33      333800
  34 0017 00       		.align	2
  37              	infoRadioName:
  38 0018 43433235 		.ascii	"CC2538 SoC\000"
  38      33382053 
  38      6F4300
  39              		.comm	bsp_timer_vars,20,4
  40 0023 00       		.text
  41              		.align	2
  42              		.global	bsp_timer_init
  43              		.thumb
  44              		.thumb_func
  46              	bsp_timer_init:
  47              	.LFB0:
  48              		.file 1 "bsp/boards/OpenMote-CC2538/bsp_timer.c"
   1:bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
   2:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  * Author: Xavier Vilajosana (xvilajosana@eecs.berkeley.edu)
   3:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  *         Pere Tuset (peretuset@openmote.com)
   4:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  * Date:   July 2013
   5:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  * Description: CC2538-specific definition of the "bsp_timer" bsp module.
   6:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
   7:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
   8:bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include <headers/hw_ints.h>
   9:bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include <headers/hw_memmap.h>
  10:bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include <headers/hw_smwdthrosc.h>
  11:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  12:bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "string.h"
  13:bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "bsp_timer.h"
  14:bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "board.h"
  15:bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "debug.h"
  16:bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "interrupt.h"
  17:bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "sleepmode.h"
  18:bsp/boards/OpenMote-CC2538/bsp_timer.c **** #include "debugpins.h"
  19:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  20:bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== defines =========================================
  21:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  22:bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== variables =======================================
  23:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  24:bsp/boards/OpenMote-CC2538/bsp_timer.c **** typedef struct {
  25:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_cbt cb;
  26:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	PORT_TIMER_WIDTH last_compare_value;
  27:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bool initiated;
  28:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	uint32_t tooclose;
  29:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	uint32_t diff;
  30:bsp/boards/OpenMote-CC2538/bsp_timer.c **** } bsp_timer_vars_t;
  31:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  32:bsp/boards/OpenMote-CC2538/bsp_timer.c **** bsp_timer_vars_t bsp_timer_vars;
  33:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  34:bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== prototypes ======================================
  35:bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_isr_private(void);
  36:bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== public ==========================================
  37:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  38:bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
  39:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Initialize this module.
  40:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  41:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  This functions starts the timer, i.e. the counter increments, but doesn't set
  42:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  any compare registers, so no interrupt will fire.
  43:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
  44:bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_init() {
  49              		.loc 1 44 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 1, uses_anonymous_args = 0
  53 0000 80B5     		push	{r7, lr}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 7, -8
  57              		.cfi_offset 14, -4
  58 0002 00AF     		add	r7, sp, #0
  59              	.LCFI1:
  60              		.cfi_def_cfa_register 7
  45:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  46:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// clear local variables
  47:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	memset(&bsp_timer_vars, 0, sizeof(bsp_timer_vars_t));
  61              		.loc 1 47 0
  62 0004 40F20000 		movw	r0, #:lower16:bsp_timer_vars
  63 0008 C0F20000 		movt	r0, #:upper16:bsp_timer_vars
  64 000c 4FF00001 		mov	r1, #0
  65 0010 4FF01402 		mov	r2, #20
  66 0014 FFF7FEFF 		bl	memset
  48:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  49:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// enable peripheral Sleeptimer
  50:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	IntRegister(INT_SMTIM, bsp_timer_isr_private);
  67              		.loc 1 50 0
  68 0018 4FF0A100 		mov	r0, #161
  69 001c 40F20001 		movw	r1, #:lower16:bsp_timer_isr_private
  70 0020 C0F20001 		movt	r1, #:upper16:bsp_timer_isr_private
  71 0024 FFF7FEFF 		bl	IntRegister
  51:bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
  72              		.loc 1 51 0
  73 0028 80BD     		pop	{r7, pc}
  74              		.cfi_endproc
  75              	.LFE0:
  77 002a 00BF     		.align	2
  78              		.global	bsp_timer_set_callback
  79              		.thumb
  80              		.thumb_func
  82              	bsp_timer_set_callback:
  83              	.LFB1:
  52:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  53:bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
  54:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Register a callback.
  55:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  56:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \param cb The function to be called when a compare event happens.
  57:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
  58:bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_set_callback(bsp_timer_cbt cb) {
  84              		.loc 1 58 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 8
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89 002c 80B4     		push	{r7}
  90              	.LCFI2:
  91              		.cfi_def_cfa_offset 4
  92              		.cfi_offset 7, -4
  93 002e 83B0     		sub	sp, sp, #12
  94              	.LCFI3:
  95              		.cfi_def_cfa_offset 16
  96 0030 00AF     		add	r7, sp, #0
  97              	.LCFI4:
  98              		.cfi_def_cfa_register 7
  99 0032 7860     		str	r0, [r7, #4]
  59:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_vars.cb = cb;
 100              		.loc 1 59 0
 101 0034 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 102 0038 C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 103 003c 7A68     		ldr	r2, [r7, #4]
 104 003e 1A60     		str	r2, [r3, #0]
  60:bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 105              		.loc 1 60 0
 106 0040 07F10C07 		add	r7, r7, #12
 107 0044 BD46     		mov	sp, r7
 108 0046 80BC     		pop	{r7}
 109 0048 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE1:
 113 004a 00BF     		.align	2
 114              		.global	bsp_timer_reset
 115              		.thumb
 116              		.thumb_func
 118              	bsp_timer_reset:
 119              	.LFB2:
  61:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  62:bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
  63:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Reset the timer.
  64:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  65:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  This function does not stop the timer, it rather resets the value of the
  66:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  counter, and cancels a possible pending compare event.
  67:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
  68:bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_reset() {
 120              		.loc 1 68 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 004c 80B4     		push	{r7}
 126              	.LCFI5:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
 129 004e 00AF     		add	r7, sp, #0
 130              	.LCFI6:
 131              		.cfi_def_cfa_register 7
  69:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// reset compare
  70:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  71:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// reset timer
  72:bsp/boards/OpenMote-CC2538/bsp_timer.c ****     bsp_timer_vars.initiated=false;
 132              		.loc 1 72 0
 133 0050 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 134 0054 C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 135 0058 4FF00002 		mov	r2, #0
 136 005c 1A72     		strb	r2, [r3, #8]
  73:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// record last timer compare value
  74:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_vars.last_compare_value = 0;
 137              		.loc 1 74 0
 138 005e 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 139 0062 C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 140 0066 4FF00002 		mov	r2, #0
 141 006a 5A60     		str	r2, [r3, #4]
  75:bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 142              		.loc 1 75 0
 143 006c BD46     		mov	sp, r7
 144 006e 80BC     		pop	{r7}
 145 0070 7047     		bx	lr
 146              		.cfi_endproc
 147              	.LFE2:
 149 0072 00BF     		.align	2
 150              		.global	bsp_timer_scheduleIn
 151              		.thumb
 152              		.thumb_func
 154              	bsp_timer_scheduleIn:
 155              	.LFB3:
  76:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  77:bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
  78:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Schedule the callback to be called in some specified time.
  79:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  80:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  The delay is expressed relative to the last compare event. It doesn't matter
  81:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  how long it took to call this function after the last compare, the timer will
  82:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  expire precisely delayTicks after the last one.
  83:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  84:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  The only possible problem is that it took so long to call this function that
  85:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  the delay specified is shorter than the time already elapsed since the last
  86:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  compare. In that case, this function triggers the interrupt to fire right away.
  87:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  88:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  This means that the interrupt may fire a bit off, but this inaccuracy does not
  89:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  propagate to subsequent timers.
  90:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  91:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \param delayTicks Number of ticks before the timer expired, relative to the
  92:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  last compare event.
  93:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
  94:bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_scheduleIn(PORT_TIMER_WIDTH delayTicks) {
 156              		.loc 1 94 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 24
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0074 80B5     		push	{r7, lr}
 161              	.LCFI7:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0076 86B0     		sub	sp, sp, #24
 166              	.LCFI8:
 167              		.cfi_def_cfa_offset 32
 168 0078 00AF     		add	r7, sp, #0
 169              	.LCFI9:
 170              		.cfi_def_cfa_register 7
 171 007a 7860     		str	r0, [r7, #4]
  95:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	PORT_TIMER_WIDTH newCompareValue, current;
  96:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	PORT_TIMER_WIDTH temp_last_compare_value;
  97:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
  98:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	if (!bsp_timer_vars.initiated){
 172              		.loc 1 98 0
 173 007c 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 174 0080 C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 175 0084 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 176 0086 83F00103 		eor	r3, r3, #1
 177 008a DBB2     		uxtb	r3, r3
 178 008c 002B     		cmp	r3, #0
 179 008e 0ED0     		beq	.L5
  99:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		//as the timer runs forever the first time it is turned on has a weired value
 100:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		bsp_timer_vars.last_compare_value=SleepModeTimerCountGet();
 180              		.loc 1 100 0
 181 0090 FFF7FEFF 		bl	SleepModeTimerCountGet
 182 0094 0246     		mov	r2, r0
 183 0096 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 184 009a C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 185 009e 5A60     		str	r2, [r3, #4]
 101:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		bsp_timer_vars.initiated=true;
 186              		.loc 1 101 0
 187 00a0 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 188 00a4 C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 189 00a8 4FF00102 		mov	r2, #1
 190 00ac 1A72     		strb	r2, [r3, #8]
 191              	.L5:
 102:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	}
 103:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 104:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	temp_last_compare_value = bsp_timer_vars.last_compare_value;
 192              		.loc 1 104 0
 193 00ae 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 194 00b2 C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 195 00b6 5B68     		ldr	r3, [r3, #4]
 196 00b8 7B61     		str	r3, [r7, #20]
 105:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 106:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	newCompareValue = bsp_timer_vars.last_compare_value + delayTicks + 1;
 197              		.loc 1 106 0
 198 00ba 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 199 00be C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 200 00c2 5A68     		ldr	r2, [r3, #4]
 201 00c4 7B68     		ldr	r3, [r7, #4]
 202 00c6 D318     		adds	r3, r2, r3
 203 00c8 03F10103 		add	r3, r3, #1
 204 00cc 3B61     		str	r3, [r7, #16]
 107:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_vars.last_compare_value = newCompareValue;
 205              		.loc 1 107 0
 206 00ce 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 207 00d2 C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 208 00d6 3A69     		ldr	r2, [r7, #16]
 209 00d8 5A60     		str	r2, [r3, #4]
 108:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 109:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	current = SleepModeTimerCountGet();
 210              		.loc 1 109 0
 211 00da FFF7FEFF 		bl	SleepModeTimerCountGet
 212 00de F860     		str	r0, [r7, #12]
 110:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 111:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	if (delayTicks < current - temp_last_compare_value) {
 213              		.loc 1 111 0
 214 00e0 FA68     		ldr	r2, [r7, #12]
 215 00e2 7B69     		ldr	r3, [r7, #20]
 216 00e4 D21A     		subs	r2, r2, r3
 217 00e6 7B68     		ldr	r3, [r7, #4]
 218 00e8 9A42     		cmp	r2, r3
 219 00ea 1ED9     		bls	.L6
 112:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 113:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		// we're already too late, schedule the ISR right now manually
 114:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		// setting the interrupt flag triggers an interrupt
 115:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		bsp_timer_vars.tooclose++;
 220              		.loc 1 115 0
 221 00ec 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 222 00f0 C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 223 00f4 DB68     		ldr	r3, [r3, #12]
 224 00f6 03F10102 		add	r2, r3, #1
 225 00fa 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 226 00fe C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 227 0102 DA60     		str	r2, [r3, #12]
 116:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		bsp_timer_vars.diff=(current - temp_last_compare_value);
 228              		.loc 1 116 0
 229 0104 FA68     		ldr	r2, [r7, #12]
 230 0106 7B69     		ldr	r3, [r7, #20]
 231 0108 D21A     		subs	r2, r2, r3
 232 010a 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 233 010e C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 234 0112 1A61     		str	r2, [r3, #16]
 117:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		bsp_timer_vars.last_compare_value = current;
 235              		.loc 1 117 0
 236 0114 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 237 0118 C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 238 011c FA68     		ldr	r2, [r7, #12]
 239 011e 5A60     		str	r2, [r3, #4]
 118:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		IntPendSet(INT_SMTIM);
 240              		.loc 1 118 0
 241 0120 4FF0A100 		mov	r0, #161
 242 0124 FFF7FEFF 		bl	IntPendSet
 243 0128 02E0     		b	.L7
 244              	.L6:
 119:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	} else {
 120:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		// this is the normal case, have timer expire at newCompareValue
 121:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 		SleepModeTimerCompareSet(newCompareValue);
 245              		.loc 1 121 0
 246 012a 3869     		ldr	r0, [r7, #16]
 247 012c FFF7FEFF 		bl	SleepModeTimerCompareSet
 248              	.L7:
 122:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	}
 123:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	//enable interrupt
 124:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	IntEnable(INT_SMTIM);
 249              		.loc 1 124 0
 250 0130 4FF0A100 		mov	r0, #161
 251 0134 FFF7FEFF 		bl	IntEnable
 125:bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 252              		.loc 1 125 0
 253 0138 07F11807 		add	r7, r7, #24
 254 013c BD46     		mov	sp, r7
 255 013e 80BD     		pop	{r7, pc}
 256              		.cfi_endproc
 257              	.LFE3:
 259              		.align	2
 260              		.global	bsp_timer_cancel_schedule
 261              		.thumb
 262              		.thumb_func
 264              	bsp_timer_cancel_schedule:
 265              	.LFB4:
 126:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 127:bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
 128:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Cancel a running compare.
 129:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
 130:bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_cancel_schedule() {
 266              		.loc 1 130 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270 0140 80B5     		push	{r7, lr}
 271              	.LCFI10:
 272              		.cfi_def_cfa_offset 8
 273              		.cfi_offset 7, -8
 274              		.cfi_offset 14, -4
 275 0142 00AF     		add	r7, sp, #0
 276              	.LCFI11:
 277              		.cfi_def_cfa_register 7
 131:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// Disable the Timer0B interrupt.
 132:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	IntDisable(INT_SMTIM);
 278              		.loc 1 132 0
 279 0144 4FF0A100 		mov	r0, #161
 280 0148 FFF7FEFF 		bl	IntDisable
 133:bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 281              		.loc 1 133 0
 282 014c 80BD     		pop	{r7, pc}
 283              		.cfi_endproc
 284              	.LFE4:
 286 014e 00BF     		.align	2
 287              		.global	bsp_timer_get_currentValue
 288              		.thumb
 289              		.thumb_func
 291              	bsp_timer_get_currentValue:
 292              	.LFB5:
 134:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 135:bsp/boards/OpenMote-CC2538/bsp_timer.c **** /**
 136:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \brief Return the current value of the timer's counter.
 137:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 138:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  \returns The current value of the timer's counter.
 139:bsp/boards/OpenMote-CC2538/bsp_timer.c ****  */
 140:bsp/boards/OpenMote-CC2538/bsp_timer.c **** PORT_TIMER_WIDTH bsp_timer_get_currentValue() {
 293              		.loc 1 140 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 0150 80B5     		push	{r7, lr}
 298              	.LCFI12:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 0152 00AF     		add	r7, sp, #0
 303              	.LCFI13:
 304              		.cfi_def_cfa_register 7
 141:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	return SleepModeTimerCountGet();
 305              		.loc 1 141 0
 306 0154 FFF7FEFF 		bl	SleepModeTimerCountGet
 307 0158 0346     		mov	r3, r0
 142:bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 308              		.loc 1 142 0
 309 015a 1846     		mov	r0, r3
 310 015c 80BD     		pop	{r7, pc}
 311              		.cfi_endproc
 312              	.LFE5:
 314 015e 00BF     		.align	2
 315              		.global	bsp_timer_isr_private
 316              		.thumb
 317              		.thumb_func
 319              	bsp_timer_isr_private:
 320              	.LFB6:
 143:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 144:bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== private =========================================
 145:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 146:bsp/boards/OpenMote-CC2538/bsp_timer.c **** void bsp_timer_isr_private(void) {
 321              		.loc 1 146 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 1, uses_anonymous_args = 0
 325 0160 80B5     		push	{r7, lr}
 326              	.LCFI14:
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 7, -8
 329              		.cfi_offset 14, -4
 330 0162 00AF     		add	r7, sp, #0
 331              	.LCFI15:
 332              		.cfi_def_cfa_register 7
 147:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	debugpins_isr_set();
 333              		.loc 1 147 0
 334 0164 FFF7FEFF 		bl	debugpins_isr_set
 148:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	IntPendClear(INT_SMTIM);
 335              		.loc 1 148 0
 336 0168 4FF0A100 		mov	r0, #161
 337 016c FFF7FEFF 		bl	IntPendClear
 149:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_isr();
 338              		.loc 1 149 0
 339 0170 FFF7FEFF 		bl	bsp_timer_isr
 150:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	debugpins_isr_clr();
 340              		.loc 1 150 0
 341 0174 FFF7FEFF 		bl	debugpins_isr_clr
 151:bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 342              		.loc 1 151 0
 343 0178 80BD     		pop	{r7, pc}
 344              		.cfi_endproc
 345              	.LFE6:
 347 017a 00BF     		.align	2
 348              		.global	bsp_timer_isr
 349              		.thumb
 350              		.thumb_func
 352              	bsp_timer_isr:
 353              	.LFB7:
 152:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 153:bsp/boards/OpenMote-CC2538/bsp_timer.c **** //=========================== interrupt handlers ==============================
 154:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 155:bsp/boards/OpenMote-CC2538/bsp_timer.c **** kick_scheduler_t bsp_timer_isr() {
 354              		.loc 1 155 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358 017c 80B5     		push	{r7, lr}
 359              	.LCFI16:
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 7, -8
 362              		.cfi_offset 14, -4
 363 017e 00AF     		add	r7, sp, #0
 364              	.LCFI17:
 365              		.cfi_def_cfa_register 7
 156:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 
 157:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// call the callback
 158:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	bsp_timer_vars.cb();
 366              		.loc 1 158 0
 367 0180 40F20003 		movw	r3, #:lower16:bsp_timer_vars
 368 0184 C0F20003 		movt	r3, #:upper16:bsp_timer_vars
 369 0188 1B68     		ldr	r3, [r3, #0]
 370 018a 9847     		blx	r3
 159:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	// kick the OS
 160:bsp/boards/OpenMote-CC2538/bsp_timer.c **** 	return KICK_SCHEDULER;
 371              		.loc 1 160 0
 372 018c 4FF00103 		mov	r3, #1
 161:bsp/boards/OpenMote-CC2538/bsp_timer.c **** }
 373              		.loc 1 161 0
 374 0190 1846     		mov	r0, r3
 375 0192 80BD     		pop	{r7, pc}
 376              		.cfi_endproc
 377              	.LFE7:
 379              	.Letext0:
 380              		.file 2 "/opt/gcc-arm-none-eabi-4_7-2013q3/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none
 381              		.file 3 "bsp/boards/board.h"
 382              		.file 4 "bsp/boards/bsp_timer.h"
 383              		.file 5 "bsp/boards/OpenMote-CC2538/board_info.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bsp_timer.c
     /tmp/cchHsazk.s:19     .rodata:00000000 $d
     /tmp/cchHsazk.s:22     .rodata:00000000 rreg_uriquery
     /tmp/cchHsazk.s:27     .rodata:00000008 infoBoardname
     /tmp/cchHsazk.s:32     .rodata:00000010 infouCName
     /tmp/cchHsazk.s:37     .rodata:00000018 infoRadioName
                            *COM*:00000014 bsp_timer_vars
     /tmp/cchHsazk.s:41     .text:00000000 $t
     /tmp/cchHsazk.s:46     .text:00000000 bsp_timer_init
     /tmp/cchHsazk.s:319    .text:00000160 bsp_timer_isr_private
     /tmp/cchHsazk.s:82     .text:0000002c bsp_timer_set_callback
     /tmp/cchHsazk.s:118    .text:0000004c bsp_timer_reset
     /tmp/cchHsazk.s:154    .text:00000074 bsp_timer_scheduleIn
     /tmp/cchHsazk.s:264    .text:00000140 bsp_timer_cancel_schedule
     /tmp/cchHsazk.s:291    .text:00000150 bsp_timer_get_currentValue
     /tmp/cchHsazk.s:352    .text:0000017c bsp_timer_isr
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e96eee74da26538b12ac9582e3798382
                           .group:00000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:00000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:00000000 wm4.hw_smwdthrosc.h.39.ab42722bc5551495328d9a67238c9bbc
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.string.h.17.f8d12df81104836a3f2a5d589ae830d8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.board_info.h.21.847e72606a2fc49b1c228f268b8a62aa
                           .group:00000000 wm4.toolchain_defs.h.2.59a5259f74cb714abc17e042354ff20f
                           .group:00000000 wm4.debug.h.41.b891e613993738d067c45a5ff528d11a
                           .group:00000000 wm4.sleepmode.h.41.8aaaa1e0c85692d50a0ac7b45436b69e

UNDEFINED SYMBOLS
memset
IntRegister
SleepModeTimerCountGet
IntPendSet
SleepModeTimerCompareSet
IntEnable
IntDisable
debugpins_isr_set
IntPendClear
debugpins_isr_clr
